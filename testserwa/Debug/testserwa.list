
testserwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08008b70  08008b70  00018b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009130  08009130  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009130  08009130  00019130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009138  08009138  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000204  08009344  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08009344  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be60  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b10  00000000  00000000  0002c094  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000167a6  00000000  00000000  0002f320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b8b  00000000  00000000  00045ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d756  00000000  00000000  0004e651  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbda7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f60  00000000  00000000  000dbe24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b58 	.word	0x08008b58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08008b58 	.word	0x08008b58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <kierunek>:
static void MX_TIM3_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
/* USER CODE BEGIN PFP */

void kierunek(int a, int b, int c, int d) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(kierunkiL1_GPIO_Port, kierunkiL1_Pin, a);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f60:	480e      	ldr	r0, [pc, #56]	; (8000f9c <kierunek+0x54>)
 8000f62:	f002 fc9b 	bl	800389c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kierunkiL2_GPIO_Port, kierunkiL2_Pin, b);
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <kierunek+0x58>)
 8000f72:	f002 fc93 	bl	800389c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kierunkiP1_GPIO_Port, kierunkiP1_Pin, c);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <kierunek+0x5c>)
 8000f80:	f002 fc8c 	bl	800389c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kierunkiP2_GPIO_Port, kierunkiP2_Pin, d);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <kierunek+0x5c>)
 8000f8e:	f002 fc85 	bl	800389c <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a91      	ldr	r2, [pc, #580]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f040 81b2 	bne.w	800131e <HAL_TIM_PeriodElapsedCallback+0x376>
		if (flaga == 1) {
 8000fba:	4b90      	ldr	r3, [pc, #576]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d138      	bne.n	8001034 <HAL_TIM_PeriodElapsedCallback+0x8c>
			kalibracja++;
 8000fc2:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a8d      	ldr	r2, [pc, #564]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000fca:	6013      	str	r3, [r2, #0]
			i++;
 8000fcc:	4b8d      	ldr	r3, [pc, #564]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a8c      	ldr	r2, [pc, #560]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000fd4:	6013      	str	r3, [r2, #0]
			j--;
 8000fd6:	4b8c      	ldr	r3, [pc, #560]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	4a8a      	ldr	r2, [pc, #552]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fde:	6013      	str	r3, [r2, #0]
			if (i == 75) {
 8000fe0:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b4b      	cmp	r3, #75	; 0x4b
 8000fe6:	d105      	bne.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x4c>
				j = 80;
 8000fe8:	4b87      	ldr	r3, [pc, #540]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fea:	2250      	movs	r2, #80	; 0x50
 8000fec:	601a      	str	r2, [r3, #0]
				kalibracja = 0;
 8000fee:	4b84      	ldr	r3, [pc, #528]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
			}
			if (kalibracja == 7) {
 8000ff4:	4b82      	ldr	r3, [pc, #520]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	d107      	bne.n	800100c <HAL_TIM_PeriodElapsedCallback+0x64>
				j++;
 8000ffc:	4b82      	ldr	r3, [pc, #520]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a81      	ldr	r2, [pc, #516]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001004:	6013      	str	r3, [r2, #0]
				kalibracja = 0;
 8001006:	4b7e      	ldr	r3, [pc, #504]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
			}
			TIM4->CCR4 = i;
 800100c:	4b7d      	ldr	r3, [pc, #500]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b7e      	ldr	r3, [pc, #504]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
			TIM4->CCR3 = j;
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b7c      	ldr	r3, [pc, #496]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
			if (i == max) {
 800101c:	4b79      	ldr	r3, [pc, #484]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d105      	bne.n	8001034 <HAL_TIM_PeriodElapsedCallback+0x8c>
				flaga = 0;
 8001028:	4b74      	ldr	r3, [pc, #464]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 800102e:	4872      	ldr	r0, [pc, #456]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001030:	f003 f8ff 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == -1) {
 8001034:	4b71      	ldr	r3, [pc, #452]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d138      	bne.n	80010b0 <HAL_TIM_PeriodElapsedCallback+0x108>
			kalibracja++;
 800103e:	4b70      	ldr	r3, [pc, #448]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a6e      	ldr	r2, [pc, #440]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001046:	6013      	str	r3, [r2, #0]
			i--;
 8001048:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	4a6d      	ldr	r2, [pc, #436]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001050:	6013      	str	r3, [r2, #0]
			j++;
 8001052:	4b6d      	ldr	r3, [pc, #436]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a6b      	ldr	r2, [pc, #428]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800105a:	6013      	str	r3, [r2, #0]
			if (i == 75) {
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b4b      	cmp	r3, #75	; 0x4b
 8001062:	d105      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0xc8>
				j = 80;
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001066:	2250      	movs	r2, #80	; 0x50
 8001068:	601a      	str	r2, [r3, #0]
				kalibracja = 0;
 800106a:	4b65      	ldr	r3, [pc, #404]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
			}
			if (kalibracja == 7) {
 8001070:	4b63      	ldr	r3, [pc, #396]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b07      	cmp	r3, #7
 8001076:	d107      	bne.n	8001088 <HAL_TIM_PeriodElapsedCallback+0xe0>
				j--;
 8001078:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a62      	ldr	r2, [pc, #392]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001080:	6013      	str	r3, [r2, #0]
				kalibracja = 0;
 8001082:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
			}
			TIM4->CCR4 = i;
 8001088:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b5f      	ldr	r3, [pc, #380]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800108e:	641a      	str	r2, [r3, #64]	; 0x40
			TIM4->CCR3 = j;
 8001090:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c
			if (i == max) {
 8001098:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d105      	bne.n	80010b0 <HAL_TIM_PeriodElapsedCallback+0x108>
				flaga = 0;
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80010aa:	4853      	ldr	r0, [pc, #332]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010ac:	f003 f8c1 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 2) {
 80010b0:	4b52      	ldr	r3, [pc, #328]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d114      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x13a>
			k++;
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a55      	ldr	r2, [pc, #340]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010c0:	6013      	str	r3, [r2, #0]
			TIM4->CCR2 = k;
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
			if (k == max) {
 80010ca:	4b52      	ldr	r3, [pc, #328]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d105      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x13a>
				flaga = 0;
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80010dc:	4846      	ldr	r0, [pc, #280]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010de:	f003 f8a8 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 3) {
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d114      	bne.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x16c>
			k--;
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a48      	ldr	r2, [pc, #288]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010f2:	6013      	str	r3, [r2, #0]
			TIM4->CCR2 = k;
 80010f4:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
			if (k == max) {
 80010fc:	4b45      	ldr	r3, [pc, #276]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d105      	bne.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x16c>
				flaga = 0;
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 800110e:	483a      	ldr	r0, [pc, #232]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001110:	f003 f88f 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 4) {
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d114      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x19e>
			l++;
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a3d      	ldr	r2, [pc, #244]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001124:	6013      	str	r3, [r2, #0]
			TIM4->CCR1 = l;
 8001126:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
			if (l == max) {
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d105      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x19e>
				flaga = 0;
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001140:	482d      	ldr	r0, [pc, #180]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001142:	f003 f876 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 5) {
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d114      	bne.n	8001178 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			l--;
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	4a30      	ldr	r2, [pc, #192]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001156:	6013      	str	r3, [r2, #0]
			TIM4->CCR1 = l;
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
			if (l == max) {
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d105      	bne.n	8001178 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				flaga = 0;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001174:	f003 f85d 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}

		/* do fabrika */
		if (flaga == 10) {
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	f040 80ce 	bne.w	800131e <HAL_TIM_PeriodElapsedCallback+0x376>
			if (flagaF1 == 1) {
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d14d      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x27e>
				kalibracja++;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001192:	6013      	str	r3, [r2, #0]
				i++;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800119c:	6013      	str	r3, [r2, #0]
				j--;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011a6:	6013      	str	r3, [r2, #0]
				if (i == 75) {
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b4b      	cmp	r3, #75	; 0x4b
 80011ae:	d105      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x214>
					j = 80;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011b2:	2250      	movs	r2, #80	; 0x50
 80011b4:	601a      	str	r2, [r3, #0]
					kalibracja = 0;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
				}
				if (kalibracja == 7) {
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d107      	bne.n	80011d4 <HAL_TIM_PeriodElapsedCallback+0x22c>
					j++;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011cc:	6013      	str	r3, [r2, #0]
					kalibracja = 0;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
				}
				TIM4->CCR4 = i;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
				TIM4->CCR3 = j;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
				if (i == max1) {
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d11a      	bne.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x27e>
					flagaF1 = 0;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	e016      	b.n	8001224 <HAL_TIM_PeriodElapsedCallback+0x27c>
 80011f6:	bf00      	nop
 80011f8:	20000404 	.word	0x20000404
 80011fc:	20000220 	.word	0x20000220
 8001200:	20000224 	.word	0x20000224
 8001204:	20000324 	.word	0x20000324
 8001208:	20000250 	.word	0x20000250
 800120c:	40000800 	.word	0x40000800
 8001210:	2000032c 	.word	0x2000032c
 8001214:	2000029c 	.word	0x2000029c
 8001218:	20000298 	.word	0x20000298
 800121c:	200003bc 	.word	0x200003bc
 8001220:	20000330 	.word	0x20000330
 8001224:	601a      	str	r2, [r3, #0]
				}
			}
			if (flagaF1 == -1) {
 8001226:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122e:	d135      	bne.n	800129c <HAL_TIM_PeriodElapsedCallback+0x2f4>
				kalibracja++;
 8001230:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a7c      	ldr	r2, [pc, #496]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001238:	6013      	str	r3, [r2, #0]
				i--;
 800123a:	4b7c      	ldr	r3, [pc, #496]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a7a      	ldr	r2, [pc, #488]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001242:	6013      	str	r3, [r2, #0]
				j++;
 8001244:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a79      	ldr	r2, [pc, #484]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800124c:	6013      	str	r3, [r2, #0]
				if (i == 75) {
 800124e:	4b77      	ldr	r3, [pc, #476]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b4b      	cmp	r3, #75	; 0x4b
 8001254:	d105      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x2ba>
					j = 80;
 8001256:	4b76      	ldr	r3, [pc, #472]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001258:	2250      	movs	r2, #80	; 0x50
 800125a:	601a      	str	r2, [r3, #0]
					kalibracja = 0;
 800125c:	4b72      	ldr	r3, [pc, #456]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
				}
				if (kalibracja == 7) {
 8001262:	4b71      	ldr	r3, [pc, #452]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b07      	cmp	r3, #7
 8001268:	d107      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x2d2>
					j--;
 800126a:	4b71      	ldr	r3, [pc, #452]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001272:	6013      	str	r3, [r2, #0]
					kalibracja = 0;
 8001274:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
				}
				TIM4->CCR4 = i;
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
				TIM4->CCR3 = j;
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001288:	63da      	str	r2, [r3, #60]	; 0x3c
				if (i == max1) {
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d102      	bne.n	800129c <HAL_TIM_PeriodElapsedCallback+0x2f4>
					flagaF1 = 0;
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
				}
			}
			if (flagaF2 == 1) {
 800129c:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d111      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x320>
				k++;
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012ac:	6013      	str	r3, [r2, #0]
				TIM4->CCR2 = k;
 80012ae:	4b64      	ldr	r3, [pc, #400]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b60      	ldr	r3, [pc, #384]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
				if (k == max2) {
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d102      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x320>
					flagaF2 = 0;
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
				}
			}
			if (flagaF2 == -1) {
 80012c8:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d111      	bne.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x34e>
				k--;
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a59      	ldr	r2, [pc, #356]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012da:	6013      	str	r3, [r2, #0]
				TIM4->CCR2 = k;
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
				if (k == max2) {
 80012e4:	4b56      	ldr	r3, [pc, #344]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d102      	bne.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x34e>
					flagaF2 = 0;
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
				}
			}
			if (flagaF1 == 0 && flagaF2 == 0) {
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_TIM_PeriodElapsedCallback+0x376>
 80012fe:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <HAL_TIM_PeriodElapsedCallback+0x376>
				flaga = 0;
 8001306:	4b50      	ldr	r3, [pc, #320]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
				flagaF1=0;
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
				flagaF2=0;
 8001312:	4b4a      	ldr	r3, [pc, #296]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001318:	484c      	ldr	r0, [pc, #304]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800131a:	f002 ff8a 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	if (htim == &htim9) { //BEDAC W WHILE PRZESTAJE DZIALAC UART
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d130      	bne.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x3e0>
		if (obrot == 1) {
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d113      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x3ae>
			if (TIM5->CNT <= positions + 500) { //hamowanie & poprzednie 500
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 800133a:	4293      	cmp	r3, r2
 800133c:	d80b      	bhi.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x3ae>
				kierunek(1, 1, 1, 1);
 800133e:	2301      	movs	r3, #1
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fdff 	bl	8000f48 <kierunek>
				obrot = 0;
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001350:	483f      	ldr	r0, [pc, #252]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001352:	f002 ff6e 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (obrot == -1) {
 8001356:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d113      	bne.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x3e0>
			if (TIM5->CNT >= positions - 500) { //poprzednie 500
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	4a3d      	ldr	r2, [pc, #244]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800136c:	4293      	cmp	r3, r2
 800136e:	d30b      	bcc.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x3e0>
				kierunek(1, 1, 1, 1);
 8001370:	2301      	movs	r3, #1
 8001372:	2201      	movs	r2, #1
 8001374:	2101      	movs	r1, #1
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fde6 	bl	8000f48 <kierunek>
				obrot = 0;
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001382:	4833      	ldr	r0, [pc, #204]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001384:	f002 ff55 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if (obrot == 2) {
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d11f      	bne.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x428>
		if (TIM5->CNT <= positions) { //dla mniejszych katow
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	4a31      	ldr	r2, [pc, #196]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	4293      	cmp	r3, r2
 800139a:	d819      	bhi.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x428>
			kierunek(1, 1, 1, 1);
 800139c:	2301      	movs	r3, #1
 800139e:	2201      	movs	r2, #1
 80013a0:	2101      	movs	r1, #1
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fdd0 	bl	8000f48 <kierunek>
			obrot = 0;
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 80013ae:	4828      	ldr	r0, [pc, #160]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80013b0:	f002 ff3f 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			if (flagaF1 != 0 || flagaF2 != 0) {
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x41c>
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x428>
				flaga = 10;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80013c6:	220a      	movs	r2, #10
 80013c8:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 80013ca:	4820      	ldr	r0, [pc, #128]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80013cc:	f002 ff0d 	bl	80041ea <HAL_TIM_Base_Start_IT>
			}
		}
	}
	if (obrot == -2) {
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f113 0f02 	cmn.w	r3, #2
 80013d8:	d11f      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x472>
		if (TIM5->CNT >= positions) { //dla mniejszych katow
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d319      	bcc.n	800141a <HAL_TIM_PeriodElapsedCallback+0x472>
			kierunek(1, 1, 1, 1);
 80013e6:	2301      	movs	r3, #1
 80013e8:	2201      	movs	r2, #1
 80013ea:	2101      	movs	r1, #1
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fdab 	bl	8000f48 <kierunek>
			obrot = 0;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 80013f8:	4815      	ldr	r0, [pc, #84]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80013fa:	f002 ff1a 	bl	8004232 <HAL_TIM_Base_Stop_IT>
			if (flagaF1 != 0 || flagaF2 != 0) {
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x466>
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_TIM_PeriodElapsedCallback+0x472>
				flaga = 10;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8001410:	220a      	movs	r2, #10
 8001412:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001416:	f002 fee8 	bl	80041ea <HAL_TIM_Base_Start_IT>
			}
		}
	}
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003bc 	.word	0x200003bc
 8001428:	20000224 	.word	0x20000224
 800142c:	20000324 	.word	0x20000324
 8001430:	20000250 	.word	0x20000250
 8001434:	40000800 	.word	0x40000800
 8001438:	20000330 	.word	0x20000330
 800143c:	2000024c 	.word	0x2000024c
 8001440:	2000029c 	.word	0x2000029c
 8001444:	20000328 	.word	0x20000328
 8001448:	20000220 	.word	0x20000220
 800144c:	20000404 	.word	0x20000404
 8001450:	20000374 	.word	0x20000374
 8001454:	20000228 	.word	0x20000228
 8001458:	40000c00 	.word	0x40000c00
 800145c:	20000400 	.word	0x20000400

08001460 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b093      	sub	sp, #76	; 0x4c
 8001464:	af02      	add	r7, sp, #8
 8001466:	6078      	str	r0, [r7, #4]

	uint8_t Data[50]; // Tablica przechowujaca wysylana wiadomosc.
	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8001468:	2300      	movs	r3, #0
 800146a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t tmp[3];
	tmp[0] = Received[1];
 800146c:	4b98      	ldr	r3, [pc, #608]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	723b      	strb	r3, [r7, #8]
	tmp[1] = Received[2];
 8001472:	4b97      	ldr	r3, [pc, #604]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	727b      	strb	r3, [r7, #9]
	tmp[2] = Received[3];
 8001478:	4b95      	ldr	r3, [pc, #596]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 800147a:	78db      	ldrb	r3, [r3, #3]
 800147c:	72bb      	strb	r3, [r7, #10]

	switch (Received[0]) {
 800147e:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b56      	subs	r3, #86	; 0x56
 8001484:	2b24      	cmp	r3, #36	; 0x24
 8001486:	f200 82f9 	bhi.w	8001a7c <HAL_UART_RxCpltCallback+0x61c>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_UART_RxCpltCallback+0x30>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080018bd 	.word	0x080018bd
 8001494:	08001a7d 	.word	0x08001a7d
 8001498:	08001a7d 	.word	0x08001a7d
 800149c:	08001a7d 	.word	0x08001a7d
 80014a0:	08001a7d 	.word	0x08001a7d
 80014a4:	08001a7d 	.word	0x08001a7d
 80014a8:	08001a7d 	.word	0x08001a7d
 80014ac:	08001a7d 	.word	0x08001a7d
 80014b0:	08001a7d 	.word	0x08001a7d
 80014b4:	08001a7d 	.word	0x08001a7d
 80014b8:	08001a7d 	.word	0x08001a7d
 80014bc:	08001525 	.word	0x08001525
 80014c0:	080015d7 	.word	0x080015d7
 80014c4:	08001705 	.word	0x08001705
 80014c8:	080017ab 	.word	0x080017ab
 80014cc:	080017fb 	.word	0x080017fb
 80014d0:	0800188d 	.word	0x0800188d
 80014d4:	080018a7 	.word	0x080018a7
 80014d8:	0800196d 	.word	0x0800196d
 80014dc:	08001a7d 	.word	0x08001a7d
 80014e0:	08001a7d 	.word	0x08001a7d
 80014e4:	08001a7d 	.word	0x08001a7d
 80014e8:	08001a7d 	.word	0x08001a7d
 80014ec:	08001a7d 	.word	0x08001a7d
 80014f0:	08001a7d 	.word	0x08001a7d
 80014f4:	08001a7d 	.word	0x08001a7d
 80014f8:	08001a7d 	.word	0x08001a7d
 80014fc:	08001a7d 	.word	0x08001a7d
 8001500:	08001a7d 	.word	0x08001a7d
 8001504:	08001a7d 	.word	0x08001a7d
 8001508:	08001a7d 	.word	0x08001a7d
 800150c:	08001a7d 	.word	0x08001a7d
 8001510:	08001a7d 	.word	0x08001a7d
 8001514:	08001a7d 	.word	0x08001a7d
 8001518:	080018d7 	.word	0x080018d7
 800151c:	0800190f 	.word	0x0800190f
 8001520:	08001947 	.word	0x08001947
	case 'a':
		odczyt = atoi((char*) tmp);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4618      	mov	r0, r3
 800152a:	f004 fcbd 	bl	8005ea8 <atoi>
 800152e:	4602      	mov	r2, r0
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_UART_RxCpltCallback+0x274>)
 8001532:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 800153c:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800153e:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 8001542:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001544:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 8001546:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 8001548:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800154a:	f107 000c 	add.w	r0, r7, #12
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9200      	str	r2, [sp, #0]
 8001552:	4623      	mov	r3, r4
 8001554:	460a      	mov	r2, r1
 8001556:	4960      	ldr	r1, [pc, #384]	; (80016d8 <HAL_UART_RxCpltCallback+0x278>)
 8001558:	f004 fcdc 	bl	8005f14 <siprintf>
 800155c:	4603      	mov	r3, r0
 800155e:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = ((((float) odczyt / 180) * 90) + 30);
 8001560:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <HAL_UART_RxCpltCallback+0x274>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80016dc <HAL_UART_RxCpltCallback+0x27c>
 8001570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001574:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80016e0 <HAL_UART_RxCpltCallback+0x280>
 8001578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001580:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001588:	ee17 2a90 	vmov	r2, s15
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 800158e:	601a      	str	r2, [r3, #0]
		i = TIM4->CCR4;
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <HAL_UART_RxCpltCallback+0x288>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	461a      	mov	r2, r3
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_UART_RxCpltCallback+0x28c>)
 8001598:	601a      	str	r2, [r3, #0]
		j = TIM4->CCR3;
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_UART_RxCpltCallback+0x288>)
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	461a      	mov	r2, r3
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_UART_RxCpltCallback+0x290>)
 80015a2:	601a      	str	r2, [r3, #0]
		if (max == i)
 80015a4:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_UART_RxCpltCallback+0x28c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f000 825e 	beq.w	8001a6e <HAL_UART_RxCpltCallback+0x60e>
			break;
		if (max > i)
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_UART_RxCpltCallback+0x28c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dd03      	ble.n	80015c6 <HAL_UART_RxCpltCallback+0x166>
			flaga = 1;
 80015be:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <HAL_UART_RxCpltCallback+0x294>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e003      	b.n	80015ce <HAL_UART_RxCpltCallback+0x16e>
		else
			flaga = -1;
 80015c6:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_UART_RxCpltCallback+0x294>)
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80015ce:	484a      	ldr	r0, [pc, #296]	; (80016f8 <HAL_UART_RxCpltCallback+0x298>)
 80015d0:	f002 fe0b 	bl	80041ea <HAL_TIM_Base_Start_IT>
		break; //
 80015d4:	e252      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'b':
		odczyt = atoi((char*) tmp);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fc64 	bl	8005ea8 <atoi>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <HAL_UART_RxCpltCallback+0x274>)
 80015e4:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80015f0:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 80015f4:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80015f6:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 80015f8:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_UART_RxCpltCallback+0x270>)
 80015fa:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80015fc:	f107 000c 	add.w	r0, r7, #12
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	4623      	mov	r3, r4
 8001606:	460a      	mov	r2, r1
 8001608:	4933      	ldr	r1, [pc, #204]	; (80016d8 <HAL_UART_RxCpltCallback+0x278>)
 800160a:	f004 fc83 	bl	8005f14 <siprintf>
 800160e:	4603      	mov	r3, r0
 8001610:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = (((-0.53) * (float) odczyt) + (119.3));
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_UART_RxCpltCallback+0x274>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	a326      	add	r3, pc, #152	; (adr r3, 80016c0 <HAL_UART_RxCpltCallback+0x260>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ffe4 	bl	80005f8 <__aeabi_dmul>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	a323      	add	r3, pc, #140	; (adr r3, 80016c8 <HAL_UART_RxCpltCallback+0x268>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fe25 	bl	800028c <__adddf3>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	4618      	mov	r0, r3
 8001648:	4621      	mov	r1, r4
 800164a:	f7ff fa85 	bl	8000b58 <__aeabi_d2iz>
 800164e:	4602      	mov	r2, r0
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 8001652:	601a      	str	r2, [r3, #0]
		if (max > 98)
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b62      	cmp	r3, #98	; 0x62
 800165a:	dd02      	ble.n	8001662 <HAL_UART_RxCpltCallback+0x202>
			max = 98;
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 800165e:	2262      	movs	r2, #98	; 0x62
 8001660:	601a      	str	r2, [r3, #0]
		if (max < 25)
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b18      	cmp	r3, #24
 8001668:	dc02      	bgt.n	8001670 <HAL_UART_RxCpltCallback+0x210>
			max = 25;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 800166c:	2219      	movs	r2, #25
 800166e:	601a      	str	r2, [r3, #0]
		//OBSLUGA BLEDU
		k = TIM4->CCR2;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_UART_RxCpltCallback+0x288>)
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	461a      	mov	r2, r3
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_UART_RxCpltCallback+0x29c>)
 8001678:	601a      	str	r2, [r3, #0]
		if (max == k)
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_UART_RxCpltCallback+0x29c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	f000 81f5 	beq.w	8001a72 <HAL_UART_RxCpltCallback+0x612>
			break;
		if (max > k)
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_UART_RxCpltCallback+0x284>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_UART_RxCpltCallback+0x29c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	dd03      	ble.n	800169c <HAL_UART_RxCpltCallback+0x23c>
			flaga = 2;
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_UART_RxCpltCallback+0x294>)
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e002      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x242>
		else
			flaga = 3;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_RxCpltCallback+0x294>)
 800169e:	2203      	movs	r2, #3
 80016a0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80016a2:	4815      	ldr	r0, [pc, #84]	; (80016f8 <HAL_UART_RxCpltCallback+0x298>)
 80016a4:	f002 fda1 	bl	80041ea <HAL_TIM_Base_Start_IT>
		if(odczyt==90){
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_UART_RxCpltCallback+0x274>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b5a      	cmp	r3, #90	; 0x5a
 80016ae:	f040 81e2 	bne.w	8001a76 <HAL_UART_RxCpltCallback+0x616>
			workspace = 1;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_UART_RxCpltCallback+0x2a0>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80016b8:	e1dd      	b.n	8001a76 <HAL_UART_RxCpltCallback+0x616>
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
 80016c0:	8f5c28f6 	.word	0x8f5c28f6
 80016c4:	bfe0f5c2 	.word	0xbfe0f5c2
 80016c8:	33333333 	.word	0x33333333
 80016cc:	405dd333 	.word	0x405dd333
 80016d0:	20000240 	.word	0x20000240
 80016d4:	200003b8 	.word	0x200003b8
 80016d8:	08008b70 	.word	0x08008b70
 80016dc:	43340000 	.word	0x43340000
 80016e0:	42b40000 	.word	0x42b40000
 80016e4:	2000032c 	.word	0x2000032c
 80016e8:	40000800 	.word	0x40000800
 80016ec:	20000324 	.word	0x20000324
 80016f0:	20000250 	.word	0x20000250
 80016f4:	20000220 	.word	0x20000220
 80016f8:	20000404 	.word	0x20000404
 80016fc:	2000029c 	.word	0x2000029c
 8001700:	20000230 	.word	0x20000230
	case 'c':
		odczyt = atoi((char*) tmp);
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4618      	mov	r0, r3
 800170a:	f004 fbcd 	bl	8005ea8 <atoi>
 800170e:	4602      	mov	r2, r0
 8001710:	4ba5      	ldr	r3, [pc, #660]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001712:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001714:	4ba5      	ldr	r3, [pc, #660]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 800171a:	4ba4      	ldr	r3, [pc, #656]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 800171c:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800171e:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 8001722:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001724:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 8001726:	4ba1      	ldr	r3, [pc, #644]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 8001728:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800172a:	f107 000c 	add.w	r0, r7, #12
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	4623      	mov	r3, r4
 8001734:	460a      	mov	r2, r1
 8001736:	499e      	ldr	r1, [pc, #632]	; (80019b0 <HAL_UART_RxCpltCallback+0x550>)
 8001738:	f004 fbec 	bl	8005f14 <siprintf>
 800173c:	4603      	mov	r3, r0
 800173e:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = ((((float) odczyt / 180) * 90) + 30);
 8001740:	4b99      	ldr	r3, [pc, #612]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	eddf 6a99 	vldr	s13, [pc, #612]	; 80019b4 <HAL_UART_RxCpltCallback+0x554>
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80019b8 <HAL_UART_RxCpltCallback+0x558>
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001768:	ee17 2a90 	vmov	r2, s15
 800176c:	4b93      	ldr	r3, [pc, #588]	; (80019bc <HAL_UART_RxCpltCallback+0x55c>)
 800176e:	601a      	str	r2, [r3, #0]
		l = TIM4->CCR1;
 8001770:	4b93      	ldr	r3, [pc, #588]	; (80019c0 <HAL_UART_RxCpltCallback+0x560>)
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	461a      	mov	r2, r3
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_UART_RxCpltCallback+0x564>)
 8001778:	601a      	str	r2, [r3, #0]
		if (max == l)
 800177a:	4b90      	ldr	r3, [pc, #576]	; (80019bc <HAL_UART_RxCpltCallback+0x55c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b91      	ldr	r3, [pc, #580]	; (80019c4 <HAL_UART_RxCpltCallback+0x564>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	f000 8179 	beq.w	8001a7a <HAL_UART_RxCpltCallback+0x61a>
			break;
		if (max > l)
 8001788:	4b8c      	ldr	r3, [pc, #560]	; (80019bc <HAL_UART_RxCpltCallback+0x55c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b8d      	ldr	r3, [pc, #564]	; (80019c4 <HAL_UART_RxCpltCallback+0x564>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	dd03      	ble.n	800179c <HAL_UART_RxCpltCallback+0x33c>
			flaga = 4;
 8001794:	4b8c      	ldr	r3, [pc, #560]	; (80019c8 <HAL_UART_RxCpltCallback+0x568>)
 8001796:	2204      	movs	r2, #4
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e002      	b.n	80017a2 <HAL_UART_RxCpltCallback+0x342>
		else
			flaga = 5;
 800179c:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <HAL_UART_RxCpltCallback+0x568>)
 800179e:	2205      	movs	r2, #5
 80017a0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80017a2:	488a      	ldr	r0, [pc, #552]	; (80019cc <HAL_UART_RxCpltCallback+0x56c>)
 80017a4:	f002 fd21 	bl	80041ea <HAL_TIM_Base_Start_IT>
		break;
 80017a8:	e168      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'd':
		odczyt = atoi((char*) tmp);
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fb7a 	bl	8005ea8 <atoi>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 80017b8:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80017ba:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 80017c0:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80017c4:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 80017c6:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 80017c8:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80017ca:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 80017cc:	4b77      	ldr	r3, [pc, #476]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 80017ce:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80017d0:	f107 000c 	add.w	r0, r7, #12
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	4623      	mov	r3, r4
 80017da:	460a      	mov	r2, r1
 80017dc:	4974      	ldr	r1, [pc, #464]	; (80019b0 <HAL_UART_RxCpltCallback+0x550>)
 80017de:	f004 fb99 	bl	8005f14 <siprintf>
 80017e2:	4603      	mov	r3, r0
 80017e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = odczyt + 25;
 80017e6:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3319      	adds	r3, #25
 80017ec:	4a73      	ldr	r2, [pc, #460]	; (80019bc <HAL_UART_RxCpltCallback+0x55c>)
 80017ee:	6013      	str	r3, [r2, #0]
		TIM3->CCR2 = max;
 80017f0:	4b72      	ldr	r3, [pc, #456]	; (80019bc <HAL_UART_RxCpltCallback+0x55c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <HAL_UART_RxCpltCallback+0x570>)
 80017f6:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80017f8:	e140      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'e':
		//TIM5->CNT = 3875;
		odczyt = atoi((char*) tmp);
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fb52 	bl	8005ea8 <atoi>
 8001804:	4602      	mov	r2, r0
 8001806:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001808:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800180a:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 8001810:	4b66      	ldr	r3, [pc, #408]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 8001812:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001814:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 8001818:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800181a:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 800181c:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 800181e:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001820:	f107 000c 	add.w	r0, r7, #12
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	4623      	mov	r3, r4
 800182a:	460a      	mov	r2, r1
 800182c:	4960      	ldr	r1, [pc, #384]	; (80019b0 <HAL_UART_RxCpltCallback+0x550>)
 800182e:	f004 fb71 	bl	8005f14 <siprintf>
 8001832:	4603      	mov	r3, r0
 8001834:	87fb      	strh	r3, [r7, #62]	; 0x3e
		positions = (odczyt * 32) + 1405;
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	f203 537d 	addw	r3, r3, #1405	; 0x57d
 8001840:	4a64      	ldr	r2, [pc, #400]	; (80019d4 <HAL_UART_RxCpltCallback+0x574>)
 8001842:	6013      	str	r3, [r2, #0]
		if (positions < TIM5->CNT) {
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_UART_RxCpltCallback+0x578>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	4a62      	ldr	r2, [pc, #392]	; (80019d4 <HAL_UART_RxCpltCallback+0x574>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4293      	cmp	r3, r2
 800184e:	d909      	bls.n	8001864 <HAL_UART_RxCpltCallback+0x404>
			kierunek(0, 1, 1, 0); //obrot w prawo
 8001850:	2300      	movs	r3, #0
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fb76 	bl	8000f48 <kierunek>
			obrot = 1;
 800185c:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_UART_RxCpltCallback+0x57c>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e009      	b.n	8001878 <HAL_UART_RxCpltCallback+0x418>
		} else {
			kierunek(1, 0, 0, 1); //obrot w lewo
 8001864:	2301      	movs	r3, #1
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff fb6c 	bl	8000f48 <kierunek>
			obrot = -1;
 8001870:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <HAL_UART_RxCpltCallback+0x57c>)
 8001872:	f04f 32ff 	mov.w	r2, #4294967295
 8001876:	601a      	str	r2, [r3, #0]
		}
		TIM1->CCR2 = 60;
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_UART_RxCpltCallback+0x580>)
 800187a:	223c      	movs	r2, #60	; 0x3c
 800187c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR4 = 40;
 800187e:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_UART_RxCpltCallback+0x580>)
 8001880:	2228      	movs	r2, #40	; 0x28
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_Base_Start_IT(&htim9);
 8001884:	4857      	ldr	r0, [pc, #348]	; (80019e4 <HAL_UART_RxCpltCallback+0x584>)
 8001886:	f002 fcb0 	bl	80041ea <HAL_TIM_Base_Start_IT>
		break;
 800188a:	e0f7      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'f': //jazda do przodu
		kierunek(1, 0, 1, 0);
 800188c:	2300      	movs	r3, #0
 800188e:	2201      	movs	r2, #1
 8001890:	2100      	movs	r1, #0
 8001892:	2001      	movs	r0, #1
 8001894:	f7ff fb58 	bl	8000f48 <kierunek>
		TIM1->CCR2 = 100;
 8001898:	4b51      	ldr	r3, [pc, #324]	; (80019e0 <HAL_UART_RxCpltCallback+0x580>)
 800189a:	2264      	movs	r2, #100	; 0x64
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR4 = 70;
 800189e:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_UART_RxCpltCallback+0x580>)
 80018a0:	2246      	movs	r2, #70	; 0x46
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80018a4:	e0ea      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'g': //zatrzymanie
		kierunek(1, 1, 1, 1);
 80018a6:	2301      	movs	r3, #1
 80018a8:	2201      	movs	r2, #1
 80018aa:	2101      	movs	r1, #1
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff fb4b 	bl	8000f48 <kierunek>
		TIM5->CNT = 7000;
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_UART_RxCpltCallback+0x578>)
 80018b4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80018ba:	e0df      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'V':
		HAL_UART_Transmit_IT(&huart6, Data, size);
 80018bc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	4848      	ldr	r0, [pc, #288]	; (80019e8 <HAL_UART_RxCpltCallback+0x588>)
 80018c6:	f003 fca2 	bl	800520e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 5);
 80018ca:	2205      	movs	r2, #5
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 80018ce:	4846      	ldr	r0, [pc, #280]	; (80019e8 <HAL_UART_RxCpltCallback+0x588>)
 80018d0:	f003 fce2 	bl	8005298 <HAL_UART_Receive_IT>
		return;
 80018d4:	e0de      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x634>
		break;
	case 'x':
		odczyt = atoi((char*) &Received[1]);
 80018d6:	4845      	ldr	r0, [pc, #276]	; (80019ec <HAL_UART_RxCpltCallback+0x58c>)
 80018d8:	f004 fae6 	bl	8005ea8 <atoi>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 80018e0:	601a      	str	r2, [r3, #0]
		target.x = odczyt;
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_UART_RxCpltCallback+0x590>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]
		HAL_UART_Transmit_IT(&huart6, Data, size);
 80018f4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	483a      	ldr	r0, [pc, #232]	; (80019e8 <HAL_UART_RxCpltCallback+0x588>)
 80018fe:	f003 fc86 	bl	800520e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 5);
 8001902:	2205      	movs	r2, #5
 8001904:	4929      	ldr	r1, [pc, #164]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 8001906:	4838      	ldr	r0, [pc, #224]	; (80019e8 <HAL_UART_RxCpltCallback+0x588>)
 8001908:	f003 fcc6 	bl	8005298 <HAL_UART_Receive_IT>
		return;
 800190c:	e0c2      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x634>
		break;
	case 'y':
		odczyt = atoi((char*) &Received[1]);
 800190e:	4837      	ldr	r0, [pc, #220]	; (80019ec <HAL_UART_RxCpltCallback+0x58c>)
 8001910:	f004 faca 	bl	8005ea8 <atoi>
 8001914:	4602      	mov	r2, r0
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001918:	601a      	str	r2, [r3, #0]
		target.y = odczyt;
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_UART_RxCpltCallback+0x590>)
 8001928:	edc3 7a01 	vstr	s15, [r3, #4]
		HAL_UART_Transmit_IT(&huart6, Data, size);
 800192c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	482c      	ldr	r0, [pc, #176]	; (80019e8 <HAL_UART_RxCpltCallback+0x588>)
 8001936:	f003 fc6a 	bl	800520e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 5);
 800193a:	2205      	movs	r2, #5
 800193c:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_UART_RxCpltCallback+0x54c>)
 800193e:	482a      	ldr	r0, [pc, #168]	; (80019e8 <HAL_UART_RxCpltCallback+0x588>)
 8001940:	f003 fcaa 	bl	8005298 <HAL_UART_Receive_IT>
		return;
 8001944:	e0a6      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x634>
		break;
	case 'z':
		odczyt = atoi((char*) &Received[1]);
 8001946:	4829      	ldr	r0, [pc, #164]	; (80019ec <HAL_UART_RxCpltCallback+0x58c>)
 8001948:	f004 faae 	bl	8005ea8 <atoi>
 800194c:	4602      	mov	r2, r0
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001950:	601a      	str	r2, [r3, #0]
		target.z = odczyt;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_RxCpltCallback+0x548>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_UART_RxCpltCallback+0x590>)
 8001960:	edc3 7a02 	vstr	s15, [r3, #8]
		goFABRIK = 1;
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_UART_RxCpltCallback+0x594>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
		break;
 800196a:	e087      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
	case 'h':
		max1 = 120;
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_UART_RxCpltCallback+0x598>)
 800196e:	2278      	movs	r2, #120	; 0x78
 8001970:	601a      	str	r2, [r3, #0]
		i = TIM4->CCR4;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_UART_RxCpltCallback+0x560>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	461a      	mov	r2, r3
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_UART_RxCpltCallback+0x59c>)
 800197a:	601a      	str	r2, [r3, #0]
		j = TIM4->CCR3;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_UART_RxCpltCallback+0x560>)
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	461a      	mov	r2, r3
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_UART_RxCpltCallback+0x5a0>)
 8001984:	601a      	str	r2, [r3, #0]
		if (max1 == i) {
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_UART_RxCpltCallback+0x598>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_UART_RxCpltCallback+0x59c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d03e      	beq.n	8001a10 <HAL_UART_RxCpltCallback+0x5b0>
			//nic nie rob
		} else if (max1 > i)
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_UART_RxCpltCallback+0x598>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_UART_RxCpltCallback+0x59c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	dd34      	ble.n	8001a08 <HAL_UART_RxCpltCallback+0x5a8>
			flagaF1 = 1;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_UART_RxCpltCallback+0x5a4>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e034      	b.n	8001a10 <HAL_UART_RxCpltCallback+0x5b0>
 80019a6:	bf00      	nop
 80019a8:	200003b8 	.word	0x200003b8
 80019ac:	20000240 	.word	0x20000240
 80019b0:	08008b70 	.word	0x08008b70
 80019b4:	43340000 	.word	0x43340000
 80019b8:	42b40000 	.word	0x42b40000
 80019bc:	2000032c 	.word	0x2000032c
 80019c0:	40000800 	.word	0x40000800
 80019c4:	20000298 	.word	0x20000298
 80019c8:	20000220 	.word	0x20000220
 80019cc:	20000404 	.word	0x20000404
 80019d0:	40000400 	.word	0x40000400
 80019d4:	20000400 	.word	0x20000400
 80019d8:	40000c00 	.word	0x40000c00
 80019dc:	20000228 	.word	0x20000228
 80019e0:	40010000 	.word	0x40010000
 80019e4:	20000374 	.word	0x20000374
 80019e8:	200003c0 	.word	0x200003c0
 80019ec:	20000241 	.word	0x20000241
 80019f0:	20000444 	.word	0x20000444
 80019f4:	2000022c 	.word	0x2000022c
 80019f8:	20000330 	.word	0x20000330
 80019fc:	20000324 	.word	0x20000324
 8001a00:	20000250 	.word	0x20000250
 8001a04:	200003bc 	.word	0x200003bc
		else
			flagaF1 = -1;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_UART_RxCpltCallback+0x63c>)
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	601a      	str	r2, [r3, #0]

		max2 = 98;
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a12:	2262      	movs	r2, #98	; 0x62
 8001a14:	601a      	str	r2, [r3, #0]
		if (max2 > 98)
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b62      	cmp	r3, #98	; 0x62
 8001a1c:	dd02      	ble.n	8001a24 <HAL_UART_RxCpltCallback+0x5c4>
			max2 = 98;
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a20:	2262      	movs	r2, #98	; 0x62
 8001a22:	601a      	str	r2, [r3, #0]
		if (max2 < 25)
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b18      	cmp	r3, #24
 8001a2a:	dc02      	bgt.n	8001a32 <HAL_UART_RxCpltCallback+0x5d2>
			max2 = 25;
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a2e:	2219      	movs	r2, #25
 8001a30:	601a      	str	r2, [r3, #0]
		k = TIM4->CCR2;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_UART_RxCpltCallback+0x644>)
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_UART_RxCpltCallback+0x648>)
 8001a3a:	601a      	str	r2, [r3, #0]
		if (max2 == k) {
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_UART_RxCpltCallback+0x648>)
 8001a42:	681b      	ldr	r3, [r3, #0]
			//nic nie rob
		}
		if (max2 > k)
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_UART_RxCpltCallback+0x640>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_UART_RxCpltCallback+0x648>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dd03      	ble.n	8001a58 <HAL_UART_RxCpltCallback+0x5f8>
			flagaF2 = 1;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_UART_RxCpltCallback+0x64c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e003      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x600>
		else
			flagaF2 = -1;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_UART_RxCpltCallback+0x64c>)
 8001a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5e:	601a      	str	r2, [r3, #0]
		flaga = 10;
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_UART_RxCpltCallback+0x650>)
 8001a62:	220a      	movs	r2, #10
 8001a64:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <HAL_UART_RxCpltCallback+0x654>)
 8001a68:	f002 fbbf 	bl	80041ea <HAL_TIM_Base_Start_IT>
		break;
 8001a6c:	e006      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
			break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
			break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
		break;
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x61c>
			break;
 8001a7a:	bf00      	nop
	}

	HAL_UART_Transmit_IT(&huart6, Data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8001a7c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <HAL_UART_RxCpltCallback+0x658>)
 8001a86:	f003 fbc2 	bl	800520e <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 4); // Ponowne włączenie nasłuchiwania
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	490b      	ldr	r1, [pc, #44]	; (8001abc <HAL_UART_RxCpltCallback+0x65c>)
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <HAL_UART_RxCpltCallback+0x658>)
 8001a90:	f003 fc02 	bl	8005298 <HAL_UART_Receive_IT>
}
 8001a94:	3744      	adds	r7, #68	; 0x44
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200003bc 	.word	0x200003bc
 8001aa0:	20000328 	.word	0x20000328
 8001aa4:	40000800 	.word	0x40000800
 8001aa8:	2000029c 	.word	0x2000029c
 8001aac:	2000024c 	.word	0x2000024c
 8001ab0:	20000220 	.word	0x20000220
 8001ab4:	20000404 	.word	0x20000404
 8001ab8:	200003c0 	.word	0x200003c0
 8001abc:	20000240 	.word	0x20000240

08001ac0 <distanceBetween>:

int distanceBetween(struct point start, struct point end) {
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	eeb0 5a40 	vmov.f32	s10, s0
 8001aca:	eef0 5a60 	vmov.f32	s11, s1
 8001ace:	eeb0 6a41 	vmov.f32	s12, s2
 8001ad2:	eef0 6a61 	vmov.f32	s13, s3
 8001ad6:	eeb0 7a42 	vmov.f32	s14, s4
 8001ada:	eef0 7a62 	vmov.f32	s15, s5
 8001ade:	ed87 5a03 	vstr	s10, [r7, #12]
 8001ae2:	edc7 5a04 	vstr	s11, [r7, #16]
 8001ae6:	ed87 6a05 	vstr	s12, [r7, #20]
 8001aea:	edc7 6a00 	vstr	s13, [r7]
 8001aee:	ed87 7a01 	vstr	s14, [r7, #4]
 8001af2:	edc7 7a02 	vstr	s15, [r7, #8]
	return sqrt(
			pow(end.x - start.x, 2) + pow(end.y - start.y, 2)
 8001af6:	ed97 7a00 	vldr	s14, [r7]
 8001afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd1f 	bl	8000548 <__aeabi_f2d>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001bb0 <distanceBetween+0xf0>
 8001b12:	ec44 3b10 	vmov	d0, r3, r4
 8001b16:	f004 ffd5 	bl	8006ac4 <pow>
 8001b1a:	ec55 4b10 	vmov	r4, r5, d0
 8001b1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2a:	ee17 0a90 	vmov	r0, s15
 8001b2e:	f7fe fd0b 	bl	8000548 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001bb0 <distanceBetween+0xf0>
 8001b3a:	ec43 2b10 	vmov	d0, r2, r3
 8001b3e:	f004 ffc1 	bl	8006ac4 <pow>
 8001b42:	ec53 2b10 	vmov	r2, r3, d0
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fb9f 	bl	800028c <__adddf3>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4625      	mov	r5, r4
 8001b54:	461c      	mov	r4, r3
					+ pow(end.z - start.z, 2));
 8001b56:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b62:	ee17 0a90 	vmov	r0, s15
 8001b66:	f7fe fcef 	bl	8000548 <__aeabi_f2d>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001bb0 <distanceBetween+0xf0>
 8001b72:	ec43 2b10 	vmov	d0, r2, r3
 8001b76:	f004 ffa5 	bl	8006ac4 <pow>
 8001b7a:	ec53 2b10 	vmov	r2, r3, d0
	return sqrt(
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fb83 	bl	800028c <__adddf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	ec44 3b17 	vmov	d7, r3, r4
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	eef0 0a67 	vmov.f32	s1, s15
 8001b96:	f005 f905 	bl	8006da4 <sqrt>
 8001b9a:	ec54 3b10 	vmov	r3, r4, d0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	f7fe ffd9 	bl	8000b58 <__aeabi_d2iz>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40000000 	.word	0x40000000

08001bb8 <fabrik>:

void fabrik(struct point pStart, struct point pMiddle, struct point pEnd,
		struct point target) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	ed2d 8b02 	vpush	{d8}
 8001bbe:	b098      	sub	sp, #96	; 0x60
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	eeb0 6a44 	vmov.f32	s12, s8
 8001bc6:	eef0 6a64 	vmov.f32	s13, s9
 8001bca:	eeb0 7a45 	vmov.f32	s14, s10
 8001bce:	eef0 7a65 	vmov.f32	s15, s11
 8001bd2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001bd6:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 8001bda:	ed87 1a0b 	vstr	s2, [r7, #44]	; 0x2c
 8001bde:	edc7 1a06 	vstr	s3, [r7, #24]
 8001be2:	ed87 2a07 	vstr	s4, [r7, #28]
 8001be6:	edc7 2a08 	vstr	s5, [r7, #32]
 8001bea:	ed87 3a03 	vstr	s6, [r7, #12]
 8001bee:	edc7 3a04 	vstr	s7, [r7, #16]
 8001bf2:	ed87 6a05 	vstr	s12, [r7, #20]
 8001bf6:	edc7 6a00 	vstr	s13, [r7]
 8001bfa:	ed87 7a01 	vstr	s14, [r7, #4]
 8001bfe:	edc7 7a02 	vstr	s15, [r7, #8]
	float distance = distanceBetween(pStart,target);
 8001c02:	ed97 5a00 	vldr	s10, [r7]
 8001c06:	edd7 5a01 	vldr	s11, [r7, #4]
 8001c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c0e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c1a:	eef0 1a45 	vmov.f32	s3, s10
 8001c1e:	eeb0 2a65 	vmov.f32	s4, s11
 8001c22:	eef0 2a46 	vmov.f32	s5, s12
 8001c26:	eeb0 0a66 	vmov.f32	s0, s13
 8001c2a:	eef0 0a47 	vmov.f32	s1, s14
 8001c2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001c32:	f7ff ff45 	bl	8001ac0 <distanceBetween>
 8001c36:	ee07 0a90 	vmov	s15, r0
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float diffrence;
	float rSM, rME;
	float lambdaME, lambdaSM;
	float alfa, beta, gamma;
	struct point B = pStart;
 8001c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (distance > L1 + L2) {
 8001c50:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c54:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ca8 <fabrik+0xf0>
 8001c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	f300 840e 	bgt.w	8002480 <fabrik+0x8c8>
		//punkt poza obszarem roboczym
	} else {
		diffrence = distanceBetween(pStart, pEnd);
 8001c64:	ed97 5a03 	vldr	s10, [r7, #12]
 8001c68:	edd7 5a04 	vldr	s11, [r7, #16]
 8001c6c:	ed97 6a05 	vldr	s12, [r7, #20]
 8001c70:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c7c:	eef0 1a45 	vmov.f32	s3, s10
 8001c80:	eeb0 2a65 	vmov.f32	s4, s11
 8001c84:	eef0 2a46 	vmov.f32	s5, s12
 8001c88:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8c:	eef0 0a47 	vmov.f32	s1, s14
 8001c90:	eeb0 1a67 	vmov.f32	s2, s15
 8001c94:	f7ff ff14 	bl	8001ac0 <distanceBetween>
 8001c98:	ee07 0a90 	vmov	s15, r0
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		while (diffrence > TOLERANCE) {
 8001ca4:	e1c5      	b.n	8002032 <fabrik+0x47a>
 8001ca6:	bf00      	nop
 8001ca8:	44034000 	.word	0x44034000
 8001cac:	433a0000 	.word	0x433a0000
 8001cb0:	43a98000 	.word	0x43a98000
 8001cb4:	43340000 	.word	0x43340000

			pEnd = target;
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	463a      	mov	r2, r7
 8001cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			rME = distanceBetween(pEnd, pMiddle);
 8001cc4:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cc8:	edd7 5a07 	vldr	s11, [r7, #28]
 8001ccc:	ed97 6a08 	vldr	s12, [r7, #32]
 8001cd0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001cd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cdc:	eef0 1a45 	vmov.f32	s3, s10
 8001ce0:	eeb0 2a65 	vmov.f32	s4, s11
 8001ce4:	eef0 2a46 	vmov.f32	s5, s12
 8001ce8:	eeb0 0a66 	vmov.f32	s0, s13
 8001cec:	eef0 0a47 	vmov.f32	s1, s14
 8001cf0:	eeb0 1a67 	vmov.f32	s2, s15
 8001cf4:	f7ff fee4 	bl	8001ac0 <distanceBetween>
 8001cf8:	ee07 0a90 	vmov	s15, r0
 8001cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			lambdaME = L2 / rME;
 8001d04:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8001cb0 <fabrik+0xf8>
 8001d08:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d10:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			pMiddle.x = (1 - lambdaME) * pEnd.x + lambdaME * pMiddle.x;
 8001d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d28:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d38:	edc7 7a06 	vstr	s15, [r7, #24]
			pMiddle.y = (1 - lambdaME) * pEnd.y + lambdaME * pMiddle.y;
 8001d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a07 	vstr	s15, [r7, #28]
			pMiddle.z = (1 - lambdaME) * pEnd.z + lambdaME * pMiddle.z;
 8001d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d78:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d88:	edc7 7a08 	vstr	s15, [r7, #32]

			rSM = distanceBetween(pMiddle, pStart);
 8001d8c:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 8001d90:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8001d94:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8001d98:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001da0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001da4:	eef0 1a45 	vmov.f32	s3, s10
 8001da8:	eeb0 2a65 	vmov.f32	s4, s11
 8001dac:	eef0 2a46 	vmov.f32	s5, s12
 8001db0:	eeb0 0a66 	vmov.f32	s0, s13
 8001db4:	eef0 0a47 	vmov.f32	s1, s14
 8001db8:	eeb0 1a67 	vmov.f32	s2, s15
 8001dbc:	f7ff fe80 	bl	8001ac0 <distanceBetween>
 8001dc0:	ee07 0a90 	vmov	s15, r0
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			lambdaSM = L1 / rSM;
 8001dcc:	ed5f 6a49 	vldr	s13, [pc, #-292]	; 8001cac <fabrik+0xf4>
 8001dd0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			pStart.x = (1 - lambdaSM) * pMiddle.x + lambdaSM * pStart.x;
 8001ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001de0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001de4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001df4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			pStart.y = (1 - lambdaSM) * pMiddle.y + lambdaSM * pStart.y;
 8001e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pStart.z = (1 - lambdaSM) * pMiddle.z + lambdaSM * pStart.z;
 8001e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e40:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

			pStart = B;
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			rSM = distanceBetween(pMiddle, pStart);
 8001e62:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 8001e66:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8001e6a:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8001e6e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e72:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e76:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e7a:	eef0 1a45 	vmov.f32	s3, s10
 8001e7e:	eeb0 2a65 	vmov.f32	s4, s11
 8001e82:	eef0 2a46 	vmov.f32	s5, s12
 8001e86:	eeb0 0a66 	vmov.f32	s0, s13
 8001e8a:	eef0 0a47 	vmov.f32	s1, s14
 8001e8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001e92:	f7ff fe15 	bl	8001ac0 <distanceBetween>
 8001e96:	ee07 0a90 	vmov	s15, r0
 8001e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			lambdaSM = L1 / rSM;
 8001ea2:	ed5f 6a7e 	vldr	s13, [pc, #-504]	; 8001cac <fabrik+0xf4>
 8001ea6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			pMiddle.x = (1 - lambdaSM) * pStart.x + lambdaSM * pMiddle.x;
 8001eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eb6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001eba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ebe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001eca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	edc7 7a06 	vstr	s15, [r7, #24]
			pMiddle.y = (1 - lambdaSM) * pStart.y + lambdaSM * pMiddle.y;
 8001eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ede:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ef2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc7 7a07 	vstr	s15, [r7, #28]
			pMiddle.z = (1 - lambdaSM) * pStart.z + lambdaSM * pMiddle.z;
 8001f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f1a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f26:	edc7 7a08 	vstr	s15, [r7, #32]

			rME = distanceBetween(pEnd, pMiddle);
 8001f2a:	ed97 5a06 	vldr	s10, [r7, #24]
 8001f2e:	edd7 5a07 	vldr	s11, [r7, #28]
 8001f32:	ed97 6a08 	vldr	s12, [r7, #32]
 8001f36:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f42:	eef0 1a45 	vmov.f32	s3, s10
 8001f46:	eeb0 2a65 	vmov.f32	s4, s11
 8001f4a:	eef0 2a46 	vmov.f32	s5, s12
 8001f4e:	eeb0 0a66 	vmov.f32	s0, s13
 8001f52:	eef0 0a47 	vmov.f32	s1, s14
 8001f56:	eeb0 1a67 	vmov.f32	s2, s15
 8001f5a:	f7ff fdb1 	bl	8001ac0 <distanceBetween>
 8001f5e:	ee07 0a90 	vmov	s15, r0
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			lambdaME = L2 / rME;
 8001f6a:	ed5f 6aaf 	vldr	s13, [pc, #-700]	; 8001cb0 <fabrik+0xf8>
 8001f6e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			pEnd.x = (1 - lambdaME) * pMiddle.x + lambdaME * pEnd.x;
 8001f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f92:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	edc7 7a03 	vstr	s15, [r7, #12]
			pEnd.y = (1 - lambdaME) * pMiddle.y + lambdaME * pEnd.y;
 8001fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	edd7 6a04 	vldr	s13, [r7, #16]
 8001fba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	edc7 7a04 	vstr	s15, [r7, #16]
			pEnd.z = (1 - lambdaME) * pMiddle.z + lambdaME * pEnd.z;
 8001fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	edd7 6a05 	vldr	s13, [r7, #20]
 8001fe2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	edc7 7a05 	vstr	s15, [r7, #20]

			diffrence = distanceBetween(target, pEnd);
 8001ff2:	ed97 5a03 	vldr	s10, [r7, #12]
 8001ff6:	edd7 5a04 	vldr	s11, [r7, #16]
 8001ffa:	ed97 6a05 	vldr	s12, [r7, #20]
 8001ffe:	edd7 6a00 	vldr	s13, [r7]
 8002002:	ed97 7a01 	vldr	s14, [r7, #4]
 8002006:	edd7 7a02 	vldr	s15, [r7, #8]
 800200a:	eef0 1a45 	vmov.f32	s3, s10
 800200e:	eeb0 2a65 	vmov.f32	s4, s11
 8002012:	eef0 2a46 	vmov.f32	s5, s12
 8002016:	eeb0 0a66 	vmov.f32	s0, s13
 800201a:	eef0 0a47 	vmov.f32	s1, s14
 800201e:	eeb0 1a67 	vmov.f32	s2, s15
 8002022:	f7ff fd4d 	bl	8001ac0 <distanceBetween>
 8002026:	ee07 0a90 	vmov	s15, r0
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		while (diffrence > TOLERANCE) {
 8002032:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800203a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	f73f ae39 	bgt.w	8001cb8 <fabrik+0x100>
		}
		alfa = atanf(pEnd.y / pEnd.x) * 180 / M_PI;
 8002046:	ed97 7a04 	vldr	s14, [r7, #16]
 800204a:	edd7 7a03 	vldr	s15, [r7, #12]
 800204e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002052:	eeb0 0a66 	vmov.f32	s0, s13
 8002056:	f004 fc19 	bl	800688c <atanf>
 800205a:	eeb0 7a40 	vmov.f32	s14, s0
 800205e:	ed5f 7aeb 	vldr	s15, [pc, #-940]	; 8001cb4 <fabrik+0xfc>
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	ee17 0a90 	vmov	r0, s15
 800206a:	f7fe fa6d 	bl	8000548 <__aeabi_f2d>
 800206e:	a3ac      	add	r3, pc, #688	; (adr r3, 8002320 <fabrik+0x768>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fbea 	bl	800084c <__aeabi_ddiv>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	f7fe fd92 	bl	8000ba8 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	657b      	str	r3, [r7, #84]	; 0x54
		beta = acosf(pMiddle.x / (cosf(alfa * M_PI / 180.0) * L1)) * 180 / M_PI;//1
 8002088:	ed97 8a06 	vldr	s16, [r7, #24]
 800208c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800208e:	f7fe fa5b 	bl	8000548 <__aeabi_f2d>
 8002092:	a3a3      	add	r3, pc, #652	; (adr r3, 8002320 <fabrik+0x768>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe faae 	bl	80005f8 <__aeabi_dmul>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	4618      	mov	r0, r3
 80020a2:	4621      	mov	r1, r4
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <fabrik+0x780>)
 80020aa:	f7fe fbcf 	bl	800084c <__aeabi_ddiv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	4618      	mov	r0, r3
 80020b4:	4621      	mov	r1, r4
 80020b6:	f7fe fd77 	bl	8000ba8 <__aeabi_d2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	ee00 3a10 	vmov	s0, r3
 80020c0:	f004 fcb8 	bl	8006a34 <cosf>
 80020c4:	eeb0 7a40 	vmov.f32	s14, s0
 80020c8:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800233c <fabrik+0x784>
 80020cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80020d4:	eeb0 0a47 	vmov.f32	s0, s14
 80020d8:	f004 febe 	bl	8006e58 <acosf>
 80020dc:	eeb0 7a40 	vmov.f32	s14, s0
 80020e0:	eddf 7a97 	vldr	s15, [pc, #604]	; 8002340 <fabrik+0x788>
 80020e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e8:	ee17 0a90 	vmov	r0, s15
 80020ec:	f7fe fa2c 	bl	8000548 <__aeabi_f2d>
 80020f0:	a38b      	add	r3, pc, #556	; (adr r3, 8002320 <fabrik+0x768>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fba9 	bl	800084c <__aeabi_ddiv>
 80020fa:	4603      	mov	r3, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	4618      	mov	r0, r3
 8002100:	4621      	mov	r1, r4
 8002102:	f7fe fd51 	bl	8000ba8 <__aeabi_d2f>
 8002106:	4603      	mov	r3, r0
 8002108:	653b      	str	r3, [r7, #80]	; 0x50
		alfa = (int)alfa;
 800210a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800210e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002116:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		beta = (int)beta;
 800211a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800211e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002126:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		pEnd.x = (int)pEnd.x;
 800212a:	edd7 7a03 	vldr	s15, [r7, #12]
 800212e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	edc7 7a03 	vstr	s15, [r7, #12]
		gamma = asinf((pEnd.x / cosf(alfa * M_PI / 180.0)- cosf(beta * M_PI / 180.0) * L1) / L2) * 180 / M_PI- beta + 90.0;//1
 800213a:	edd7 8a03 	vldr	s17, [r7, #12]
 800213e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002140:	f7fe fa02 	bl	8000548 <__aeabi_f2d>
 8002144:	a376      	add	r3, pc, #472	; (adr r3, 8002320 <fabrik+0x768>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fa55 	bl	80005f8 <__aeabi_dmul>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	4618      	mov	r0, r3
 8002154:	4621      	mov	r1, r4
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	4b77      	ldr	r3, [pc, #476]	; (8002338 <fabrik+0x780>)
 800215c:	f7fe fb76 	bl	800084c <__aeabi_ddiv>
 8002160:	4603      	mov	r3, r0
 8002162:	460c      	mov	r4, r1
 8002164:	4618      	mov	r0, r3
 8002166:	4621      	mov	r1, r4
 8002168:	f7fe fd1e 	bl	8000ba8 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	ee00 3a10 	vmov	s0, r3
 8002172:	f004 fc5f 	bl	8006a34 <cosf>
 8002176:	eef0 7a40 	vmov.f32	s15, s0
 800217a:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 800217e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002180:	f7fe f9e2 	bl	8000548 <__aeabi_f2d>
 8002184:	a366      	add	r3, pc, #408	; (adr r3, 8002320 <fabrik+0x768>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa35 	bl	80005f8 <__aeabi_dmul>
 800218e:	4603      	mov	r3, r0
 8002190:	460c      	mov	r4, r1
 8002192:	4618      	mov	r0, r3
 8002194:	4621      	mov	r1, r4
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <fabrik+0x780>)
 800219c:	f7fe fb56 	bl	800084c <__aeabi_ddiv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	460c      	mov	r4, r1
 80021a4:	4618      	mov	r0, r3
 80021a6:	4621      	mov	r1, r4
 80021a8:	f7fe fcfe 	bl	8000ba8 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	ee00 3a10 	vmov	s0, r3
 80021b2:	f004 fc3f 	bl	8006a34 <cosf>
 80021b6:	eeb0 7a40 	vmov.f32	s14, s0
 80021ba:	eddf 7a60 	vldr	s15, [pc, #384]	; 800233c <fabrik+0x784>
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80021c6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002344 <fabrik+0x78c>
 80021ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021ce:	eeb0 0a66 	vmov.f32	s0, s13
 80021d2:	f004 fe99 	bl	8006f08 <asinf>
 80021d6:	eeb0 7a40 	vmov.f32	s14, s0
 80021da:	eddf 7a59 	vldr	s15, [pc, #356]	; 8002340 <fabrik+0x788>
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	ee17 0a90 	vmov	r0, s15
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	a34d      	add	r3, pc, #308	; (adr r3, 8002320 <fabrik+0x768>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fb2c 	bl	800084c <__aeabi_ddiv>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	4625      	mov	r5, r4
 80021fa:	461c      	mov	r4, r3
 80021fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80021fe:	f7fe f9a3 	bl	8000548 <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4620      	mov	r0, r4
 8002208:	4629      	mov	r1, r5
 800220a:	f7fe f83d 	bl	8000288 <__aeabi_dsub>
 800220e:	4603      	mov	r3, r0
 8002210:	460c      	mov	r4, r1
 8002212:	4618      	mov	r0, r3
 8002214:	4621      	mov	r1, r4
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <fabrik+0x790>)
 800221c:	f7fe f836 	bl	800028c <__adddf3>
 8002220:	4603      	mov	r3, r0
 8002222:	460c      	mov	r4, r1
 8002224:	4618      	mov	r0, r3
 8002226:	4621      	mov	r1, r4
 8002228:	f7fe fcbe 	bl	8000ba8 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(isnanf(gamma)){
 8002230:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002234:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002238:	eeb4 7a67 	vcmp.f32	s14, s15
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	f180 811d 	bvs.w	800247e <fabrik+0x8c6>
			return;
		}
		max1 = ((((float) beta / 180) * 90) + 30);
 8002244:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002248:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002340 <fabrik+0x788>
 800224c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002250:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800234c <fabrik+0x794>
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800225c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002264:	ee17 2a90 	vmov	r2, s15
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <fabrik+0x798>)
 800226a:	601a      	str	r2, [r3, #0]
		i = TIM4->CCR4;
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <fabrik+0x79c>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	461a      	mov	r2, r3
 8002272:	4b39      	ldr	r3, [pc, #228]	; (8002358 <fabrik+0x7a0>)
 8002274:	601a      	str	r2, [r3, #0]
		j = TIM4->CCR3;
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <fabrik+0x79c>)
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	461a      	mov	r2, r3
 800227c:	4b37      	ldr	r3, [pc, #220]	; (800235c <fabrik+0x7a4>)
 800227e:	601a      	str	r2, [r3, #0]
		if (max1 == i) {
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <fabrik+0x798>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b34      	ldr	r3, [pc, #208]	; (8002358 <fabrik+0x7a0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d00d      	beq.n	80022a8 <fabrik+0x6f0>
			//nic nie rob
		} else if (max1 > i)
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <fabrik+0x798>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <fabrik+0x7a0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	dd03      	ble.n	80022a0 <fabrik+0x6e8>
			flagaF1 = 1;
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <fabrik+0x7a8>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e003      	b.n	80022a8 <fabrik+0x6f0>
		else
			flagaF1 = -1;
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <fabrik+0x7a8>)
 80022a2:	f04f 32ff 	mov.w	r2, #4294967295
 80022a6:	601a      	str	r2, [r3, #0]

		max2 = (((-0.53) * (float) gamma) + (119.3));
 80022a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80022aa:	f7fe f94d 	bl	8000548 <__aeabi_f2d>
 80022ae:	a31e      	add	r3, pc, #120	; (adr r3, 8002328 <fabrik+0x770>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe f9a0 	bl	80005f8 <__aeabi_dmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	460c      	mov	r4, r1
 80022bc:	4618      	mov	r0, r3
 80022be:	4621      	mov	r1, r4
 80022c0:	a31b      	add	r3, pc, #108	; (adr r3, 8002330 <fabrik+0x778>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fd ffe1 	bl	800028c <__adddf3>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	f7fe fc41 	bl	8000b58 <__aeabi_d2iz>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <fabrik+0x7ac>)
 80022da:	601a      	str	r2, [r3, #0]
		if (max2 > 98)
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <fabrik+0x7ac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b62      	cmp	r3, #98	; 0x62
 80022e2:	dd02      	ble.n	80022ea <fabrik+0x732>
			max2 = 98;
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <fabrik+0x7ac>)
 80022e6:	2262      	movs	r2, #98	; 0x62
 80022e8:	601a      	str	r2, [r3, #0]
		if (max2 < 25)
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <fabrik+0x7ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b18      	cmp	r3, #24
 80022f0:	dc02      	bgt.n	80022f8 <fabrik+0x740>
			max2 = 25;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <fabrik+0x7ac>)
 80022f4:	2219      	movs	r2, #25
 80022f6:	601a      	str	r2, [r3, #0]
		k = TIM4->CCR2;
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <fabrik+0x79c>)
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <fabrik+0x7b0>)
 8002300:	601a      	str	r2, [r3, #0]
		if (max2 == k) {
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <fabrik+0x7ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <fabrik+0x7b0>)
 8002308:	681b      	ldr	r3, [r3, #0]
			//nic nie rob
		}
		if (max2 > k)
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <fabrik+0x7ac>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <fabrik+0x7b0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	dd2c      	ble.n	8002370 <fabrik+0x7b8>
			flagaF2 = 1;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <fabrik+0x7b4>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e02c      	b.n	8002378 <fabrik+0x7c0>
 800231e:	bf00      	nop
 8002320:	54442d18 	.word	0x54442d18
 8002324:	400921fb 	.word	0x400921fb
 8002328:	8f5c28f6 	.word	0x8f5c28f6
 800232c:	bfe0f5c2 	.word	0xbfe0f5c2
 8002330:	33333333 	.word	0x33333333
 8002334:	405dd333 	.word	0x405dd333
 8002338:	40668000 	.word	0x40668000
 800233c:	433a0000 	.word	0x433a0000
 8002340:	43340000 	.word	0x43340000
 8002344:	43a98000 	.word	0x43a98000
 8002348:	40568000 	.word	0x40568000
 800234c:	42b40000 	.word	0x42b40000
 8002350:	20000330 	.word	0x20000330
 8002354:	40000800 	.word	0x40000800
 8002358:	20000324 	.word	0x20000324
 800235c:	20000250 	.word	0x20000250
 8002360:	200003bc 	.word	0x200003bc
 8002364:	20000328 	.word	0x20000328
 8002368:	2000029c 	.word	0x2000029c
 800236c:	2000024c 	.word	0x2000024c
		else
			flagaF2 = -1;
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <fabrik+0x8d4>)
 8002372:	f04f 32ff 	mov.w	r2, #4294967295
 8002376:	601a      	str	r2, [r3, #0]

		if(pEnd.x>0)
 8002378:	edd7 7a03 	vldr	s15, [r7, #12]
 800237c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	dd13      	ble.n	80023ae <fabrik+0x7f6>
			positions = ((180-alfa) * 32) + 1405;
 8002386:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002490 <fabrik+0x8d8>
 800238a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800238e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002392:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002494 <fabrik+0x8dc>
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002498 <fabrik+0x8e0>
 800239e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a6:	ee17 2a90 	vmov	r2, s15
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <fabrik+0x8e4>)
 80023ac:	601a      	str	r2, [r3, #0]
		if(pEnd.x<=0 && pEnd.y>=0)
 80023ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	d81a      	bhi.n	80023f2 <fabrik+0x83a>
 80023bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80023c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	db13      	blt.n	80023f2 <fabrik+0x83a>
			positions = ((360-alfa) * 32) + 1405;
 80023ca:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80024a0 <fabrik+0x8e8>
 80023ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80023d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002494 <fabrik+0x8dc>
 80023da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023de:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002498 <fabrik+0x8e0>
 80023e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ea:	ee17 2a90 	vmov	r2, s15
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <fabrik+0x8e4>)
 80023f0:	601a      	str	r2, [r3, #0]
		if(pEnd.x<0 && pEnd.y<0)
 80023f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	d51a      	bpl.n	8002436 <fabrik+0x87e>
 8002400:	edd7 7a04 	vldr	s15, [r7, #16]
 8002404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	d513      	bpl.n	8002436 <fabrik+0x87e>
			positions = ((0+alfa) * 32) + 1405;
 800240e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002412:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80024a4 <fabrik+0x8ec>
 8002416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800241a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002494 <fabrik+0x8dc>
 800241e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002422:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002498 <fabrik+0x8e0>
 8002426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800242a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242e:	ee17 2a90 	vmov	r2, s15
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <fabrik+0x8e4>)
 8002434:	601a      	str	r2, [r3, #0]
		if (positions < TIM5->CNT) {
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <fabrik+0x8f0>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <fabrik+0x8e4>)
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	4293      	cmp	r3, r2
 8002440:	d909      	bls.n	8002456 <fabrik+0x89e>
			kierunek(0, 1, 1, 0); //obrot w prawo
 8002442:	2300      	movs	r3, #0
 8002444:	2201      	movs	r2, #1
 8002446:	2101      	movs	r1, #1
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fd7d 	bl	8000f48 <kierunek>
			obrot = 2;
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <fabrik+0x8f4>)
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e009      	b.n	800246a <fabrik+0x8b2>
		} else {
			kierunek(1, 0, 0, 1); //obrot w lewo
 8002456:	2301      	movs	r3, #1
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe fd73 	bl	8000f48 <kierunek>
			obrot = -2;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <fabrik+0x8f4>)
 8002464:	f06f 0201 	mvn.w	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
		}
		TIM1->CCR2 = 60;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <fabrik+0x8f8>)
 800246c:	223c      	movs	r2, #60	; 0x3c
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR4 = 40;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <fabrik+0x8f8>)
 8002472:	2228      	movs	r2, #40	; 0x28
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_Base_Start_IT(&htim9);
 8002476:	480f      	ldr	r0, [pc, #60]	; (80024b4 <fabrik+0x8fc>)
 8002478:	f001 feb7 	bl	80041ea <HAL_TIM_Base_Start_IT>
 800247c:	e000      	b.n	8002480 <fabrik+0x8c8>
			return;
 800247e:	bf00      	nop
	}
}
 8002480:	3760      	adds	r7, #96	; 0x60
 8002482:	46bd      	mov	sp, r7
 8002484:	ecbd 8b02 	vpop	{d8}
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	bf00      	nop
 800248c:	2000024c 	.word	0x2000024c
 8002490:	43340000 	.word	0x43340000
 8002494:	42000000 	.word	0x42000000
 8002498:	44afa000 	.word	0x44afa000
 800249c:	20000400 	.word	0x20000400
 80024a0:	43b40000 	.word	0x43b40000
 80024a4:	00000000 	.word	0x00000000
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	20000228 	.word	0x20000228
 80024b0:	40010000 	.word	0x40010000
 80024b4:	20000374 	.word	0x20000374

080024b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80024bc:	f000 fec6 	bl	800324c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80024c0:	f000 f8a0 	bl	8002604 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80024c4:	f000 fb72 	bl	8002bac <MX_GPIO_Init>
	MX_TIM4_Init();
 80024c8:	f000 fa3c 	bl	8002944 <MX_TIM4_Init>
	MX_TIM2_Init();
 80024cc:	f000 f992 	bl	80027f4 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 80024d0:	f000 fb42 	bl	8002b58 <MX_USART6_UART_Init>
	MX_TIM1_Init();
 80024d4:	f000 f8fe 	bl	80026d4 <MX_TIM1_Init>
	MX_TIM3_Init();
 80024d8:	f000 f9da 	bl	8002890 <MX_TIM3_Init>
	MX_TIM5_Init();
 80024dc:	f000 faae 	bl	8002a3c <MX_TIM5_Init>
	MX_TIM9_Init();
 80024e0:	f000 fb00 	bl	8002ae4 <MX_TIM9_Init>
	/* USER CODE BEGIN 2 */
	//HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); //enkoder z 1 silnika
 80024e4:	213c      	movs	r1, #60	; 0x3c
 80024e6:	4839      	ldr	r0, [pc, #228]	; (80025cc <main+0x114>)
 80024e8:	f001 ffbe 	bl	8004468 <HAL_TIM_Encoder_Start>
	TIM5->CNT = 7000; //pozycja poczatkowa podstawy odpowiadajaca 180stopni
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <main+0x118>)
 80024ee:	f641 3258 	movw	r2, #7000	; 0x1b58
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // ten sam przy podstawie
 80024f4:	210c      	movs	r1, #12
 80024f6:	4837      	ldr	r0, [pc, #220]	; (80025d4 <main+0x11c>)
 80024f8:	f001 fef2 	bl	80042e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // ten sam przy podstawie
 80024fc:	2108      	movs	r1, #8
 80024fe:	4835      	ldr	r0, [pc, #212]	; (80025d4 <main+0x11c>)
 8002500:	f001 feee 	bl	80042e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // srodkowy przegub
 8002504:	2104      	movs	r1, #4
 8002506:	4833      	ldr	r0, [pc, #204]	; (80025d4 <main+0x11c>)
 8002508:	f001 feea 	bl	80042e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // obrot efektorem
 800250c:	2100      	movs	r1, #0
 800250e:	4831      	ldr	r0, [pc, #196]	; (80025d4 <main+0x11c>)
 8002510:	f001 fee6 	bl	80042e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // chwytak
 8002514:	2104      	movs	r1, #4
 8002516:	4830      	ldr	r0, [pc, #192]	; (80025d8 <main+0x120>)
 8002518:	f001 fee2 	bl	80042e0 <HAL_TIM_PWM_Start>
	/*
	 * KONFIGURACJA POCZATKOWA MANIPULATORA 120 - 41 - 98 - 75
	 */
	TIM4->CCR4 = 120; //(75 srodek) inkrementacja ruch w przod
 800251c:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <main+0x124>)
 800251e:	2278      	movs	r2, #120	; 0x78
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR3 = 41; //(80 na srodku) inkremetacja odchyla w tyl
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <main+0x124>)
 8002524:	2229      	movs	r2, #41	; 0x29
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR2 = 98; //25-125 inkrementacja zamyka (66 kat prosty) (25 wyprostowane) (98 zamkniety)
 8002528:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <main+0x124>)
 800252a:	2262      	movs	r2, #98	; 0x62
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = 75; //25-125 inkrementacja skreca w lewo (75 srodek) (125 max w prawo) (25 max w lewo ale lekko wychodzi poza zakres)
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <main+0x124>)
 8002530:	224b      	movs	r2, #75	; 0x4b
 8002532:	635a      	str	r2, [r3, #52]	; 0x34
	kierunek(1, 0, 1, 0); // jazda na wprost
 8002534:	2300      	movs	r3, #0
 8002536:	2201      	movs	r2, #1
 8002538:	2100      	movs	r1, #0
 800253a:	2001      	movs	r0, #1
 800253c:	f7fe fd04 	bl	8000f48 <kierunek>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PRAWY (2)  100 dobra predkosc
 8002540:	2104      	movs	r1, #4
 8002542:	4827      	ldr	r0, [pc, #156]	; (80025e0 <main+0x128>)
 8002544:	f001 fecc 	bl	80042e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LEWY (1)    70 dobra predkosc
 8002548:	210c      	movs	r1, #12
 800254a:	4825      	ldr	r0, [pc, #148]	; (80025e0 <main+0x128>)
 800254c:	f001 fec8 	bl	80042e0 <HAL_TIM_PWM_Start>
	TIM1->CCR2 = 0;
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <main+0x12c>)
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR4 = 0;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <main+0x12c>)
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 4);
 800255c:	2204      	movs	r2, #4
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <main+0x130>)
 8002560:	4822      	ldr	r0, [pc, #136]	; (80025ec <main+0x134>)
 8002562:	f002 fe99 	bl	8005298 <HAL_UART_Receive_IT>
//			pMiddle.z = BAZA + cosf((90.0 - BETA) * M_PI / 180.0) * L1;
//			pEnd.x = cosf(ALFA * M_PI / 180.0) * (cosf(BETA * M_PI / 180.0) * L1 + sinf((BETA + GAMMA - 90.0) * M_PI / 180.0) * L2);
//			pEnd.y = sinf(ALFA * M_PI / 180.0) * (cosf(BETA * M_PI / 180.0) * L1 + sinf((BETA + GAMMA - 90.0) * M_PI / 180.0) * L2);
//			pEnd.z = BAZA + cosf((90.0 - BETA) * M_PI / 180.0) * L1 - cosf((BETA + GAMMA - 90.0) * M_PI / 180.0) * L2;
//		}
		if(goFABRIK==1){
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <main+0x138>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d1fb      	bne.n	8002566 <main+0xae>
			goFABRIK=0;
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <main+0x138>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
			fabrik(pStart, pMiddle, pEnd, target);
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <main+0x13c>)
 8002576:	edd3 4a00 	vldr	s9, [r3]
 800257a:	ed93 5a01 	vldr	s10, [r3, #4]
 800257e:	edd3 5a02 	vldr	s11, [r3, #8]
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <main+0x140>)
 8002584:	ed93 3a00 	vldr	s6, [r3]
 8002588:	edd3 3a01 	vldr	s7, [r3, #4]
 800258c:	ed93 4a02 	vldr	s8, [r3, #8]
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <main+0x144>)
 8002592:	ed93 2a00 	vldr	s4, [r3]
 8002596:	edd3 2a01 	vldr	s5, [r3, #4]
 800259a:	ed93 6a02 	vldr	s12, [r3, #8]
 800259e:	4b18      	ldr	r3, [pc, #96]	; (8002600 <main+0x148>)
 80025a0:	edd3 6a00 	vldr	s13, [r3]
 80025a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80025a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80025ac:	eef0 1a42 	vmov.f32	s3, s4
 80025b0:	eeb0 2a62 	vmov.f32	s4, s5
 80025b4:	eef0 2a46 	vmov.f32	s5, s12
 80025b8:	eeb0 0a66 	vmov.f32	s0, s13
 80025bc:	eef0 0a47 	vmov.f32	s1, s14
 80025c0:	eeb0 1a67 	vmov.f32	s2, s15
 80025c4:	f7ff faf8 	bl	8001bb8 <fabrik>
		if(goFABRIK==1){
 80025c8:	e7cd      	b.n	8002566 <main+0xae>
 80025ca:	bf00      	nop
 80025cc:	200002a4 	.word	0x200002a4
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	20000254 	.word	0x20000254
 80025d8:	200002e4 	.word	0x200002e4
 80025dc:	40000800 	.word	0x40000800
 80025e0:	20000334 	.word	0x20000334
 80025e4:	40010000 	.word	0x40010000
 80025e8:	20000240 	.word	0x20000240
 80025ec:	200003c0 	.word	0x200003c0
 80025f0:	2000022c 	.word	0x2000022c
 80025f4:	20000444 	.word	0x20000444
 80025f8:	20000018 	.word	0x20000018
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	20000000 	.word	0x20000000

08002604 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	; 0x50
 8002608:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	2230      	movs	r2, #48	; 0x30
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fc76 	bl	8005f04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <SystemClock_Config+0xc8>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <SystemClock_Config+0xc8>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <SystemClock_Config+0xc8>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <SystemClock_Config+0xcc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <SystemClock_Config+0xcc>)
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <SystemClock_Config+0xcc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002660:	2301      	movs	r3, #1
 8002662:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266a:	2302      	movs	r3, #2
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002674:	2304      	movs	r3, #4
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002678:	2364      	movs	r3, #100	; 0x64
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267c:	2302      	movs	r3, #2
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002680:	2304      	movs	r3, #4
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	4618      	mov	r0, r3
 800268a:	f001 f921 	bl	80038d0 <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0x94>
		Error_Handler();
 8002694:	f000 fb32 	bl	8002cfc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002698:	230f      	movs	r3, #15
 800269a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2103      	movs	r1, #3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 fb7b 	bl	8003db0 <HAL_RCC_ClockConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <SystemClock_Config+0xc0>
		Error_Handler();
 80026c0:	f000 fb1c 	bl	8002cfc <Error_Handler>
	}
}
 80026c4:	bf00      	nop
 80026c6:	3750      	adds	r7, #80	; 0x50
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000

080026d4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b092      	sub	sp, #72	; 0x48
 80026d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
 80026f4:	615a      	str	r2, [r3, #20]
 80026f6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2220      	movs	r2, #32
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fc00 	bl	8005f04 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <MX_TIM1_Init+0x118>)
 8002706:	4a3a      	ldr	r2, [pc, #232]	; (80027f0 <MX_TIM1_Init+0x11c>)
 8002708:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 9999;
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <MX_TIM1_Init+0x118>)
 800270c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002710:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <MX_TIM1_Init+0x118>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 99;
 8002718:	4b34      	ldr	r3, [pc, #208]	; (80027ec <MX_TIM1_Init+0x118>)
 800271a:	2263      	movs	r2, #99	; 0x63
 800271c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <MX_TIM1_Init+0x118>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <MX_TIM1_Init+0x118>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <MX_TIM1_Init+0x118>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002730:	482e      	ldr	r0, [pc, #184]	; (80027ec <MX_TIM1_Init+0x118>)
 8002732:	f001 fda9 	bl	8004288 <HAL_TIM_PWM_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM1_Init+0x6c>
		Error_Handler();
 800273c:	f000 fade 	bl	8002cfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002740:	2300      	movs	r3, #0
 8002742:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800274c:	4619      	mov	r1, r3
 800274e:	4827      	ldr	r0, [pc, #156]	; (80027ec <MX_TIM1_Init+0x118>)
 8002750:	f002 fc3c 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800275a:	f000 facf 	bl	8002cfc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275e:	2360      	movs	r3, #96	; 0x60
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800276a:	2300      	movs	r3, #0
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	2204      	movs	r2, #4
 8002780:	4619      	mov	r1, r3
 8002782:	481a      	ldr	r0, [pc, #104]	; (80027ec <MX_TIM1_Init+0x118>)
 8002784:	f001 ffb0 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800278e:	f000 fab5 	bl	8002cfc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8002792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002796:	220c      	movs	r2, #12
 8002798:	4619      	mov	r1, r3
 800279a:	4814      	ldr	r0, [pc, #80]	; (80027ec <MX_TIM1_Init+0x118>)
 800279c:	f001 ffa4 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM1_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80027a6:	f000 faa9 	bl	8002cfc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <MX_TIM1_Init+0x118>)
 80027ce:	f002 fc6b 	bl	80050a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 80027d8:	f000 fa90 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <MX_TIM1_Init+0x118>)
 80027de:	f000 fb9d 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 80027e2:	bf00      	nop
 80027e4:	3748      	adds	r7, #72	; 0x48
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000334 	.word	0x20000334
 80027f0:	40010000 	.word	0x40010000

080027f4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002808:	463b      	mov	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <MX_TIM2_Init+0x98>)
 8002812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002816:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3999;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <MX_TIM2_Init+0x98>)
 800281a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800281e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <MX_TIM2_Init+0x98>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <MX_TIM2_Init+0x98>)
 8002828:	f240 32e7 	movw	r2, #999	; 0x3e7
 800282c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_TIM2_Init+0x98>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <MX_TIM2_Init+0x98>)
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800283a:	4814      	ldr	r0, [pc, #80]	; (800288c <MX_TIM2_Init+0x98>)
 800283c:	f001 fcaa 	bl	8004194 <HAL_TIM_Base_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0x56>
		Error_Handler();
 8002846:	f000 fa59 	bl	8002cfc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	4619      	mov	r1, r3
 8002856:	480d      	ldr	r0, [pc, #52]	; (800288c <MX_TIM2_Init+0x98>)
 8002858:	f002 f80c 	bl	8004874 <HAL_TIM_ConfigClockSource>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM2_Init+0x72>
		Error_Handler();
 8002862:	f000 fa4b 	bl	8002cfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800286e:	463b      	mov	r3, r7
 8002870:	4619      	mov	r1, r3
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <MX_TIM2_Init+0x98>)
 8002874:	f002 fbaa 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800287e:	f000 fa3d 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000404 	.word	0x20000404

08002890 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	615a      	str	r2, [r3, #20]
 80028b0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <MX_TIM3_Init+0xac>)
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <MX_TIM3_Init+0xb0>)
 80028b6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1999;
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <MX_TIM3_Init+0xac>)
 80028ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80028be:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <MX_TIM3_Init+0xac>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <MX_TIM3_Init+0xac>)
 80028c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028cc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MX_TIM3_Init+0xac>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <MX_TIM3_Init+0xac>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80028da:	4818      	ldr	r0, [pc, #96]	; (800293c <MX_TIM3_Init+0xac>)
 80028dc:	f001 fcd4 	bl	8004288 <HAL_TIM_PWM_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM3_Init+0x5a>
		Error_Handler();
 80028e6:	f000 fa09 	bl	8002cfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	4619      	mov	r1, r3
 80028f8:	4810      	ldr	r0, [pc, #64]	; (800293c <MX_TIM3_Init+0xac>)
 80028fa:	f002 fb67 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002904:	f000 f9fa 	bl	8002cfc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002908:	2360      	movs	r3, #96	; 0x60
 800290a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	2204      	movs	r2, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4807      	ldr	r0, [pc, #28]	; (800293c <MX_TIM3_Init+0xac>)
 8002920:	f001 fee2 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800292a:	f000 f9e7 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800292e:	4803      	ldr	r0, [pc, #12]	; (800293c <MX_TIM3_Init+0xac>)
 8002930:	f000 faf4 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 8002934:	bf00      	nop
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200002e4 	.word	0x200002e4
 8002940:	40000400 	.word	0x40000400

08002944 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800294a:	f107 0320 	add.w	r3, r7, #32
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	611a      	str	r2, [r3, #16]
 8002962:	615a      	str	r2, [r3, #20]
 8002964:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002968:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <MX_TIM4_Init+0xf4>)
 800296a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1999;
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <MX_TIM4_Init+0xf0>)
 800296e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002972:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 999;
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <MX_TIM4_Init+0xf0>)
 800297c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002980:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <MX_TIM4_Init+0xf0>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800298e:	4829      	ldr	r0, [pc, #164]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002990:	f001 fc7a 	bl	8004288 <HAL_TIM_PWM_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM4_Init+0x5a>
		Error_Handler();
 800299a:	f000 f9af 	bl	8002cfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80029a6:	f107 0320 	add.w	r3, r7, #32
 80029aa:	4619      	mov	r1, r3
 80029ac:	4821      	ldr	r0, [pc, #132]	; (8002a34 <MX_TIM4_Init+0xf0>)
 80029ae:	f002 fb0d 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80029b8:	f000 f9a0 	bl	8002cfc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029bc:	2360      	movs	r3, #96	; 0x60
 80029be:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	2200      	movs	r2, #0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4818      	ldr	r0, [pc, #96]	; (8002a34 <MX_TIM4_Init+0xf0>)
 80029d4:	f001 fe88 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80029de:	f000 f98d 	bl	8002cfc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	2204      	movs	r2, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4812      	ldr	r0, [pc, #72]	; (8002a34 <MX_TIM4_Init+0xf0>)
 80029ea:	f001 fe7d 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80029f4:	f000 f982 	bl	8002cfc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2208      	movs	r2, #8
 80029fc:	4619      	mov	r1, r3
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002a00:	f001 fe72 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8002a0a:	f000 f977 	bl	8002cfc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	220c      	movs	r2, #12
 8002a12:	4619      	mov	r1, r3
 8002a14:	4807      	ldr	r0, [pc, #28]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002a16:	f001 fe67 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002a20:	f000 f96c 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002a24:	4803      	ldr	r0, [pc, #12]	; (8002a34 <MX_TIM4_Init+0xf0>)
 8002a26:	f000 fa79 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000254 	.word	0x20000254
 8002a38:	40000800 	.word	0x40000800

08002a3c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fa5a 	bl	8005f04 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <MX_TIM5_Init+0xa4>)
 8002a5c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 14000;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002a6c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002a70:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a86:	2301      	movs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8002a8e:	230f      	movs	r3, #15
 8002a90:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a96:	2301      	movs	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480c      	ldr	r0, [pc, #48]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002aaa:	f001 fc4b 	bl	8004344 <HAL_TIM_Encoder_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM5_Init+0x7c>
		Error_Handler();
 8002ab4:	f000 f922 	bl	8002cfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_TIM5_Init+0xa0>)
 8002ac6:	f002 fa81 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002ad0:	f000 f914 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	3730      	adds	r7, #48	; 0x30
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200002a4 	.word	0x200002a4
 8002ae0:	40000c00 	.word	0x40000c00

08002ae4 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002aea:	463b      	mov	r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002af8:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <MX_TIM9_Init+0x70>)
 8002afa:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 499;
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002afe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b02:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 99;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002b0c:	2263      	movs	r2, #99	; 0x63
 8002b0e:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002b1e:	f001 fb39 	bl	8004194 <HAL_TIM_Base_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM9_Init+0x48>
		Error_Handler();
 8002b28:	f000 f8e8 	bl	8002cfc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b30:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8002b32:	463b      	mov	r3, r7
 8002b34:	4619      	mov	r1, r3
 8002b36:	4806      	ldr	r0, [pc, #24]	; (8002b50 <MX_TIM9_Init+0x6c>)
 8002b38:	f001 fe9c 	bl	8004874 <HAL_TIM_ConfigClockSource>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM9_Init+0x62>
		Error_Handler();
 8002b42:	f000 f8db 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000374 	.word	0x20000374
 8002b54:	40014000 	.word	0x40014000

08002b58 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <MX_USART6_UART_Init+0x50>)
 8002b60:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b68:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b7e:	220c      	movs	r2, #12
 8002b80:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_USART6_UART_Init+0x4c>)
 8002b90:	f002 faf0 	bl	8005174 <HAL_UART_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8002b9a:	f000 f8af 	bl	8002cfc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200003c0 	.word	0x200003c0
 8002ba8:	40011400 	.word	0x40011400

08002bac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <MX_GPIO_Init+0x140>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a48      	ldr	r2, [pc, #288]	; (8002cec <MX_GPIO_Init+0x140>)
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b46      	ldr	r3, [pc, #280]	; (8002cec <MX_GPIO_Init+0x140>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <MX_GPIO_Init+0x140>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a41      	ldr	r2, [pc, #260]	; (8002cec <MX_GPIO_Init+0x140>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <MX_GPIO_Init+0x140>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a33      	ldr	r2, [pc, #204]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a25      	ldr	r2, [pc, #148]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <MX_GPIO_Init+0x140>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, kierunkiP1_Pin | kierunkiP2_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2130      	movs	r1, #48	; 0x30
 8002c6e:	4820      	ldr	r0, [pc, #128]	; (8002cf0 <MX_GPIO_Init+0x144>)
 8002c70:	f000 fe14 	bl	800389c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(kierunkiL1_GPIO_Port, kierunkiL1_Pin, GPIO_PIN_RESET);
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c7a:	481e      	ldr	r0, [pc, #120]	; (8002cf4 <MX_GPIO_Init+0x148>)
 8002c7c:	f000 fe0e 	bl	800389c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(kierunkiL2_GPIO_Port, kierunkiL2_Pin, GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c86:	481c      	ldr	r0, [pc, #112]	; (8002cf8 <MX_GPIO_Init+0x14c>)
 8002c88:	f000 fe08 	bl	800389c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : kierunkiP1_Pin kierunkiP2_Pin */
	GPIO_InitStruct.Pin = kierunkiP1_Pin | kierunkiP2_Pin;
 8002c8c:	2330      	movs	r3, #48	; 0x30
 8002c8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c90:	2301      	movs	r3, #1
 8002c92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <MX_GPIO_Init+0x144>)
 8002ca4:	f000 fc78 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pin : kierunkiL1_Pin */
	GPIO_InitStruct.Pin = kierunkiL1_Pin;
 8002ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(kierunkiL1_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <MX_GPIO_Init+0x148>)
 8002cc2:	f000 fc69 	bl	8003598 <HAL_GPIO_Init>

	/*Configure GPIO pin : kierunkiL2_Pin */
	GPIO_InitStruct.Pin = kierunkiL2_Pin;
 8002cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(kierunkiL2_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_GPIO_Init+0x14c>)
 8002ce0:	f000 fc5a 	bl	8003598 <HAL_GPIO_Init>

}
 8002ce4:	bf00      	nop
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40020400 	.word	0x40020400

08002cfc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800

08002d5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_TIM_PWM_MspInit+0x98>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d116      	bne.n	8002d9c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2018      	movs	r0, #24
 8002d90:	f000 fba9 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d94:	2018      	movs	r0, #24
 8002d96:	f000 fbc2 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d9a:	e026      	b.n	8002dea <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIM_PWM_MspInit+0xa0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
}
 8002dc2:	e012      	b.n	8002dea <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_TIM_PWM_MspInit+0xa4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10d      	bne.n	8002dea <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800

08002e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d116      	bne.n	8002e44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_TIM_Base_MspInit+0x80>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_TIM_Base_MspInit+0x80>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_TIM_Base_MspInit+0x80>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	201c      	movs	r0, #28
 8002e38:	f000 fb55 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e3c:	201c      	movs	r0, #28
 8002e3e:	f000 fb6e 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002e42:	e01a      	b.n	8002e7a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_TIM_Base_MspInit+0x84>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d115      	bne.n	8002e7a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_TIM_Base_MspInit+0x80>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <HAL_TIM_Base_MspInit+0x80>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_TIM_Base_MspInit+0x80>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2018      	movs	r0, #24
 8002e70:	f000 fb39 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e74:	2018      	movs	r0, #24
 8002e76:	f000 fb52 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40014000 	.word	0x40014000

08002e8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_TIM_Encoder_MspInit+0x84>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d12b      	bne.n	8002f06 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002eb8:	f043 0308 	orr.w	r3, r3, #8
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_TIM_Encoder_MspInit+0x88>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = enkoder1_Pin|enkoder2_Pin;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	4619      	mov	r1, r3
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002f02:	f000 fb49 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f06:	bf00      	nop
 8002f08:	3728      	adds	r7, #40	; 0x28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000

08002f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a37      	ldr	r2, [pc, #220]	; (8003018 <HAL_TIM_MspPostInit+0xfc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d11f      	bne.n	8002f7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a35      	ldr	r2, [pc, #212]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = silnikPrawy_Pin|silnikLewy_Pin;
 8002f5a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4619      	mov	r1, r3
 8002f76:	482a      	ldr	r0, [pc, #168]	; (8003020 <HAL_TIM_MspPostInit+0x104>)
 8002f78:	f000 fb0e 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f7c:	e047      	b.n	800300e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_TIM_MspPostInit+0x108>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d11e      	bne.n	8002fc6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = chwytak_Pin;
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(chwytak_GPIO_Port, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	481a      	ldr	r0, [pc, #104]	; (8003028 <HAL_TIM_MspPostInit+0x10c>)
 8002fc0:	f000 faea 	bl	8003598 <HAL_GPIO_Init>
}
 8002fc4:	e023      	b.n	800300e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_TIM_MspPostInit+0x110>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d11e      	bne.n	800300e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_TIM_MspPostInit+0x100>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = przegub2_Pin|przegub1_Pin|podstawa2_Pin|podstawa1_Pin;
 8002fec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ffe:	2302      	movs	r3, #2
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	4809      	ldr	r0, [pc, #36]	; (8003030 <HAL_TIM_MspPostInit+0x114>)
 800300a:	f000 fac5 	bl	8003598 <HAL_GPIO_Init>
}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	; 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40023800 	.word	0x40023800
 8003020:	40021000 	.word	0x40021000
 8003024:	40000400 	.word	0x40000400
 8003028:	40020000 	.word	0x40020000
 800302c:	40000800 	.word	0x40000800
 8003030:	40020c00 	.word	0x40020c00

08003034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_UART_MspInit+0x94>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d133      	bne.n	80030be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HAL_UART_MspInit+0x98>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003060:	f043 0320 	orr.w	r3, r3, #32
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_UART_MspInit+0x98>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800309e:	2308      	movs	r3, #8
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <HAL_UART_MspInit+0x9c>)
 80030aa:	f000 fa75 	bl	8003598 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2047      	movs	r0, #71	; 0x47
 80030b4:	f000 fa17 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80030b8:	2047      	movs	r0, #71	; 0x47
 80030ba:	f000 fa30 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40011400 	.word	0x40011400
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020800 	.word	0x40020800

080030d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e6:	e7fe      	b.n	80030e6 <HardFault_Handler+0x4>

080030e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ec:	e7fe      	b.n	80030ec <MemManage_Handler+0x4>

080030ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f2:	e7fe      	b.n	80030f2 <BusFault_Handler+0x4>

080030f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f8:	e7fe      	b.n	80030f8 <UsageFault_Handler+0x4>

080030fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003128:	f000 f8e2 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}

08003130 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003136:	f001 f9ce 	bl	80044d6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800313a:	4803      	ldr	r0, [pc, #12]	; (8003148 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800313c:	f001 f9cb 	bl	80044d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000334 	.word	0x20000334
 8003148:	20000374 	.word	0x20000374

0800314c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <TIM2_IRQHandler+0x10>)
 8003152:	f001 f9c0 	bl	80044d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000404 	.word	0x20000404

08003160 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <USART6_IRQHandler+0x10>)
 8003166:	f002 f8ed 	bl	8005344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200003c0 	.word	0x200003c0

08003174 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <_sbrk+0x50>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <_sbrk+0x16>
		heap_end = &end;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <_sbrk+0x50>)
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <_sbrk+0x54>)
 8003188:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <_sbrk+0x50>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <_sbrk+0x50>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	466a      	mov	r2, sp
 800319a:	4293      	cmp	r3, r2
 800319c:	d907      	bls.n	80031ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800319e:	f002 fe87 	bl	8005eb0 <__errno>
 80031a2:	4602      	mov	r2, r0
 80031a4:	230c      	movs	r3, #12
 80031a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031a8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ac:	e006      	b.n	80031bc <_sbrk+0x48>
	}

	heap_end += incr;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_sbrk+0x50>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <_sbrk+0x50>)
 80031b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000234 	.word	0x20000234
 80031c8:	20000458 	.word	0x20000458

080031cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <SystemInit+0x28>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <SystemInit+0x28>)
 80031d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SystemInit+0x28>)
 80031e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031e6:	609a      	str	r2, [r3, #8]
#endif
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003230 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031fe:	e003      	b.n	8003208 <LoopCopyDataInit>

08003200 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003202:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003204:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003206:	3104      	adds	r1, #4

08003208 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800320c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800320e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003210:	d3f6      	bcc.n	8003200 <CopyDataInit>
  ldr  r2, =_sbss
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003214:	e002      	b.n	800321c <LoopFillZerobss>

08003216 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003216:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003218:	f842 3b04 	str.w	r3, [r2], #4

0800321c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800321e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003220:	d3f9      	bcc.n	8003216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003222:	f7ff ffd3 	bl	80031cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003226:	f002 fe49 	bl	8005ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800322a:	f7ff f945 	bl	80024b8 <main>
  bx  lr    
 800322e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003230:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003234:	08009140 	.word	0x08009140
  ldr  r0, =_sdata
 8003238:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800323c:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8003240:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8003244:	20000458 	.word	0x20000458

08003248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC_IRQHandler>
	...

0800324c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_Init+0x40>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_Init+0x40>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x40>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 f92b 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fd44 	bl	8002d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f943 	bl	800353a <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f000 f90b 	bl	80034e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000024 	.word	0x20000024
 80032e8:	2000002c 	.word	0x2000002c
 80032ec:	20000028 	.word	0x20000028

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000002c 	.word	0x2000002c
 8003314:	20000450 	.word	0x20000450

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000450 	.word	0x20000450

08003330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800335c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	; (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <__NVIC_EnableIRQ+0x38>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	; (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf28      	it	cs
 8003442:	2304      	movcs	r3, #4
 8003444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3304      	adds	r3, #4
 800344a:	2b06      	cmp	r3, #6
 800344c:	d902      	bls.n	8003454 <NVIC_EncodePriority+0x30>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3b03      	subs	r3, #3
 8003452:	e000      	b.n	8003456 <NVIC_EncodePriority+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800346c:	f04f 31ff 	mov.w	r1, #4294967295
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43d9      	mvns	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	4313      	orrs	r3, r2
         );
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f7ff ff8e 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff29 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff3e 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff8e 	bl	8003424 <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff5d 	bl	80033d0 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff31 	bl	8003394 <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffa2 	bl	800348c <SysTick_Config>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d004      	beq.n	8003570 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00c      	b.n	800358a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2205      	movs	r2, #5
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e159      	b.n	8003868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 8148 	bne.w	8003862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d00b      	beq.n	80035f2 <HAL_GPIO_Init+0x5a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d007      	beq.n	80035f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b12      	cmp	r3, #18
 80035f0:	d130      	bne.n	8003654 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0201 	and.w	r2, r3, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0xfc>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b12      	cmp	r3, #18
 8003692:	d123      	bne.n	80036dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a2 	beq.w	8003862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_GPIO_Init+0x2e4>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a55      	ldr	r2, [pc, #340]	; (800387c <HAL_GPIO_Init+0x2e4>)
 8003728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_GPIO_Init+0x2e4>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373a:	4a51      	ldr	r2, [pc, #324]	; (8003880 <HAL_GPIO_Init+0x2e8>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3302      	adds	r3, #2
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a48      	ldr	r2, [pc, #288]	; (8003884 <HAL_GPIO_Init+0x2ec>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_GPIO_Init+0x202>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a47      	ldr	r2, [pc, #284]	; (8003888 <HAL_GPIO_Init+0x2f0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_GPIO_Init+0x1fe>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a46      	ldr	r2, [pc, #280]	; (800388c <HAL_GPIO_Init+0x2f4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a45      	ldr	r2, [pc, #276]	; (8003890 <HAL_GPIO_Init+0x2f8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <HAL_GPIO_Init+0x1f6>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a44      	ldr	r2, [pc, #272]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_GPIO_Init+0x1f2>
 8003786:	2304      	movs	r3, #4
 8003788:	e008      	b.n	800379c <HAL_GPIO_Init+0x204>
 800378a:	2307      	movs	r3, #7
 800378c:	e006      	b.n	800379c <HAL_GPIO_Init+0x204>
 800378e:	2303      	movs	r3, #3
 8003790:	e004      	b.n	800379c <HAL_GPIO_Init+0x204>
 8003792:	2302      	movs	r3, #2
 8003794:	e002      	b.n	800379c <HAL_GPIO_Init+0x204>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_GPIO_Init+0x204>
 800379a:	2300      	movs	r3, #0
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f002 0203 	and.w	r2, r2, #3
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	4093      	lsls	r3, r2
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ac:	4934      	ldr	r1, [pc, #208]	; (8003880 <HAL_GPIO_Init+0x2e8>)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_GPIO_Init+0x300>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037de:	4a2e      	ldr	r2, [pc, #184]	; (8003898 <HAL_GPIO_Init+0x300>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037e4:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <HAL_GPIO_Init+0x300>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003808:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_GPIO_Init+0x300>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_GPIO_Init+0x300>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_GPIO_Init+0x300>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_GPIO_Init+0x300>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_GPIO_Init+0x300>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3301      	adds	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b0f      	cmp	r3, #15
 800386c:	f67f aea2 	bls.w	80035b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003870:	bf00      	nop
 8003872:	3724      	adds	r7, #36	; 0x24
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40023800 	.word	0x40023800
 8003880:	40013800 	.word	0x40013800
 8003884:	40020000 	.word	0x40020000
 8003888:	40020400 	.word	0x40020400
 800388c:	40020800 	.word	0x40020800
 8003890:	40020c00 	.word	0x40020c00
 8003894:	40021000 	.word	0x40021000
 8003898:	40013c00 	.word	0x40013c00

0800389c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
 80038a8:	4613      	mov	r3, r2
 80038aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ac:	787b      	ldrb	r3, [r7, #1]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b8:	e003      	b.n	80038c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	041a      	lsls	r2, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	619a      	str	r2, [r3, #24]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e25b      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00c      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4ba0      	ldr	r3, [pc, #640]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d112      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4b9d      	ldr	r3, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e236      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b91      	ldr	r3, [pc, #580]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b8b      	ldr	r3, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a87      	ldr	r2, [pc, #540]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b84      	ldr	r3, [pc, #528]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a83      	ldr	r2, [pc, #524]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a80      	ldr	r2, [pc, #512]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7ff fcc6 	bl	8003318 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7ff fcc2 	bl	8003318 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1fb      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff fcb2 	bl	8003318 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff fcae 	bl	8003318 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1e7      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d063      	beq.n	8003aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b62      	ldr	r3, [pc, #392]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d11c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d116      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e1bb      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4952      	ldr	r1, [pc, #328]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	e03a      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCC_OscConfig+0x2b0>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7ff fc67 	bl	8003318 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7ff fc63 	bl	8003318 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e19c      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4940      	ldr	r1, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
 8003a80:	e015      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_OscConfig+0x2b0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7ff fc46 	bl	8003318 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a90:	f7ff fc42 	bl	8003318 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e17b      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d030      	beq.n	8003b1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_RCC_OscConfig+0x2b4>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7ff fc26 	bl	8003318 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7ff fc22 	bl	8003318 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e15b      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
 8003aee:	e015      	b.n	8003b1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_OscConfig+0x2b4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7ff fc0f 	bl	8003318 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7ff fc0b 	bl	8003318 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e144      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a0 	beq.w	8003c6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7ff fbd1 	bl	8003318 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e011      	b.n	8003b9e <HAL_RCC_OscConfig+0x2ce>
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
 8003b88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7ff fbc4 	bl	8003318 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0fd      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b81      	ldr	r3, [pc, #516]	; (8003da4 <HAL_RCC_OscConfig+0x4d4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
 8003bb2:	4b7d      	ldr	r3, [pc, #500]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a7c      	ldr	r2, [pc, #496]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	e01c      	b.n	8003bfa <HAL_RCC_OscConfig+0x32a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x312>
 8003bc8:	4b77      	ldr	r3, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a76      	ldr	r2, [pc, #472]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b74      	ldr	r3, [pc, #464]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a73      	ldr	r2, [pc, #460]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x32a>
 8003be2:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a70      	ldr	r2, [pc, #448]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	4b6e      	ldr	r3, [pc, #440]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a6d      	ldr	r2, [pc, #436]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7ff fb89 	bl	8003318 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7ff fb85 	bl	8003318 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0bc      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RCC_OscConfig+0x33a>
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7ff fb73 	bl	8003318 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7ff fb6f 	bl	8003318 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0a6      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b52      	ldr	r3, [pc, #328]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a51      	ldr	r2, [pc, #324]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8092 	beq.w	8003d98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d05c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d141      	bne.n	8003d0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b48      	ldr	r3, [pc, #288]	; (8003dac <HAL_RCC_OscConfig+0x4dc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7ff fb43 	bl	8003318 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c96:	f7ff fb3f 	bl	8003318 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e078      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	4933      	ldr	r1, [pc, #204]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <HAL_RCC_OscConfig+0x4dc>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7ff fb18 	bl	8003318 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7ff fb14 	bl	8003318 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04d      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x41c>
 8003d0a:	e045      	b.n	8003d98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7ff fb01 	bl	8003318 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7ff fafd 	bl	8003318 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e036      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x44a>
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e029      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d115      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10d      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40007000 	.word	0x40007000
 8003da8:	40023800 	.word	0x40023800
 8003dac:	42470060 	.word	0x42470060

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0cc      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d90c      	bls.n	8003dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0b8      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e04:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a52      	ldr	r2, [pc, #328]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	494d      	ldr	r1, [pc, #308]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d044      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d119      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e07f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e06f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e067      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4934      	ldr	r1, [pc, #208]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7ff fa3a 	bl	8003318 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea8:	f7ff fa36 	bl	8003318 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e04f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 020c 	and.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1eb      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d20c      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e032      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4916      	ldr	r1, [pc, #88]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	490e      	ldr	r1, [pc, #56]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f36:	f000 f821 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f99a 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023c00 	.word	0x40023c00
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	08008b8c 	.word	0x08008b8c
 8003f74:	20000024 	.word	0x20000024
 8003f78:	20000028 	.word	0x20000028

08003f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d007      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x32>
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d008      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 80b4 	bne.w	8004110 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003faa:	60bb      	str	r3, [r7, #8]
       break;
 8003fac:	e0b3      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fae:	4b5e      	ldr	r3, [pc, #376]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fb0:	60bb      	str	r3, [r7, #8]
      break;
 8003fb2:	e0b0      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbe:	4b58      	ldr	r3, [pc, #352]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04a      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b55      	ldr	r3, [pc, #340]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	ea03 0501 	and.w	r5, r3, r1
 8003fe0:	ea04 0602 	and.w	r6, r4, r2
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	f04f 0400 	mov.w	r4, #0
 8003ff0:	0154      	lsls	r4, r2, #5
 8003ff2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ff6:	014b      	lsls	r3, r1, #5
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	1b49      	subs	r1, r1, r5
 8003ffe:	eb62 0206 	sbc.w	r2, r2, r6
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	f04f 0400 	mov.w	r4, #0
 800400a:	0194      	lsls	r4, r2, #6
 800400c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004010:	018b      	lsls	r3, r1, #6
 8004012:	1a5b      	subs	r3, r3, r1
 8004014:	eb64 0402 	sbc.w	r4, r4, r2
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	00e2      	lsls	r2, r4, #3
 8004022:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004026:	00d9      	lsls	r1, r3, #3
 8004028:	460b      	mov	r3, r1
 800402a:	4614      	mov	r4, r2
 800402c:	195b      	adds	r3, r3, r5
 800402e:	eb44 0406 	adc.w	r4, r4, r6
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	0262      	lsls	r2, r4, #9
 800403c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004040:	0259      	lsls	r1, r3, #9
 8004042:	460b      	mov	r3, r1
 8004044:	4614      	mov	r4, r2
 8004046:	4618      	mov	r0, r3
 8004048:	4621      	mov	r1, r4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f04f 0400 	mov.w	r4, #0
 8004050:	461a      	mov	r2, r3
 8004052:	4623      	mov	r3, r4
 8004054:	f7fc fdf8 	bl	8000c48 <__aeabi_uldivmod>
 8004058:	4603      	mov	r3, r0
 800405a:	460c      	mov	r4, r1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e049      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004060:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	099b      	lsrs	r3, r3, #6
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	ea03 0501 	and.w	r5, r3, r1
 8004076:	ea04 0602 	and.w	r6, r4, r2
 800407a:	4629      	mov	r1, r5
 800407c:	4632      	mov	r2, r6
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	0154      	lsls	r4, r2, #5
 8004088:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800408c:	014b      	lsls	r3, r1, #5
 800408e:	4619      	mov	r1, r3
 8004090:	4622      	mov	r2, r4
 8004092:	1b49      	subs	r1, r1, r5
 8004094:	eb62 0206 	sbc.w	r2, r2, r6
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	f04f 0400 	mov.w	r4, #0
 80040a0:	0194      	lsls	r4, r2, #6
 80040a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040a6:	018b      	lsls	r3, r1, #6
 80040a8:	1a5b      	subs	r3, r3, r1
 80040aa:	eb64 0402 	sbc.w	r4, r4, r2
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040bc:	00d9      	lsls	r1, r3, #3
 80040be:	460b      	mov	r3, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	195b      	adds	r3, r3, r5
 80040c4:	eb44 0406 	adc.w	r4, r4, r6
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	02a2      	lsls	r2, r4, #10
 80040d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040d6:	0299      	lsls	r1, r3, #10
 80040d8:	460b      	mov	r3, r1
 80040da:	4614      	mov	r4, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	4621      	mov	r1, r4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	f7fc fdad 	bl	8000c48 <__aeabi_uldivmod>
 80040ee:	4603      	mov	r3, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	60bb      	str	r3, [r7, #8]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004112:	60bb      	str	r3, [r7, #8]
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	68bb      	ldr	r3, [r7, #8]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_RCC_GetHCLKFreq+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000024 	.word	0x20000024

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004148:	f7ff fff0 	bl	800412c <HAL_RCC_GetHCLKFreq>
 800414c:	4601      	mov	r1, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0a9b      	lsrs	r3, r3, #10
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4a03      	ldr	r2, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	08008b9c 	.word	0x08008b9c

0800416c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004170:	f7ff ffdc 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004174:	4601      	mov	r1, r0
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	0b5b      	lsrs	r3, r3, #13
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	08008b9c 	.word	0x08008b9c

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01d      	b.n	80041e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe fe22 	bl	8002e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 fc2e 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b06      	cmp	r3, #6
 8004212:	d007      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	f241 1311 	movw	r3, #4369	; 0x1111
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <HAL_TIM_Base_Stop_IT+0x48>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	f240 4344 	movw	r3, #1092	; 0x444
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_TIM_Base_Stop_IT+0x48>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e01d      	b.n	80042d6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fe fd54 	bl	8002d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 fbb4 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe44 	bl	8004f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a10      	ldr	r2, [pc, #64]	; (8004340 <HAL_TIM_PWM_Start+0x60>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d107      	bne.n	8004312 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b06      	cmp	r3, #6
 8004322:	d007      	beq.n	8004334 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000

08004344 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e083      	b.n	8004460 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fe fd8d 	bl	8002e8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004388:	f023 0307 	bic.w	r3, r3, #7
 800438c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f000 fb4b 	bl	8004a34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	4313      	orrs	r3, r2
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043e4:	f023 030c 	bic.w	r3, r3, #12
 80043e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	4313      	orrs	r3, r2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	011a      	lsls	r2, r3, #4
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	031b      	lsls	r3, r3, #12
 8004414:	4313      	orrs	r3, r2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4313      	orrs	r3, r2
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_TIM_Encoder_Start+0x16>
 8004478:	2b04      	cmp	r3, #4
 800447a:	d008      	beq.n	800448e <HAL_TIM_Encoder_Start+0x26>
 800447c:	e00f      	b.n	800449e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fd7a 	bl	8004f80 <TIM_CCxChannelCmd>
      break;
 800448c:	e016      	b.n	80044bc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2201      	movs	r2, #1
 8004494:	2104      	movs	r1, #4
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fd72 	bl	8004f80 <TIM_CCxChannelCmd>
      break;
 800449c:	e00e      	b.n	80044bc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2201      	movs	r2, #1
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fd6a 	bl	8004f80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	2104      	movs	r1, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fd63 	bl	8004f80 <TIM_CCxChannelCmd>
      break;
 80044ba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d122      	bne.n	8004532 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d11b      	bne.n	8004532 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0202 	mvn.w	r2, #2
 8004502:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa6c 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 800451e:	e005      	b.n	800452c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa5e 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa6f 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d122      	bne.n	8004586 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d11b      	bne.n	8004586 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0204 	mvn.w	r2, #4
 8004556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fa42 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 8004572:	e005      	b.n	8004580 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fa34 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa45 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d122      	bne.n	80045da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11b      	bne.n	80045da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0208 	mvn.w	r2, #8
 80045aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fa18 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 80045c6:	e005      	b.n	80045d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fa0a 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa1b 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d122      	bne.n	800462e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d11b      	bne.n	800462e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0210 	mvn.w	r2, #16
 80045fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2208      	movs	r2, #8
 8004604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9ee 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 800461a:	e005      	b.n	8004628 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9e0 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9f1 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0201 	mvn.w	r2, #1
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fc fca7 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d10e      	bne.n	8004686 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b80      	cmp	r3, #128	; 0x80
 8004674:	d107      	bne.n	8004686 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fd6d 	bl	8005160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d10e      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f9b6 	bl	8004a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d10e      	bne.n	80046de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d107      	bne.n	80046de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f06f 0220 	mvn.w	r2, #32
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fd37 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046fe:	2302      	movs	r3, #2
 8004700:	e0b4      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	f200 809f 	bhi.w	8004858 <HAL_TIM_PWM_ConfigChannel+0x170>
 800471a:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004755 	.word	0x08004755
 8004724:	08004859 	.word	0x08004859
 8004728:	08004859 	.word	0x08004859
 800472c:	08004859 	.word	0x08004859
 8004730:	08004795 	.word	0x08004795
 8004734:	08004859 	.word	0x08004859
 8004738:	08004859 	.word	0x08004859
 800473c:	08004859 	.word	0x08004859
 8004740:	080047d7 	.word	0x080047d7
 8004744:	08004859 	.word	0x08004859
 8004748:	08004859 	.word	0x08004859
 800474c:	08004859 	.word	0x08004859
 8004750:	08004817 	.word	0x08004817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f9ea 	bl	8004b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0208 	orr.w	r2, r2, #8
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	619a      	str	r2, [r3, #24]
      break;
 8004792:	e062      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fa30 	bl	8004c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6999      	ldr	r1, [r3, #24]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]
      break;
 80047d4:	e041      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fa7b 	bl	8004cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0208 	orr.w	r2, r2, #8
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0204 	bic.w	r2, r2, #4
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	61da      	str	r2, [r3, #28]
      break;
 8004814:	e021      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fac5 	bl	8004dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	61da      	str	r2, [r3, #28]
      break;
 8004856:	e000      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004858:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIM_ConfigClockSource+0x18>
 8004888:	2302      	movs	r3, #2
 800488a:	e0a6      	b.n	80049da <HAL_TIM_ConfigClockSource+0x166>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d067      	beq.n	8004994 <HAL_TIM_ConfigClockSource+0x120>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d80b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x6c>
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d073      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x140>
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d802      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x62>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d06f      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048d4:	e078      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d06c      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x140>
 80048da:	2b30      	cmp	r3, #48	; 0x30
 80048dc:	d06a      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048de:	e073      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d00d      	beq.n	8004900 <HAL_TIM_ConfigClockSource+0x8c>
 80048e4:	2b70      	cmp	r3, #112	; 0x70
 80048e6:	d804      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x7e>
 80048e8:	2b50      	cmp	r3, #80	; 0x50
 80048ea:	d033      	beq.n	8004954 <HAL_TIM_ConfigClockSource+0xe0>
 80048ec:	2b60      	cmp	r3, #96	; 0x60
 80048ee:	d041      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048f0:	e06a      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d066      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x152>
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d017      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048fe:	e063      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f000 fb16 	bl	8004f40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004922:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
      break;
 800492c:	e04c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f000 faff 	bl	8004f40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004950:	609a      	str	r2, [r3, #8]
      break;
 8004952:	e039      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	f000 fa73 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2150      	movs	r1, #80	; 0x50
 800496c:	4618      	mov	r0, r3
 800496e:	f000 facc 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004972:	e029      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	461a      	mov	r2, r3
 8004982:	f000 fa92 	bl	8004eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2160      	movs	r1, #96	; 0x60
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fabc 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004992:	e019      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f000 fa53 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2140      	movs	r1, #64	; 0x40
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 faac 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049b2:	e009      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f000 faa3 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <TIM_Base_SetConfig+0xe4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a31      	ldr	r2, [pc, #196]	; (8004b1c <TIM_Base_SetConfig+0xe8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <TIM_Base_SetConfig+0xec>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <TIM_Base_SetConfig+0xf0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <TIM_Base_SetConfig+0xe4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01b      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d017      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <TIM_Base_SetConfig+0xe8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <TIM_Base_SetConfig+0xec>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <TIM_Base_SetConfig+0xf0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <TIM_Base_SetConfig+0xf4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <TIM_Base_SetConfig+0xf8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <TIM_Base_SetConfig+0xfc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <TIM_Base_SetConfig+0xe4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	615a      	str	r2, [r3, #20]
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 0302 	bic.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <TIM_OC1_SetConfig+0xc8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0308 	bic.w	r3, r3, #8
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <TIM_OC1_SetConfig+0xc8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000

08004c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0210 	bic.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0320 	bic.w	r3, r3, #32
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <TIM_OC2_SetConfig+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10d      	bne.n	8004c7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <TIM_OC2_SetConfig+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000

08004cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <TIM_OC3_SetConfig+0xd0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10d      	bne.n	8004d52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <TIM_OC3_SetConfig+0xd0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d113      	bne.n	8004d82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <TIM_OC4_SetConfig+0x9c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000

08004e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 030a 	bic.w	r3, r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f043 0307 	orr.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2201      	movs	r2, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e050      	b.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d013      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a15      	ldr	r2, [pc, #84]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10c      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40014000 	.word	0x40014000

080050a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e03d      	b.n	8005140 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e03f      	b.n	8005206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd ff4a 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 faf9 	bl	80057b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b20      	cmp	r3, #32
 8005226:	d130      	bne.n	800528a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_UART_Transmit_IT+0x26>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e029      	b.n	800528c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Transmit_IT+0x38>
 8005242:	2302      	movs	r3, #2
 8005244:	e022      	b.n	800528c <HAL_UART_Transmit_IT+0x7e>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005284:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d140      	bne.n	8005334 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_UART_Receive_IT+0x26>
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e039      	b.n	8005336 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Receive_IT+0x38>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e032      	b.n	8005336 <HAL_UART_Receive_IT+0x9e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2222      	movs	r2, #34	; 0x22
 80052f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0220 	orr.w	r2, r2, #32
 800532e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10d      	bne.n	8005396 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_UART_IRQHandler+0x52>
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f98c 	bl	80056ac <UART_Receive_IT>
      return;
 8005394:	e0d1      	b.n	800553a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80b0 	beq.w	80054fe <HAL_UART_IRQHandler+0x1ba>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_UART_IRQHandler+0x70>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80a5 	beq.w	80054fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_UART_IRQHandler+0x90>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	f043 0201 	orr.w	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_UART_IRQHandler+0xb0>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	f043 0202 	orr.w	r2, r3, #2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_UART_IRQHandler+0xd0>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	f043 0204 	orr.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00f      	beq.n	800543e <HAL_UART_IRQHandler+0xfa>
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_UART_IRQHandler+0xee>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	f043 0208 	orr.w	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d078      	beq.n	8005538 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_UART_IRQHandler+0x11c>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f926 	bl	80056ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <HAL_UART_IRQHandler+0x144>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d031      	beq.n	80054ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f86f 	bl	800556c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d123      	bne.n	80054e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	4a21      	ldr	r2, [pc, #132]	; (8005540 <HAL_UART_IRQHandler+0x1fc>)
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe f846 	bl	8003552 <HAL_DMA_Abort_IT>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d016      	beq.n	80054fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054d6:	4610      	mov	r0, r2
 80054d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054da:	e00e      	b.n	80054fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f83b 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e2:	e00a      	b.n	80054fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f837 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ea:	e006      	b.n	80054fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f833 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80054f8:	e01e      	b.n	8005538 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fa:	bf00      	nop
    return;
 80054fc:	e01c      	b.n	8005538 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_UART_IRQHandler+0x1d6>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f85c 	bl	80055d0 <UART_Transmit_IT>
    return;
 8005518:	e00f      	b.n	800553a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_UART_IRQHandler+0x1f6>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f8a4 	bl	800567c <UART_EndTransmit_IT>
    return;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005538:	bf00      	nop
  }
}
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	080055a9 	.word	0x080055a9

08005544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005582:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ffc8 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b21      	cmp	r3, #33	; 0x21
 80055e2:	d144      	bne.n	800566e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ec:	d11a      	bne.n	8005624 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005602:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]
 8005616:	e00e      	b.n	8005636 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	621a      	str	r2, [r3, #32]
 8005622:	e008      	b.n	8005636 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	1c59      	adds	r1, r3, #1
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6211      	str	r1, [r2, #32]
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4619      	mov	r1, r3
 8005644:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005658:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005668:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e000      	b.n	8005670 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800566e:	2302      	movs	r3, #2
  }
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005692:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff51 	bl	8005544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b22      	cmp	r3, #34	; 0x22
 80056be:	d171      	bne.n	80057a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d123      	bne.n	8005712 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10e      	bne.n	80056f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	1c9a      	adds	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
 80056f4:	e029      	b.n	800574a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
 8005710:	e01b      	b.n	800574a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6858      	ldr	r0, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	1c59      	adds	r1, r3, #1
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6291      	str	r1, [r2, #40]	; 0x28
 800572a:	b2c2      	uxtb	r2, r0
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e00c      	b.n	800574a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	1c58      	adds	r0, r3, #1
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	6288      	str	r0, [r1, #40]	; 0x28
 8005742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4619      	mov	r1, r3
 8005758:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800575a:	2b00      	cmp	r3, #0
 800575c:	d120      	bne.n	80057a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0220 	bic.w	r2, r2, #32
 800576c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fe62 	bl	8001460 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e002      	b.n	80057a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057f2:	f023 030c 	bic.w	r3, r3, #12
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581e:	f040 818b 	bne.w	8005b38 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4ac1      	ldr	r2, [pc, #772]	; (8005b2c <UART_SetConfig+0x37c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0x88>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4abf      	ldr	r2, [pc, #764]	; (8005b30 <UART_SetConfig+0x380>)
 8005832:	4293      	cmp	r3, r2
 8005834:	f040 80bd 	bne.w	80059b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fe fc98 	bl	800416c <HAL_RCC_GetPCLK2Freq>
 800583c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	461d      	mov	r5, r3
 8005842:	f04f 0600 	mov.w	r6, #0
 8005846:	46a8      	mov	r8, r5
 8005848:	46b1      	mov	r9, r6
 800584a:	eb18 0308 	adds.w	r3, r8, r8
 800584e:	eb49 0409 	adc.w	r4, r9, r9
 8005852:	4698      	mov	r8, r3
 8005854:	46a1      	mov	r9, r4
 8005856:	eb18 0805 	adds.w	r8, r8, r5
 800585a:	eb49 0906 	adc.w	r9, r9, r6
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800586a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800586e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005872:	4688      	mov	r8, r1
 8005874:	4691      	mov	r9, r2
 8005876:	eb18 0005 	adds.w	r0, r8, r5
 800587a:	eb49 0106 	adc.w	r1, r9, r6
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	461d      	mov	r5, r3
 8005884:	f04f 0600 	mov.w	r6, #0
 8005888:	196b      	adds	r3, r5, r5
 800588a:	eb46 0406 	adc.w	r4, r6, r6
 800588e:	461a      	mov	r2, r3
 8005890:	4623      	mov	r3, r4
 8005892:	f7fb f9d9 	bl	8000c48 <__aeabi_uldivmod>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	461a      	mov	r2, r3
 800589c:	4ba5      	ldr	r3, [pc, #660]	; (8005b34 <UART_SetConfig+0x384>)
 800589e:	fba3 2302 	umull	r2, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	461d      	mov	r5, r3
 80058ac:	f04f 0600 	mov.w	r6, #0
 80058b0:	46a9      	mov	r9, r5
 80058b2:	46b2      	mov	sl, r6
 80058b4:	eb19 0309 	adds.w	r3, r9, r9
 80058b8:	eb4a 040a 	adc.w	r4, sl, sl
 80058bc:	4699      	mov	r9, r3
 80058be:	46a2      	mov	sl, r4
 80058c0:	eb19 0905 	adds.w	r9, r9, r5
 80058c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058dc:	4689      	mov	r9, r1
 80058de:	4692      	mov	sl, r2
 80058e0:	eb19 0005 	adds.w	r0, r9, r5
 80058e4:	eb4a 0106 	adc.w	r1, sl, r6
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	461d      	mov	r5, r3
 80058ee:	f04f 0600 	mov.w	r6, #0
 80058f2:	196b      	adds	r3, r5, r5
 80058f4:	eb46 0406 	adc.w	r4, r6, r6
 80058f8:	461a      	mov	r2, r3
 80058fa:	4623      	mov	r3, r4
 80058fc:	f7fb f9a4 	bl	8000c48 <__aeabi_uldivmod>
 8005900:	4603      	mov	r3, r0
 8005902:	460c      	mov	r4, r1
 8005904:	461a      	mov	r2, r3
 8005906:	4b8b      	ldr	r3, [pc, #556]	; (8005b34 <UART_SetConfig+0x384>)
 8005908:	fba3 1302 	umull	r1, r3, r3, r2
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	2164      	movs	r1, #100	; 0x64
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3332      	adds	r3, #50	; 0x32
 800591a:	4a86      	ldr	r2, [pc, #536]	; (8005b34 <UART_SetConfig+0x384>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005928:	4498      	add	r8, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	461d      	mov	r5, r3
 800592e:	f04f 0600 	mov.w	r6, #0
 8005932:	46a9      	mov	r9, r5
 8005934:	46b2      	mov	sl, r6
 8005936:	eb19 0309 	adds.w	r3, r9, r9
 800593a:	eb4a 040a 	adc.w	r4, sl, sl
 800593e:	4699      	mov	r9, r3
 8005940:	46a2      	mov	sl, r4
 8005942:	eb19 0905 	adds.w	r9, r9, r5
 8005946:	eb4a 0a06 	adc.w	sl, sl, r6
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005956:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800595a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800595e:	4689      	mov	r9, r1
 8005960:	4692      	mov	sl, r2
 8005962:	eb19 0005 	adds.w	r0, r9, r5
 8005966:	eb4a 0106 	adc.w	r1, sl, r6
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	461d      	mov	r5, r3
 8005970:	f04f 0600 	mov.w	r6, #0
 8005974:	196b      	adds	r3, r5, r5
 8005976:	eb46 0406 	adc.w	r4, r6, r6
 800597a:	461a      	mov	r2, r3
 800597c:	4623      	mov	r3, r4
 800597e:	f7fb f963 	bl	8000c48 <__aeabi_uldivmod>
 8005982:	4603      	mov	r3, r0
 8005984:	460c      	mov	r4, r1
 8005986:	461a      	mov	r2, r3
 8005988:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <UART_SetConfig+0x384>)
 800598a:	fba3 1302 	umull	r1, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2164      	movs	r1, #100	; 0x64
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	3332      	adds	r3, #50	; 0x32
 800599c:	4a65      	ldr	r2, [pc, #404]	; (8005b34 <UART_SetConfig+0x384>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f003 0207 	and.w	r2, r3, #7
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4442      	add	r2, r8
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	e26f      	b.n	8005e92 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059b2:	f7fe fbc7 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 80059b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	461d      	mov	r5, r3
 80059bc:	f04f 0600 	mov.w	r6, #0
 80059c0:	46a8      	mov	r8, r5
 80059c2:	46b1      	mov	r9, r6
 80059c4:	eb18 0308 	adds.w	r3, r8, r8
 80059c8:	eb49 0409 	adc.w	r4, r9, r9
 80059cc:	4698      	mov	r8, r3
 80059ce:	46a1      	mov	r9, r4
 80059d0:	eb18 0805 	adds.w	r8, r8, r5
 80059d4:	eb49 0906 	adc.w	r9, r9, r6
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059ec:	4688      	mov	r8, r1
 80059ee:	4691      	mov	r9, r2
 80059f0:	eb18 0005 	adds.w	r0, r8, r5
 80059f4:	eb49 0106 	adc.w	r1, r9, r6
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	461d      	mov	r5, r3
 80059fe:	f04f 0600 	mov.w	r6, #0
 8005a02:	196b      	adds	r3, r5, r5
 8005a04:	eb46 0406 	adc.w	r4, r6, r6
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	f7fb f91c 	bl	8000c48 <__aeabi_uldivmod>
 8005a10:	4603      	mov	r3, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <UART_SetConfig+0x384>)
 8005a18:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	461d      	mov	r5, r3
 8005a26:	f04f 0600 	mov.w	r6, #0
 8005a2a:	46a9      	mov	r9, r5
 8005a2c:	46b2      	mov	sl, r6
 8005a2e:	eb19 0309 	adds.w	r3, r9, r9
 8005a32:	eb4a 040a 	adc.w	r4, sl, sl
 8005a36:	4699      	mov	r9, r3
 8005a38:	46a2      	mov	sl, r4
 8005a3a:	eb19 0905 	adds.w	r9, r9, r5
 8005a3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a42:	f04f 0100 	mov.w	r1, #0
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a56:	4689      	mov	r9, r1
 8005a58:	4692      	mov	sl, r2
 8005a5a:	eb19 0005 	adds.w	r0, r9, r5
 8005a5e:	eb4a 0106 	adc.w	r1, sl, r6
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	461d      	mov	r5, r3
 8005a68:	f04f 0600 	mov.w	r6, #0
 8005a6c:	196b      	adds	r3, r5, r5
 8005a6e:	eb46 0406 	adc.w	r4, r6, r6
 8005a72:	461a      	mov	r2, r3
 8005a74:	4623      	mov	r3, r4
 8005a76:	f7fb f8e7 	bl	8000c48 <__aeabi_uldivmod>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b2c      	ldr	r3, [pc, #176]	; (8005b34 <UART_SetConfig+0x384>)
 8005a82:	fba3 1302 	umull	r1, r3, r3, r2
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	2164      	movs	r1, #100	; 0x64
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	3332      	adds	r3, #50	; 0x32
 8005a94:	4a27      	ldr	r2, [pc, #156]	; (8005b34 <UART_SetConfig+0x384>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005aa2:	4498      	add	r8, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	f04f 0600 	mov.w	r6, #0
 8005aac:	46a9      	mov	r9, r5
 8005aae:	46b2      	mov	sl, r6
 8005ab0:	eb19 0309 	adds.w	r3, r9, r9
 8005ab4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ab8:	4699      	mov	r9, r3
 8005aba:	46a2      	mov	sl, r4
 8005abc:	eb19 0905 	adds.w	r9, r9, r5
 8005ac0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ac4:	f04f 0100 	mov.w	r1, #0
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ad0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ad4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ad8:	4689      	mov	r9, r1
 8005ada:	4692      	mov	sl, r2
 8005adc:	eb19 0005 	adds.w	r0, r9, r5
 8005ae0:	eb4a 0106 	adc.w	r1, sl, r6
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	461d      	mov	r5, r3
 8005aea:	f04f 0600 	mov.w	r6, #0
 8005aee:	196b      	adds	r3, r5, r5
 8005af0:	eb46 0406 	adc.w	r4, r6, r6
 8005af4:	461a      	mov	r2, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	f7fb f8a6 	bl	8000c48 <__aeabi_uldivmod>
 8005afc:	4603      	mov	r3, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <UART_SetConfig+0x384>)
 8005b04:	fba3 1302 	umull	r1, r3, r3, r2
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	2164      	movs	r1, #100	; 0x64
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3332      	adds	r3, #50	; 0x32
 8005b16:	4a07      	ldr	r2, [pc, #28]	; (8005b34 <UART_SetConfig+0x384>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	f003 0207 	and.w	r2, r3, #7
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4442      	add	r2, r8
 8005b28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b2a:	e1b2      	b.n	8005e92 <UART_SetConfig+0x6e2>
 8005b2c:	40011000 	.word	0x40011000
 8005b30:	40011400 	.word	0x40011400
 8005b34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4ad7      	ldr	r2, [pc, #860]	; (8005e9c <UART_SetConfig+0x6ec>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d005      	beq.n	8005b4e <UART_SetConfig+0x39e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4ad6      	ldr	r2, [pc, #856]	; (8005ea0 <UART_SetConfig+0x6f0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	f040 80d1 	bne.w	8005cf0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b4e:	f7fe fb0d 	bl	800416c <HAL_RCC_GetPCLK2Freq>
 8005b52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	469a      	mov	sl, r3
 8005b58:	f04f 0b00 	mov.w	fp, #0
 8005b5c:	46d0      	mov	r8, sl
 8005b5e:	46d9      	mov	r9, fp
 8005b60:	eb18 0308 	adds.w	r3, r8, r8
 8005b64:	eb49 0409 	adc.w	r4, r9, r9
 8005b68:	4698      	mov	r8, r3
 8005b6a:	46a1      	mov	r9, r4
 8005b6c:	eb18 080a 	adds.w	r8, r8, sl
 8005b70:	eb49 090b 	adc.w	r9, r9, fp
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b88:	4688      	mov	r8, r1
 8005b8a:	4691      	mov	r9, r2
 8005b8c:	eb1a 0508 	adds.w	r5, sl, r8
 8005b90:	eb4b 0609 	adc.w	r6, fp, r9
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	f04f 0400 	mov.w	r4, #0
 8005ba6:	0094      	lsls	r4, r2, #2
 8005ba8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bac:	008b      	lsls	r3, r1, #2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	f7fb f847 	bl	8000c48 <__aeabi_uldivmod>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4bb8      	ldr	r3, [pc, #736]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	469b      	mov	fp, r3
 8005bd0:	f04f 0c00 	mov.w	ip, #0
 8005bd4:	46d9      	mov	r9, fp
 8005bd6:	46e2      	mov	sl, ip
 8005bd8:	eb19 0309 	adds.w	r3, r9, r9
 8005bdc:	eb4a 040a 	adc.w	r4, sl, sl
 8005be0:	4699      	mov	r9, r3
 8005be2:	46a2      	mov	sl, r4
 8005be4:	eb19 090b 	adds.w	r9, r9, fp
 8005be8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c00:	4689      	mov	r9, r1
 8005c02:	4692      	mov	sl, r2
 8005c04:	eb1b 0509 	adds.w	r5, fp, r9
 8005c08:	eb4c 060a 	adc.w	r6, ip, sl
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	f04f 0400 	mov.w	r4, #0
 8005c1e:	0094      	lsls	r4, r2, #2
 8005c20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c24:	008b      	lsls	r3, r1, #2
 8005c26:	461a      	mov	r2, r3
 8005c28:	4623      	mov	r3, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	f7fb f80b 	bl	8000c48 <__aeabi_uldivmod>
 8005c32:	4603      	mov	r3, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	461a      	mov	r2, r3
 8005c38:	4b9a      	ldr	r3, [pc, #616]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2164      	movs	r1, #100	; 0x64
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a95      	ldr	r2, [pc, #596]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c58:	4498      	add	r8, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	469b      	mov	fp, r3
 8005c5e:	f04f 0c00 	mov.w	ip, #0
 8005c62:	46d9      	mov	r9, fp
 8005c64:	46e2      	mov	sl, ip
 8005c66:	eb19 0309 	adds.w	r3, r9, r9
 8005c6a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c6e:	4699      	mov	r9, r3
 8005c70:	46a2      	mov	sl, r4
 8005c72:	eb19 090b 	adds.w	r9, r9, fp
 8005c76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c8e:	4689      	mov	r9, r1
 8005c90:	4692      	mov	sl, r2
 8005c92:	eb1b 0509 	adds.w	r5, fp, r9
 8005c96:	eb4c 060a 	adc.w	r6, ip, sl
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	f04f 0400 	mov.w	r4, #0
 8005cac:	0094      	lsls	r4, r2, #2
 8005cae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cb2:	008b      	lsls	r3, r1, #2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	4631      	mov	r1, r6
 8005cbc:	f7fa ffc4 	bl	8000c48 <__aeabi_uldivmod>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b77      	ldr	r3, [pc, #476]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	2164      	movs	r1, #100	; 0x64
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	3332      	adds	r3, #50	; 0x32
 8005cda:	4a72      	ldr	r2, [pc, #456]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f003 020f 	and.w	r2, r3, #15
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4442      	add	r2, r8
 8005cec:	609a      	str	r2, [r3, #8]
 8005cee:	e0d0      	b.n	8005e92 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fe fa28 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	f04f 0b00 	mov.w	fp, #0
 8005cfe:	46d0      	mov	r8, sl
 8005d00:	46d9      	mov	r9, fp
 8005d02:	eb18 0308 	adds.w	r3, r8, r8
 8005d06:	eb49 0409 	adc.w	r4, r9, r9
 8005d0a:	4698      	mov	r8, r3
 8005d0c:	46a1      	mov	r9, r4
 8005d0e:	eb18 080a 	adds.w	r8, r8, sl
 8005d12:	eb49 090b 	adc.w	r9, r9, fp
 8005d16:	f04f 0100 	mov.w	r1, #0
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d2a:	4688      	mov	r8, r1
 8005d2c:	4691      	mov	r9, r2
 8005d2e:	eb1a 0508 	adds.w	r5, sl, r8
 8005d32:	eb4b 0609 	adc.w	r6, fp, r9
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	f04f 0400 	mov.w	r4, #0
 8005d48:	0094      	lsls	r4, r2, #2
 8005d4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d4e:	008b      	lsls	r3, r1, #2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4623      	mov	r3, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	4631      	mov	r1, r6
 8005d58:	f7fa ff76 	bl	8000c48 <__aeabi_uldivmod>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b50      	ldr	r3, [pc, #320]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005d64:	fba3 2302 	umull	r2, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	469b      	mov	fp, r3
 8005d72:	f04f 0c00 	mov.w	ip, #0
 8005d76:	46d9      	mov	r9, fp
 8005d78:	46e2      	mov	sl, ip
 8005d7a:	eb19 0309 	adds.w	r3, r9, r9
 8005d7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d82:	4699      	mov	r9, r3
 8005d84:	46a2      	mov	sl, r4
 8005d86:	eb19 090b 	adds.w	r9, r9, fp
 8005d8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005da2:	4689      	mov	r9, r1
 8005da4:	4692      	mov	sl, r2
 8005da6:	eb1b 0509 	adds.w	r5, fp, r9
 8005daa:	eb4c 060a 	adc.w	r6, ip, sl
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4619      	mov	r1, r3
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	f04f 0400 	mov.w	r4, #0
 8005dc0:	0094      	lsls	r4, r2, #2
 8005dc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dc6:	008b      	lsls	r3, r1, #2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4623      	mov	r3, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	4631      	mov	r1, r6
 8005dd0:	f7fa ff3a 	bl	8000c48 <__aeabi_uldivmod>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	2164      	movs	r1, #100	; 0x64
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	3332      	adds	r3, #50	; 0x32
 8005dee:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfa:	4498      	add	r8, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	469b      	mov	fp, r3
 8005e00:	f04f 0c00 	mov.w	ip, #0
 8005e04:	46d9      	mov	r9, fp
 8005e06:	46e2      	mov	sl, ip
 8005e08:	eb19 0309 	adds.w	r3, r9, r9
 8005e0c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e10:	4699      	mov	r9, r3
 8005e12:	46a2      	mov	sl, r4
 8005e14:	eb19 090b 	adds.w	r9, r9, fp
 8005e18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e30:	4689      	mov	r9, r1
 8005e32:	4692      	mov	sl, r2
 8005e34:	eb1b 0509 	adds.w	r5, fp, r9
 8005e38:	eb4c 060a 	adc.w	r6, ip, sl
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4619      	mov	r1, r3
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	f04f 0400 	mov.w	r4, #0
 8005e4e:	0094      	lsls	r4, r2, #2
 8005e50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e54:	008b      	lsls	r3, r1, #2
 8005e56:	461a      	mov	r2, r3
 8005e58:	4623      	mov	r3, r4
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	f7fa fef3 	bl	8000c48 <__aeabi_uldivmod>
 8005e62:	4603      	mov	r3, r0
 8005e64:	460c      	mov	r4, r1
 8005e66:	461a      	mov	r2, r3
 8005e68:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	2164      	movs	r1, #100	; 0x64
 8005e72:	fb01 f303 	mul.w	r3, r1, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	3332      	adds	r3, #50	; 0x32
 8005e7c:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <UART_SetConfig+0x6f4>)
 8005e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4442      	add	r2, r8
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	e7ff      	b.n	8005e92 <UART_SetConfig+0x6e2>
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	40011000 	.word	0x40011000
 8005ea0:	40011400 	.word	0x40011400
 8005ea4:	51eb851f 	.word	0x51eb851f

08005ea8 <atoi>:
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	2100      	movs	r1, #0
 8005eac:	f000 b8ce 	b.w	800604c <strtol>

08005eb0 <__errno>:
 8005eb0:	4b01      	ldr	r3, [pc, #4]	; (8005eb8 <__errno+0x8>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000030 	.word	0x20000030

08005ebc <__libc_init_array>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	4e0d      	ldr	r6, [pc, #52]	; (8005ef4 <__libc_init_array+0x38>)
 8005ec0:	4c0d      	ldr	r4, [pc, #52]	; (8005ef8 <__libc_init_array+0x3c>)
 8005ec2:	1ba4      	subs	r4, r4, r6
 8005ec4:	10a4      	asrs	r4, r4, #2
 8005ec6:	2500      	movs	r5, #0
 8005ec8:	42a5      	cmp	r5, r4
 8005eca:	d109      	bne.n	8005ee0 <__libc_init_array+0x24>
 8005ecc:	4e0b      	ldr	r6, [pc, #44]	; (8005efc <__libc_init_array+0x40>)
 8005ece:	4c0c      	ldr	r4, [pc, #48]	; (8005f00 <__libc_init_array+0x44>)
 8005ed0:	f002 fe42 	bl	8008b58 <_init>
 8005ed4:	1ba4      	subs	r4, r4, r6
 8005ed6:	10a4      	asrs	r4, r4, #2
 8005ed8:	2500      	movs	r5, #0
 8005eda:	42a5      	cmp	r5, r4
 8005edc:	d105      	bne.n	8005eea <__libc_init_array+0x2e>
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ee4:	4798      	blx	r3
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	e7ee      	b.n	8005ec8 <__libc_init_array+0xc>
 8005eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eee:	4798      	blx	r3
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	e7f2      	b.n	8005eda <__libc_init_array+0x1e>
 8005ef4:	08009138 	.word	0x08009138
 8005ef8:	08009138 	.word	0x08009138
 8005efc:	08009138 	.word	0x08009138
 8005f00:	0800913c 	.word	0x0800913c

08005f04 <memset>:
 8005f04:	4402      	add	r2, r0
 8005f06:	4603      	mov	r3, r0
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <memset+0xa>
 8005f0c:	4770      	bx	lr
 8005f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f12:	e7f9      	b.n	8005f08 <memset+0x4>

08005f14 <siprintf>:
 8005f14:	b40e      	push	{r1, r2, r3}
 8005f16:	b500      	push	{lr}
 8005f18:	b09c      	sub	sp, #112	; 0x70
 8005f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f1c:	9002      	str	r0, [sp, #8]
 8005f1e:	9006      	str	r0, [sp, #24]
 8005f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f24:	4809      	ldr	r0, [pc, #36]	; (8005f4c <siprintf+0x38>)
 8005f26:	9107      	str	r1, [sp, #28]
 8005f28:	9104      	str	r1, [sp, #16]
 8005f2a:	4909      	ldr	r1, [pc, #36]	; (8005f50 <siprintf+0x3c>)
 8005f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f30:	9105      	str	r1, [sp, #20]
 8005f32:	6800      	ldr	r0, [r0, #0]
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	a902      	add	r1, sp, #8
 8005f38:	f000 f90e 	bl	8006158 <_svfiprintf_r>
 8005f3c:	9b02      	ldr	r3, [sp, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	b01c      	add	sp, #112	; 0x70
 8005f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f48:	b003      	add	sp, #12
 8005f4a:	4770      	bx	lr
 8005f4c:	20000030 	.word	0x20000030
 8005f50:	ffff0208 	.word	0xffff0208

08005f54 <_strtol_l.isra.0>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	4692      	mov	sl, r2
 8005f5e:	461e      	mov	r6, r3
 8005f60:	460f      	mov	r7, r1
 8005f62:	463d      	mov	r5, r7
 8005f64:	9808      	ldr	r0, [sp, #32]
 8005f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f6a:	f000 f885 	bl	8006078 <__locale_ctype_ptr_l>
 8005f6e:	4420      	add	r0, r4
 8005f70:	7843      	ldrb	r3, [r0, #1]
 8005f72:	f013 0308 	ands.w	r3, r3, #8
 8005f76:	d132      	bne.n	8005fde <_strtol_l.isra.0+0x8a>
 8005f78:	2c2d      	cmp	r4, #45	; 0x2d
 8005f7a:	d132      	bne.n	8005fe2 <_strtol_l.isra.0+0x8e>
 8005f7c:	787c      	ldrb	r4, [r7, #1]
 8005f7e:	1cbd      	adds	r5, r7, #2
 8005f80:	2201      	movs	r2, #1
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d05d      	beq.n	8006042 <_strtol_l.isra.0+0xee>
 8005f86:	2e10      	cmp	r6, #16
 8005f88:	d109      	bne.n	8005f9e <_strtol_l.isra.0+0x4a>
 8005f8a:	2c30      	cmp	r4, #48	; 0x30
 8005f8c:	d107      	bne.n	8005f9e <_strtol_l.isra.0+0x4a>
 8005f8e:	782b      	ldrb	r3, [r5, #0]
 8005f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f94:	2b58      	cmp	r3, #88	; 0x58
 8005f96:	d14f      	bne.n	8006038 <_strtol_l.isra.0+0xe4>
 8005f98:	786c      	ldrb	r4, [r5, #1]
 8005f9a:	2610      	movs	r6, #16
 8005f9c:	3502      	adds	r5, #2
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	bf14      	ite	ne
 8005fa2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005fa6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005faa:	2700      	movs	r7, #0
 8005fac:	fbb1 fcf6 	udiv	ip, r1, r6
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005fb6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d817      	bhi.n	8005fee <_strtol_l.isra.0+0x9a>
 8005fbe:	461c      	mov	r4, r3
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	dd23      	ble.n	800600c <_strtol_l.isra.0+0xb8>
 8005fc4:	1c7b      	adds	r3, r7, #1
 8005fc6:	d007      	beq.n	8005fd8 <_strtol_l.isra.0+0x84>
 8005fc8:	4584      	cmp	ip, r0
 8005fca:	d31c      	bcc.n	8006006 <_strtol_l.isra.0+0xb2>
 8005fcc:	d101      	bne.n	8005fd2 <_strtol_l.isra.0+0x7e>
 8005fce:	45a6      	cmp	lr, r4
 8005fd0:	db19      	blt.n	8006006 <_strtol_l.isra.0+0xb2>
 8005fd2:	fb00 4006 	mla	r0, r0, r6, r4
 8005fd6:	2701      	movs	r7, #1
 8005fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fdc:	e7eb      	b.n	8005fb6 <_strtol_l.isra.0+0x62>
 8005fde:	462f      	mov	r7, r5
 8005fe0:	e7bf      	b.n	8005f62 <_strtol_l.isra.0+0xe>
 8005fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8005fe4:	bf04      	itt	eq
 8005fe6:	1cbd      	addeq	r5, r7, #2
 8005fe8:	787c      	ldrbeq	r4, [r7, #1]
 8005fea:	461a      	mov	r2, r3
 8005fec:	e7c9      	b.n	8005f82 <_strtol_l.isra.0+0x2e>
 8005fee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005ff2:	2b19      	cmp	r3, #25
 8005ff4:	d801      	bhi.n	8005ffa <_strtol_l.isra.0+0xa6>
 8005ff6:	3c37      	subs	r4, #55	; 0x37
 8005ff8:	e7e2      	b.n	8005fc0 <_strtol_l.isra.0+0x6c>
 8005ffa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ffe:	2b19      	cmp	r3, #25
 8006000:	d804      	bhi.n	800600c <_strtol_l.isra.0+0xb8>
 8006002:	3c57      	subs	r4, #87	; 0x57
 8006004:	e7dc      	b.n	8005fc0 <_strtol_l.isra.0+0x6c>
 8006006:	f04f 37ff 	mov.w	r7, #4294967295
 800600a:	e7e5      	b.n	8005fd8 <_strtol_l.isra.0+0x84>
 800600c:	1c7b      	adds	r3, r7, #1
 800600e:	d108      	bne.n	8006022 <_strtol_l.isra.0+0xce>
 8006010:	2322      	movs	r3, #34	; 0x22
 8006012:	f8c8 3000 	str.w	r3, [r8]
 8006016:	4608      	mov	r0, r1
 8006018:	f1ba 0f00 	cmp.w	sl, #0
 800601c:	d107      	bne.n	800602e <_strtol_l.isra.0+0xda>
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	b102      	cbz	r2, 8006026 <_strtol_l.isra.0+0xd2>
 8006024:	4240      	negs	r0, r0
 8006026:	f1ba 0f00 	cmp.w	sl, #0
 800602a:	d0f8      	beq.n	800601e <_strtol_l.isra.0+0xca>
 800602c:	b10f      	cbz	r7, 8006032 <_strtol_l.isra.0+0xde>
 800602e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006032:	f8ca 9000 	str.w	r9, [sl]
 8006036:	e7f2      	b.n	800601e <_strtol_l.isra.0+0xca>
 8006038:	2430      	movs	r4, #48	; 0x30
 800603a:	2e00      	cmp	r6, #0
 800603c:	d1af      	bne.n	8005f9e <_strtol_l.isra.0+0x4a>
 800603e:	2608      	movs	r6, #8
 8006040:	e7ad      	b.n	8005f9e <_strtol_l.isra.0+0x4a>
 8006042:	2c30      	cmp	r4, #48	; 0x30
 8006044:	d0a3      	beq.n	8005f8e <_strtol_l.isra.0+0x3a>
 8006046:	260a      	movs	r6, #10
 8006048:	e7a9      	b.n	8005f9e <_strtol_l.isra.0+0x4a>
	...

0800604c <strtol>:
 800604c:	4b08      	ldr	r3, [pc, #32]	; (8006070 <strtol+0x24>)
 800604e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006050:	681c      	ldr	r4, [r3, #0]
 8006052:	4d08      	ldr	r5, [pc, #32]	; (8006074 <strtol+0x28>)
 8006054:	6a23      	ldr	r3, [r4, #32]
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf08      	it	eq
 800605a:	462b      	moveq	r3, r5
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	460a      	mov	r2, r1
 8006062:	4601      	mov	r1, r0
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ff75 	bl	8005f54 <_strtol_l.isra.0>
 800606a:	b003      	add	sp, #12
 800606c:	bd30      	pop	{r4, r5, pc}
 800606e:	bf00      	nop
 8006070:	20000030 	.word	0x20000030
 8006074:	20000094 	.word	0x20000094

08006078 <__locale_ctype_ptr_l>:
 8006078:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800607c:	4770      	bx	lr

0800607e <__ascii_mbtowc>:
 800607e:	b082      	sub	sp, #8
 8006080:	b901      	cbnz	r1, 8006084 <__ascii_mbtowc+0x6>
 8006082:	a901      	add	r1, sp, #4
 8006084:	b142      	cbz	r2, 8006098 <__ascii_mbtowc+0x1a>
 8006086:	b14b      	cbz	r3, 800609c <__ascii_mbtowc+0x1e>
 8006088:	7813      	ldrb	r3, [r2, #0]
 800608a:	600b      	str	r3, [r1, #0]
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	1c10      	adds	r0, r2, #0
 8006090:	bf18      	it	ne
 8006092:	2001      	movne	r0, #1
 8006094:	b002      	add	sp, #8
 8006096:	4770      	bx	lr
 8006098:	4610      	mov	r0, r2
 800609a:	e7fb      	b.n	8006094 <__ascii_mbtowc+0x16>
 800609c:	f06f 0001 	mvn.w	r0, #1
 80060a0:	e7f8      	b.n	8006094 <__ascii_mbtowc+0x16>

080060a2 <__ssputs_r>:
 80060a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a6:	688e      	ldr	r6, [r1, #8]
 80060a8:	429e      	cmp	r6, r3
 80060aa:	4682      	mov	sl, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	4690      	mov	r8, r2
 80060b0:	4699      	mov	r9, r3
 80060b2:	d837      	bhi.n	8006124 <__ssputs_r+0x82>
 80060b4:	898a      	ldrh	r2, [r1, #12]
 80060b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060ba:	d031      	beq.n	8006120 <__ssputs_r+0x7e>
 80060bc:	6825      	ldr	r5, [r4, #0]
 80060be:	6909      	ldr	r1, [r1, #16]
 80060c0:	1a6f      	subs	r7, r5, r1
 80060c2:	6965      	ldr	r5, [r4, #20]
 80060c4:	2302      	movs	r3, #2
 80060c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ca:	fb95 f5f3 	sdiv	r5, r5, r3
 80060ce:	f109 0301 	add.w	r3, r9, #1
 80060d2:	443b      	add	r3, r7
 80060d4:	429d      	cmp	r5, r3
 80060d6:	bf38      	it	cc
 80060d8:	461d      	movcc	r5, r3
 80060da:	0553      	lsls	r3, r2, #21
 80060dc:	d530      	bpl.n	8006140 <__ssputs_r+0x9e>
 80060de:	4629      	mov	r1, r5
 80060e0:	f000 fb3a 	bl	8006758 <_malloc_r>
 80060e4:	4606      	mov	r6, r0
 80060e6:	b950      	cbnz	r0, 80060fe <__ssputs_r+0x5c>
 80060e8:	230c      	movs	r3, #12
 80060ea:	f8ca 3000 	str.w	r3, [sl]
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fe:	463a      	mov	r2, r7
 8006100:	6921      	ldr	r1, [r4, #16]
 8006102:	f000 fab6 	bl	8006672 <memcpy>
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	6126      	str	r6, [r4, #16]
 8006114:	6165      	str	r5, [r4, #20]
 8006116:	443e      	add	r6, r7
 8006118:	1bed      	subs	r5, r5, r7
 800611a:	6026      	str	r6, [r4, #0]
 800611c:	60a5      	str	r5, [r4, #8]
 800611e:	464e      	mov	r6, r9
 8006120:	454e      	cmp	r6, r9
 8006122:	d900      	bls.n	8006126 <__ssputs_r+0x84>
 8006124:	464e      	mov	r6, r9
 8006126:	4632      	mov	r2, r6
 8006128:	4641      	mov	r1, r8
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	f000 faac 	bl	8006688 <memmove>
 8006130:	68a3      	ldr	r3, [r4, #8]
 8006132:	1b9b      	subs	r3, r3, r6
 8006134:	60a3      	str	r3, [r4, #8]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	441e      	add	r6, r3
 800613a:	6026      	str	r6, [r4, #0]
 800613c:	2000      	movs	r0, #0
 800613e:	e7dc      	b.n	80060fa <__ssputs_r+0x58>
 8006140:	462a      	mov	r2, r5
 8006142:	f000 fb63 	bl	800680c <_realloc_r>
 8006146:	4606      	mov	r6, r0
 8006148:	2800      	cmp	r0, #0
 800614a:	d1e2      	bne.n	8006112 <__ssputs_r+0x70>
 800614c:	6921      	ldr	r1, [r4, #16]
 800614e:	4650      	mov	r0, sl
 8006150:	f000 fab4 	bl	80066bc <_free_r>
 8006154:	e7c8      	b.n	80060e8 <__ssputs_r+0x46>
	...

08006158 <_svfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	461d      	mov	r5, r3
 800615e:	898b      	ldrh	r3, [r1, #12]
 8006160:	061f      	lsls	r7, r3, #24
 8006162:	b09d      	sub	sp, #116	; 0x74
 8006164:	4680      	mov	r8, r0
 8006166:	460c      	mov	r4, r1
 8006168:	4616      	mov	r6, r2
 800616a:	d50f      	bpl.n	800618c <_svfiprintf_r+0x34>
 800616c:	690b      	ldr	r3, [r1, #16]
 800616e:	b96b      	cbnz	r3, 800618c <_svfiprintf_r+0x34>
 8006170:	2140      	movs	r1, #64	; 0x40
 8006172:	f000 faf1 	bl	8006758 <_malloc_r>
 8006176:	6020      	str	r0, [r4, #0]
 8006178:	6120      	str	r0, [r4, #16]
 800617a:	b928      	cbnz	r0, 8006188 <_svfiprintf_r+0x30>
 800617c:	230c      	movs	r3, #12
 800617e:	f8c8 3000 	str.w	r3, [r8]
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	e0c8      	b.n	800631a <_svfiprintf_r+0x1c2>
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	6163      	str	r3, [r4, #20]
 800618c:	2300      	movs	r3, #0
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	2320      	movs	r3, #32
 8006192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006196:	2330      	movs	r3, #48	; 0x30
 8006198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800619c:	9503      	str	r5, [sp, #12]
 800619e:	f04f 0b01 	mov.w	fp, #1
 80061a2:	4637      	mov	r7, r6
 80061a4:	463d      	mov	r5, r7
 80061a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061aa:	b10b      	cbz	r3, 80061b0 <_svfiprintf_r+0x58>
 80061ac:	2b25      	cmp	r3, #37	; 0x25
 80061ae:	d13e      	bne.n	800622e <_svfiprintf_r+0xd6>
 80061b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80061b4:	d00b      	beq.n	80061ce <_svfiprintf_r+0x76>
 80061b6:	4653      	mov	r3, sl
 80061b8:	4632      	mov	r2, r6
 80061ba:	4621      	mov	r1, r4
 80061bc:	4640      	mov	r0, r8
 80061be:	f7ff ff70 	bl	80060a2 <__ssputs_r>
 80061c2:	3001      	adds	r0, #1
 80061c4:	f000 80a4 	beq.w	8006310 <_svfiprintf_r+0x1b8>
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	4453      	add	r3, sl
 80061cc:	9309      	str	r3, [sp, #36]	; 0x24
 80061ce:	783b      	ldrb	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 809d 	beq.w	8006310 <_svfiprintf_r+0x1b8>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	9307      	str	r3, [sp, #28]
 80061e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061e8:	931a      	str	r3, [sp, #104]	; 0x68
 80061ea:	462f      	mov	r7, r5
 80061ec:	2205      	movs	r2, #5
 80061ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80061f2:	4850      	ldr	r0, [pc, #320]	; (8006334 <_svfiprintf_r+0x1dc>)
 80061f4:	f7f9 fff4 	bl	80001e0 <memchr>
 80061f8:	9b04      	ldr	r3, [sp, #16]
 80061fa:	b9d0      	cbnz	r0, 8006232 <_svfiprintf_r+0xda>
 80061fc:	06d9      	lsls	r1, r3, #27
 80061fe:	bf44      	itt	mi
 8006200:	2220      	movmi	r2, #32
 8006202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006206:	071a      	lsls	r2, r3, #28
 8006208:	bf44      	itt	mi
 800620a:	222b      	movmi	r2, #43	; 0x2b
 800620c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006210:	782a      	ldrb	r2, [r5, #0]
 8006212:	2a2a      	cmp	r2, #42	; 0x2a
 8006214:	d015      	beq.n	8006242 <_svfiprintf_r+0xea>
 8006216:	9a07      	ldr	r2, [sp, #28]
 8006218:	462f      	mov	r7, r5
 800621a:	2000      	movs	r0, #0
 800621c:	250a      	movs	r5, #10
 800621e:	4639      	mov	r1, r7
 8006220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006224:	3b30      	subs	r3, #48	; 0x30
 8006226:	2b09      	cmp	r3, #9
 8006228:	d94d      	bls.n	80062c6 <_svfiprintf_r+0x16e>
 800622a:	b1b8      	cbz	r0, 800625c <_svfiprintf_r+0x104>
 800622c:	e00f      	b.n	800624e <_svfiprintf_r+0xf6>
 800622e:	462f      	mov	r7, r5
 8006230:	e7b8      	b.n	80061a4 <_svfiprintf_r+0x4c>
 8006232:	4a40      	ldr	r2, [pc, #256]	; (8006334 <_svfiprintf_r+0x1dc>)
 8006234:	1a80      	subs	r0, r0, r2
 8006236:	fa0b f000 	lsl.w	r0, fp, r0
 800623a:	4318      	orrs	r0, r3
 800623c:	9004      	str	r0, [sp, #16]
 800623e:	463d      	mov	r5, r7
 8006240:	e7d3      	b.n	80061ea <_svfiprintf_r+0x92>
 8006242:	9a03      	ldr	r2, [sp, #12]
 8006244:	1d11      	adds	r1, r2, #4
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	9103      	str	r1, [sp, #12]
 800624a:	2a00      	cmp	r2, #0
 800624c:	db01      	blt.n	8006252 <_svfiprintf_r+0xfa>
 800624e:	9207      	str	r2, [sp, #28]
 8006250:	e004      	b.n	800625c <_svfiprintf_r+0x104>
 8006252:	4252      	negs	r2, r2
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	9207      	str	r2, [sp, #28]
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	783b      	ldrb	r3, [r7, #0]
 800625e:	2b2e      	cmp	r3, #46	; 0x2e
 8006260:	d10c      	bne.n	800627c <_svfiprintf_r+0x124>
 8006262:	787b      	ldrb	r3, [r7, #1]
 8006264:	2b2a      	cmp	r3, #42	; 0x2a
 8006266:	d133      	bne.n	80062d0 <_svfiprintf_r+0x178>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	9203      	str	r2, [sp, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	bfb8      	it	lt
 8006274:	f04f 33ff 	movlt.w	r3, #4294967295
 8006278:	3702      	adds	r7, #2
 800627a:	9305      	str	r3, [sp, #20]
 800627c:	4d2e      	ldr	r5, [pc, #184]	; (8006338 <_svfiprintf_r+0x1e0>)
 800627e:	7839      	ldrb	r1, [r7, #0]
 8006280:	2203      	movs	r2, #3
 8006282:	4628      	mov	r0, r5
 8006284:	f7f9 ffac 	bl	80001e0 <memchr>
 8006288:	b138      	cbz	r0, 800629a <_svfiprintf_r+0x142>
 800628a:	2340      	movs	r3, #64	; 0x40
 800628c:	1b40      	subs	r0, r0, r5
 800628e:	fa03 f000 	lsl.w	r0, r3, r0
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	4303      	orrs	r3, r0
 8006296:	3701      	adds	r7, #1
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	7839      	ldrb	r1, [r7, #0]
 800629c:	4827      	ldr	r0, [pc, #156]	; (800633c <_svfiprintf_r+0x1e4>)
 800629e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062a2:	2206      	movs	r2, #6
 80062a4:	1c7e      	adds	r6, r7, #1
 80062a6:	f7f9 ff9b 	bl	80001e0 <memchr>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d038      	beq.n	8006320 <_svfiprintf_r+0x1c8>
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <_svfiprintf_r+0x1e8>)
 80062b0:	bb13      	cbnz	r3, 80062f8 <_svfiprintf_r+0x1a0>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	3307      	adds	r3, #7
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	3308      	adds	r3, #8
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c0:	444b      	add	r3, r9
 80062c2:	9309      	str	r3, [sp, #36]	; 0x24
 80062c4:	e76d      	b.n	80061a2 <_svfiprintf_r+0x4a>
 80062c6:	fb05 3202 	mla	r2, r5, r2, r3
 80062ca:	2001      	movs	r0, #1
 80062cc:	460f      	mov	r7, r1
 80062ce:	e7a6      	b.n	800621e <_svfiprintf_r+0xc6>
 80062d0:	2300      	movs	r3, #0
 80062d2:	3701      	adds	r7, #1
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	4619      	mov	r1, r3
 80062d8:	250a      	movs	r5, #10
 80062da:	4638      	mov	r0, r7
 80062dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e0:	3a30      	subs	r2, #48	; 0x30
 80062e2:	2a09      	cmp	r2, #9
 80062e4:	d903      	bls.n	80062ee <_svfiprintf_r+0x196>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0c8      	beq.n	800627c <_svfiprintf_r+0x124>
 80062ea:	9105      	str	r1, [sp, #20]
 80062ec:	e7c6      	b.n	800627c <_svfiprintf_r+0x124>
 80062ee:	fb05 2101 	mla	r1, r5, r1, r2
 80062f2:	2301      	movs	r3, #1
 80062f4:	4607      	mov	r7, r0
 80062f6:	e7f0      	b.n	80062da <_svfiprintf_r+0x182>
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4622      	mov	r2, r4
 80062fe:	4b11      	ldr	r3, [pc, #68]	; (8006344 <_svfiprintf_r+0x1ec>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	4640      	mov	r0, r8
 8006304:	f3af 8000 	nop.w
 8006308:	f1b0 3fff 	cmp.w	r0, #4294967295
 800630c:	4681      	mov	r9, r0
 800630e:	d1d6      	bne.n	80062be <_svfiprintf_r+0x166>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	065b      	lsls	r3, r3, #25
 8006314:	f53f af35 	bmi.w	8006182 <_svfiprintf_r+0x2a>
 8006318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800631a:	b01d      	add	sp, #116	; 0x74
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	ab03      	add	r3, sp, #12
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4622      	mov	r2, r4
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <_svfiprintf_r+0x1ec>)
 8006328:	a904      	add	r1, sp, #16
 800632a:	4640      	mov	r0, r8
 800632c:	f000 f882 	bl	8006434 <_printf_i>
 8006330:	e7ea      	b.n	8006308 <_svfiprintf_r+0x1b0>
 8006332:	bf00      	nop
 8006334:	08008bae 	.word	0x08008bae
 8006338:	08008bb4 	.word	0x08008bb4
 800633c:	08008bb8 	.word	0x08008bb8
 8006340:	00000000 	.word	0x00000000
 8006344:	080060a3 	.word	0x080060a3

08006348 <_printf_common>:
 8006348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	4691      	mov	r9, r2
 800634e:	461f      	mov	r7, r3
 8006350:	688a      	ldr	r2, [r1, #8]
 8006352:	690b      	ldr	r3, [r1, #16]
 8006354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006358:	4293      	cmp	r3, r2
 800635a:	bfb8      	it	lt
 800635c:	4613      	movlt	r3, r2
 800635e:	f8c9 3000 	str.w	r3, [r9]
 8006362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006366:	4606      	mov	r6, r0
 8006368:	460c      	mov	r4, r1
 800636a:	b112      	cbz	r2, 8006372 <_printf_common+0x2a>
 800636c:	3301      	adds	r3, #1
 800636e:	f8c9 3000 	str.w	r3, [r9]
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0699      	lsls	r1, r3, #26
 8006376:	bf42      	ittt	mi
 8006378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800637c:	3302      	addmi	r3, #2
 800637e:	f8c9 3000 	strmi.w	r3, [r9]
 8006382:	6825      	ldr	r5, [r4, #0]
 8006384:	f015 0506 	ands.w	r5, r5, #6
 8006388:	d107      	bne.n	800639a <_printf_common+0x52>
 800638a:	f104 0a19 	add.w	sl, r4, #25
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	f8d9 2000 	ldr.w	r2, [r9]
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	42ab      	cmp	r3, r5
 8006398:	dc28      	bgt.n	80063ec <_printf_common+0xa4>
 800639a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	3300      	adds	r3, #0
 80063a2:	bf18      	it	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	0692      	lsls	r2, r2, #26
 80063a8:	d42d      	bmi.n	8006406 <_printf_common+0xbe>
 80063aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ae:	4639      	mov	r1, r7
 80063b0:	4630      	mov	r0, r6
 80063b2:	47c0      	blx	r8
 80063b4:	3001      	adds	r0, #1
 80063b6:	d020      	beq.n	80063fa <_printf_common+0xb2>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	68e5      	ldr	r5, [r4, #12]
 80063bc:	f8d9 2000 	ldr.w	r2, [r9]
 80063c0:	f003 0306 	and.w	r3, r3, #6
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	bf08      	it	eq
 80063c8:	1aad      	subeq	r5, r5, r2
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	6922      	ldr	r2, [r4, #16]
 80063ce:	bf0c      	ite	eq
 80063d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d4:	2500      	movne	r5, #0
 80063d6:	4293      	cmp	r3, r2
 80063d8:	bfc4      	itt	gt
 80063da:	1a9b      	subgt	r3, r3, r2
 80063dc:	18ed      	addgt	r5, r5, r3
 80063de:	f04f 0900 	mov.w	r9, #0
 80063e2:	341a      	adds	r4, #26
 80063e4:	454d      	cmp	r5, r9
 80063e6:	d11a      	bne.n	800641e <_printf_common+0xd6>
 80063e8:	2000      	movs	r0, #0
 80063ea:	e008      	b.n	80063fe <_printf_common+0xb6>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4652      	mov	r2, sl
 80063f0:	4639      	mov	r1, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	47c0      	blx	r8
 80063f6:	3001      	adds	r0, #1
 80063f8:	d103      	bne.n	8006402 <_printf_common+0xba>
 80063fa:	f04f 30ff 	mov.w	r0, #4294967295
 80063fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006402:	3501      	adds	r5, #1
 8006404:	e7c3      	b.n	800638e <_printf_common+0x46>
 8006406:	18e1      	adds	r1, r4, r3
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	2030      	movs	r0, #48	; 0x30
 800640c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006410:	4422      	add	r2, r4
 8006412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800641a:	3302      	adds	r3, #2
 800641c:	e7c5      	b.n	80063aa <_printf_common+0x62>
 800641e:	2301      	movs	r3, #1
 8006420:	4622      	mov	r2, r4
 8006422:	4639      	mov	r1, r7
 8006424:	4630      	mov	r0, r6
 8006426:	47c0      	blx	r8
 8006428:	3001      	adds	r0, #1
 800642a:	d0e6      	beq.n	80063fa <_printf_common+0xb2>
 800642c:	f109 0901 	add.w	r9, r9, #1
 8006430:	e7d8      	b.n	80063e4 <_printf_common+0x9c>
	...

08006434 <_printf_i>:
 8006434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800643c:	460c      	mov	r4, r1
 800643e:	7e09      	ldrb	r1, [r1, #24]
 8006440:	b085      	sub	sp, #20
 8006442:	296e      	cmp	r1, #110	; 0x6e
 8006444:	4617      	mov	r7, r2
 8006446:	4606      	mov	r6, r0
 8006448:	4698      	mov	r8, r3
 800644a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644c:	f000 80b3 	beq.w	80065b6 <_printf_i+0x182>
 8006450:	d822      	bhi.n	8006498 <_printf_i+0x64>
 8006452:	2963      	cmp	r1, #99	; 0x63
 8006454:	d036      	beq.n	80064c4 <_printf_i+0x90>
 8006456:	d80a      	bhi.n	800646e <_printf_i+0x3a>
 8006458:	2900      	cmp	r1, #0
 800645a:	f000 80b9 	beq.w	80065d0 <_printf_i+0x19c>
 800645e:	2958      	cmp	r1, #88	; 0x58
 8006460:	f000 8083 	beq.w	800656a <_printf_i+0x136>
 8006464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800646c:	e032      	b.n	80064d4 <_printf_i+0xa0>
 800646e:	2964      	cmp	r1, #100	; 0x64
 8006470:	d001      	beq.n	8006476 <_printf_i+0x42>
 8006472:	2969      	cmp	r1, #105	; 0x69
 8006474:	d1f6      	bne.n	8006464 <_printf_i+0x30>
 8006476:	6820      	ldr	r0, [r4, #0]
 8006478:	6813      	ldr	r3, [r2, #0]
 800647a:	0605      	lsls	r5, r0, #24
 800647c:	f103 0104 	add.w	r1, r3, #4
 8006480:	d52a      	bpl.n	80064d8 <_printf_i+0xa4>
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da03      	bge.n	8006492 <_printf_i+0x5e>
 800648a:	222d      	movs	r2, #45	; 0x2d
 800648c:	425b      	negs	r3, r3
 800648e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006492:	486f      	ldr	r0, [pc, #444]	; (8006650 <_printf_i+0x21c>)
 8006494:	220a      	movs	r2, #10
 8006496:	e039      	b.n	800650c <_printf_i+0xd8>
 8006498:	2973      	cmp	r1, #115	; 0x73
 800649a:	f000 809d 	beq.w	80065d8 <_printf_i+0x1a4>
 800649e:	d808      	bhi.n	80064b2 <_printf_i+0x7e>
 80064a0:	296f      	cmp	r1, #111	; 0x6f
 80064a2:	d020      	beq.n	80064e6 <_printf_i+0xb2>
 80064a4:	2970      	cmp	r1, #112	; 0x70
 80064a6:	d1dd      	bne.n	8006464 <_printf_i+0x30>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	f043 0320 	orr.w	r3, r3, #32
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	e003      	b.n	80064ba <_printf_i+0x86>
 80064b2:	2975      	cmp	r1, #117	; 0x75
 80064b4:	d017      	beq.n	80064e6 <_printf_i+0xb2>
 80064b6:	2978      	cmp	r1, #120	; 0x78
 80064b8:	d1d4      	bne.n	8006464 <_printf_i+0x30>
 80064ba:	2378      	movs	r3, #120	; 0x78
 80064bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064c0:	4864      	ldr	r0, [pc, #400]	; (8006654 <_printf_i+0x220>)
 80064c2:	e055      	b.n	8006570 <_printf_i+0x13c>
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	1d19      	adds	r1, r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6011      	str	r1, [r2, #0]
 80064cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d4:	2301      	movs	r3, #1
 80064d6:	e08c      	b.n	80065f2 <_printf_i+0x1be>
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6011      	str	r1, [r2, #0]
 80064dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064e0:	bf18      	it	ne
 80064e2:	b21b      	sxthne	r3, r3
 80064e4:	e7cf      	b.n	8006486 <_printf_i+0x52>
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	1d18      	adds	r0, r3, #4
 80064ec:	6010      	str	r0, [r2, #0]
 80064ee:	0628      	lsls	r0, r5, #24
 80064f0:	d501      	bpl.n	80064f6 <_printf_i+0xc2>
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	e002      	b.n	80064fc <_printf_i+0xc8>
 80064f6:	0668      	lsls	r0, r5, #25
 80064f8:	d5fb      	bpl.n	80064f2 <_printf_i+0xbe>
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	4854      	ldr	r0, [pc, #336]	; (8006650 <_printf_i+0x21c>)
 80064fe:	296f      	cmp	r1, #111	; 0x6f
 8006500:	bf14      	ite	ne
 8006502:	220a      	movne	r2, #10
 8006504:	2208      	moveq	r2, #8
 8006506:	2100      	movs	r1, #0
 8006508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800650c:	6865      	ldr	r5, [r4, #4]
 800650e:	60a5      	str	r5, [r4, #8]
 8006510:	2d00      	cmp	r5, #0
 8006512:	f2c0 8095 	blt.w	8006640 <_printf_i+0x20c>
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	f021 0104 	bic.w	r1, r1, #4
 800651c:	6021      	str	r1, [r4, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d13d      	bne.n	800659e <_printf_i+0x16a>
 8006522:	2d00      	cmp	r5, #0
 8006524:	f040 808e 	bne.w	8006644 <_printf_i+0x210>
 8006528:	4665      	mov	r5, ip
 800652a:	2a08      	cmp	r2, #8
 800652c:	d10b      	bne.n	8006546 <_printf_i+0x112>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	07db      	lsls	r3, r3, #31
 8006532:	d508      	bpl.n	8006546 <_printf_i+0x112>
 8006534:	6923      	ldr	r3, [r4, #16]
 8006536:	6862      	ldr	r2, [r4, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	bfde      	ittt	le
 800653c:	2330      	movle	r3, #48	; 0x30
 800653e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006546:	ebac 0305 	sub.w	r3, ip, r5
 800654a:	6123      	str	r3, [r4, #16]
 800654c:	f8cd 8000 	str.w	r8, [sp]
 8006550:	463b      	mov	r3, r7
 8006552:	aa03      	add	r2, sp, #12
 8006554:	4621      	mov	r1, r4
 8006556:	4630      	mov	r0, r6
 8006558:	f7ff fef6 	bl	8006348 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	d14d      	bne.n	80065fc <_printf_i+0x1c8>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b005      	add	sp, #20
 8006566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800656a:	4839      	ldr	r0, [pc, #228]	; (8006650 <_printf_i+0x21c>)
 800656c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006570:	6813      	ldr	r3, [r2, #0]
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	1d1d      	adds	r5, r3, #4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6015      	str	r5, [r2, #0]
 800657a:	060a      	lsls	r2, r1, #24
 800657c:	d50b      	bpl.n	8006596 <_printf_i+0x162>
 800657e:	07ca      	lsls	r2, r1, #31
 8006580:	bf44      	itt	mi
 8006582:	f041 0120 	orrmi.w	r1, r1, #32
 8006586:	6021      	strmi	r1, [r4, #0]
 8006588:	b91b      	cbnz	r3, 8006592 <_printf_i+0x15e>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	f022 0220 	bic.w	r2, r2, #32
 8006590:	6022      	str	r2, [r4, #0]
 8006592:	2210      	movs	r2, #16
 8006594:	e7b7      	b.n	8006506 <_printf_i+0xd2>
 8006596:	064d      	lsls	r5, r1, #25
 8006598:	bf48      	it	mi
 800659a:	b29b      	uxthmi	r3, r3
 800659c:	e7ef      	b.n	800657e <_printf_i+0x14a>
 800659e:	4665      	mov	r5, ip
 80065a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80065a4:	fb02 3311 	mls	r3, r2, r1, r3
 80065a8:	5cc3      	ldrb	r3, [r0, r3]
 80065aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065ae:	460b      	mov	r3, r1
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d1f5      	bne.n	80065a0 <_printf_i+0x16c>
 80065b4:	e7b9      	b.n	800652a <_printf_i+0xf6>
 80065b6:	6813      	ldr	r3, [r2, #0]
 80065b8:	6825      	ldr	r5, [r4, #0]
 80065ba:	6961      	ldr	r1, [r4, #20]
 80065bc:	1d18      	adds	r0, r3, #4
 80065be:	6010      	str	r0, [r2, #0]
 80065c0:	0628      	lsls	r0, r5, #24
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	d501      	bpl.n	80065ca <_printf_i+0x196>
 80065c6:	6019      	str	r1, [r3, #0]
 80065c8:	e002      	b.n	80065d0 <_printf_i+0x19c>
 80065ca:	066a      	lsls	r2, r5, #25
 80065cc:	d5fb      	bpl.n	80065c6 <_printf_i+0x192>
 80065ce:	8019      	strh	r1, [r3, #0]
 80065d0:	2300      	movs	r3, #0
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	4665      	mov	r5, ip
 80065d6:	e7b9      	b.n	800654c <_printf_i+0x118>
 80065d8:	6813      	ldr	r3, [r2, #0]
 80065da:	1d19      	adds	r1, r3, #4
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	681d      	ldr	r5, [r3, #0]
 80065e0:	6862      	ldr	r2, [r4, #4]
 80065e2:	2100      	movs	r1, #0
 80065e4:	4628      	mov	r0, r5
 80065e6:	f7f9 fdfb 	bl	80001e0 <memchr>
 80065ea:	b108      	cbz	r0, 80065f0 <_printf_i+0x1bc>
 80065ec:	1b40      	subs	r0, r0, r5
 80065ee:	6060      	str	r0, [r4, #4]
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	2300      	movs	r3, #0
 80065f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fa:	e7a7      	b.n	800654c <_printf_i+0x118>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	462a      	mov	r2, r5
 8006600:	4639      	mov	r1, r7
 8006602:	4630      	mov	r0, r6
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d0aa      	beq.n	8006560 <_printf_i+0x12c>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	079b      	lsls	r3, r3, #30
 800660e:	d413      	bmi.n	8006638 <_printf_i+0x204>
 8006610:	68e0      	ldr	r0, [r4, #12]
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	4298      	cmp	r0, r3
 8006616:	bfb8      	it	lt
 8006618:	4618      	movlt	r0, r3
 800661a:	e7a3      	b.n	8006564 <_printf_i+0x130>
 800661c:	2301      	movs	r3, #1
 800661e:	464a      	mov	r2, r9
 8006620:	4639      	mov	r1, r7
 8006622:	4630      	mov	r0, r6
 8006624:	47c0      	blx	r8
 8006626:	3001      	adds	r0, #1
 8006628:	d09a      	beq.n	8006560 <_printf_i+0x12c>
 800662a:	3501      	adds	r5, #1
 800662c:	68e3      	ldr	r3, [r4, #12]
 800662e:	9a03      	ldr	r2, [sp, #12]
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	42ab      	cmp	r3, r5
 8006634:	dcf2      	bgt.n	800661c <_printf_i+0x1e8>
 8006636:	e7eb      	b.n	8006610 <_printf_i+0x1dc>
 8006638:	2500      	movs	r5, #0
 800663a:	f104 0919 	add.w	r9, r4, #25
 800663e:	e7f5      	b.n	800662c <_printf_i+0x1f8>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1ac      	bne.n	800659e <_printf_i+0x16a>
 8006644:	7803      	ldrb	r3, [r0, #0]
 8006646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800664a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800664e:	e76c      	b.n	800652a <_printf_i+0xf6>
 8006650:	08008bbf 	.word	0x08008bbf
 8006654:	08008bd0 	.word	0x08008bd0

08006658 <__ascii_wctomb>:
 8006658:	b149      	cbz	r1, 800666e <__ascii_wctomb+0x16>
 800665a:	2aff      	cmp	r2, #255	; 0xff
 800665c:	bf85      	ittet	hi
 800665e:	238a      	movhi	r3, #138	; 0x8a
 8006660:	6003      	strhi	r3, [r0, #0]
 8006662:	700a      	strbls	r2, [r1, #0]
 8006664:	f04f 30ff 	movhi.w	r0, #4294967295
 8006668:	bf98      	it	ls
 800666a:	2001      	movls	r0, #1
 800666c:	4770      	bx	lr
 800666e:	4608      	mov	r0, r1
 8006670:	4770      	bx	lr

08006672 <memcpy>:
 8006672:	b510      	push	{r4, lr}
 8006674:	1e43      	subs	r3, r0, #1
 8006676:	440a      	add	r2, r1
 8006678:	4291      	cmp	r1, r2
 800667a:	d100      	bne.n	800667e <memcpy+0xc>
 800667c:	bd10      	pop	{r4, pc}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006686:	e7f7      	b.n	8006678 <memcpy+0x6>

08006688 <memmove>:
 8006688:	4288      	cmp	r0, r1
 800668a:	b510      	push	{r4, lr}
 800668c:	eb01 0302 	add.w	r3, r1, r2
 8006690:	d807      	bhi.n	80066a2 <memmove+0x1a>
 8006692:	1e42      	subs	r2, r0, #1
 8006694:	4299      	cmp	r1, r3
 8006696:	d00a      	beq.n	80066ae <memmove+0x26>
 8006698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066a0:	e7f8      	b.n	8006694 <memmove+0xc>
 80066a2:	4283      	cmp	r3, r0
 80066a4:	d9f5      	bls.n	8006692 <memmove+0xa>
 80066a6:	1881      	adds	r1, r0, r2
 80066a8:	1ad2      	subs	r2, r2, r3
 80066aa:	42d3      	cmn	r3, r2
 80066ac:	d100      	bne.n	80066b0 <memmove+0x28>
 80066ae:	bd10      	pop	{r4, pc}
 80066b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066b8:	e7f7      	b.n	80066aa <memmove+0x22>
	...

080066bc <_free_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d045      	beq.n	8006750 <_free_r+0x94>
 80066c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c8:	1f0c      	subs	r4, r1, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfb8      	it	lt
 80066ce:	18e4      	addlt	r4, r4, r3
 80066d0:	f000 f8d2 	bl	8006878 <__malloc_lock>
 80066d4:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <_free_r+0x98>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	4610      	mov	r0, r2
 80066da:	b933      	cbnz	r3, 80066ea <_free_r+0x2e>
 80066dc:	6063      	str	r3, [r4, #4]
 80066de:	6014      	str	r4, [r2, #0]
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e6:	f000 b8c8 	b.w	800687a <__malloc_unlock>
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	d90c      	bls.n	8006708 <_free_r+0x4c>
 80066ee:	6821      	ldr	r1, [r4, #0]
 80066f0:	1862      	adds	r2, r4, r1
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bf04      	itt	eq
 80066f6:	681a      	ldreq	r2, [r3, #0]
 80066f8:	685b      	ldreq	r3, [r3, #4]
 80066fa:	6063      	str	r3, [r4, #4]
 80066fc:	bf04      	itt	eq
 80066fe:	1852      	addeq	r2, r2, r1
 8006700:	6022      	streq	r2, [r4, #0]
 8006702:	6004      	str	r4, [r0, #0]
 8006704:	e7ec      	b.n	80066e0 <_free_r+0x24>
 8006706:	4613      	mov	r3, r2
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	b10a      	cbz	r2, 8006710 <_free_r+0x54>
 800670c:	42a2      	cmp	r2, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x4a>
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	1858      	adds	r0, r3, r1
 8006714:	42a0      	cmp	r0, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x74>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	4401      	add	r1, r0
 800671c:	1858      	adds	r0, r3, r1
 800671e:	4282      	cmp	r2, r0
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	d1dd      	bne.n	80066e0 <_free_r+0x24>
 8006724:	6810      	ldr	r0, [r2, #0]
 8006726:	6852      	ldr	r2, [r2, #4]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	4401      	add	r1, r0
 800672c:	6019      	str	r1, [r3, #0]
 800672e:	e7d7      	b.n	80066e0 <_free_r+0x24>
 8006730:	d902      	bls.n	8006738 <_free_r+0x7c>
 8006732:	230c      	movs	r3, #12
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	e7d3      	b.n	80066e0 <_free_r+0x24>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428a      	cmp	r2, r1
 800673e:	bf04      	itt	eq
 8006740:	6811      	ldreq	r1, [r2, #0]
 8006742:	6852      	ldreq	r2, [r2, #4]
 8006744:	6062      	str	r2, [r4, #4]
 8006746:	bf04      	itt	eq
 8006748:	1809      	addeq	r1, r1, r0
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	605c      	str	r4, [r3, #4]
 800674e:	e7c7      	b.n	80066e0 <_free_r+0x24>
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	20000238 	.word	0x20000238

08006758 <_malloc_r>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	1ccd      	adds	r5, r1, #3
 800675c:	f025 0503 	bic.w	r5, r5, #3
 8006760:	3508      	adds	r5, #8
 8006762:	2d0c      	cmp	r5, #12
 8006764:	bf38      	it	cc
 8006766:	250c      	movcc	r5, #12
 8006768:	2d00      	cmp	r5, #0
 800676a:	4606      	mov	r6, r0
 800676c:	db01      	blt.n	8006772 <_malloc_r+0x1a>
 800676e:	42a9      	cmp	r1, r5
 8006770:	d903      	bls.n	800677a <_malloc_r+0x22>
 8006772:	230c      	movs	r3, #12
 8006774:	6033      	str	r3, [r6, #0]
 8006776:	2000      	movs	r0, #0
 8006778:	bd70      	pop	{r4, r5, r6, pc}
 800677a:	f000 f87d 	bl	8006878 <__malloc_lock>
 800677e:	4a21      	ldr	r2, [pc, #132]	; (8006804 <_malloc_r+0xac>)
 8006780:	6814      	ldr	r4, [r2, #0]
 8006782:	4621      	mov	r1, r4
 8006784:	b991      	cbnz	r1, 80067ac <_malloc_r+0x54>
 8006786:	4c20      	ldr	r4, [pc, #128]	; (8006808 <_malloc_r+0xb0>)
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	b91b      	cbnz	r3, 8006794 <_malloc_r+0x3c>
 800678c:	4630      	mov	r0, r6
 800678e:	f000 f863 	bl	8006858 <_sbrk_r>
 8006792:	6020      	str	r0, [r4, #0]
 8006794:	4629      	mov	r1, r5
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f85e 	bl	8006858 <_sbrk_r>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d124      	bne.n	80067ea <_malloc_r+0x92>
 80067a0:	230c      	movs	r3, #12
 80067a2:	6033      	str	r3, [r6, #0]
 80067a4:	4630      	mov	r0, r6
 80067a6:	f000 f868 	bl	800687a <__malloc_unlock>
 80067aa:	e7e4      	b.n	8006776 <_malloc_r+0x1e>
 80067ac:	680b      	ldr	r3, [r1, #0]
 80067ae:	1b5b      	subs	r3, r3, r5
 80067b0:	d418      	bmi.n	80067e4 <_malloc_r+0x8c>
 80067b2:	2b0b      	cmp	r3, #11
 80067b4:	d90f      	bls.n	80067d6 <_malloc_r+0x7e>
 80067b6:	600b      	str	r3, [r1, #0]
 80067b8:	50cd      	str	r5, [r1, r3]
 80067ba:	18cc      	adds	r4, r1, r3
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f85c 	bl	800687a <__malloc_unlock>
 80067c2:	f104 000b 	add.w	r0, r4, #11
 80067c6:	1d23      	adds	r3, r4, #4
 80067c8:	f020 0007 	bic.w	r0, r0, #7
 80067cc:	1ac3      	subs	r3, r0, r3
 80067ce:	d0d3      	beq.n	8006778 <_malloc_r+0x20>
 80067d0:	425a      	negs	r2, r3
 80067d2:	50e2      	str	r2, [r4, r3]
 80067d4:	e7d0      	b.n	8006778 <_malloc_r+0x20>
 80067d6:	428c      	cmp	r4, r1
 80067d8:	684b      	ldr	r3, [r1, #4]
 80067da:	bf16      	itet	ne
 80067dc:	6063      	strne	r3, [r4, #4]
 80067de:	6013      	streq	r3, [r2, #0]
 80067e0:	460c      	movne	r4, r1
 80067e2:	e7eb      	b.n	80067bc <_malloc_r+0x64>
 80067e4:	460c      	mov	r4, r1
 80067e6:	6849      	ldr	r1, [r1, #4]
 80067e8:	e7cc      	b.n	8006784 <_malloc_r+0x2c>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d005      	beq.n	8006800 <_malloc_r+0xa8>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f82e 	bl	8006858 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d0cf      	beq.n	80067a0 <_malloc_r+0x48>
 8006800:	6025      	str	r5, [r4, #0]
 8006802:	e7db      	b.n	80067bc <_malloc_r+0x64>
 8006804:	20000238 	.word	0x20000238
 8006808:	2000023c 	.word	0x2000023c

0800680c <_realloc_r>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	4607      	mov	r7, r0
 8006810:	4614      	mov	r4, r2
 8006812:	460e      	mov	r6, r1
 8006814:	b921      	cbnz	r1, 8006820 <_realloc_r+0x14>
 8006816:	4611      	mov	r1, r2
 8006818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800681c:	f7ff bf9c 	b.w	8006758 <_malloc_r>
 8006820:	b922      	cbnz	r2, 800682c <_realloc_r+0x20>
 8006822:	f7ff ff4b 	bl	80066bc <_free_r>
 8006826:	4625      	mov	r5, r4
 8006828:	4628      	mov	r0, r5
 800682a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682c:	f000 f826 	bl	800687c <_malloc_usable_size_r>
 8006830:	42a0      	cmp	r0, r4
 8006832:	d20f      	bcs.n	8006854 <_realloc_r+0x48>
 8006834:	4621      	mov	r1, r4
 8006836:	4638      	mov	r0, r7
 8006838:	f7ff ff8e 	bl	8006758 <_malloc_r>
 800683c:	4605      	mov	r5, r0
 800683e:	2800      	cmp	r0, #0
 8006840:	d0f2      	beq.n	8006828 <_realloc_r+0x1c>
 8006842:	4631      	mov	r1, r6
 8006844:	4622      	mov	r2, r4
 8006846:	f7ff ff14 	bl	8006672 <memcpy>
 800684a:	4631      	mov	r1, r6
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ff35 	bl	80066bc <_free_r>
 8006852:	e7e9      	b.n	8006828 <_realloc_r+0x1c>
 8006854:	4635      	mov	r5, r6
 8006856:	e7e7      	b.n	8006828 <_realloc_r+0x1c>

08006858 <_sbrk_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4c06      	ldr	r4, [pc, #24]	; (8006874 <_sbrk_r+0x1c>)
 800685c:	2300      	movs	r3, #0
 800685e:	4605      	mov	r5, r0
 8006860:	4608      	mov	r0, r1
 8006862:	6023      	str	r3, [r4, #0]
 8006864:	f7fc fc86 	bl	8003174 <_sbrk>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_sbrk_r+0x1a>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	b103      	cbz	r3, 8006872 <_sbrk_r+0x1a>
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	20000454 	.word	0x20000454

08006878 <__malloc_lock>:
 8006878:	4770      	bx	lr

0800687a <__malloc_unlock>:
 800687a:	4770      	bx	lr

0800687c <_malloc_usable_size_r>:
 800687c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006880:	1f18      	subs	r0, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfbc      	itt	lt
 8006886:	580b      	ldrlt	r3, [r1, r0]
 8006888:	18c0      	addlt	r0, r0, r3
 800688a:	4770      	bx	lr

0800688c <atanf>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	ee10 5a10 	vmov	r5, s0
 8006892:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006896:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800689a:	eef0 7a40 	vmov.f32	s15, s0
 800689e:	db10      	blt.n	80068c2 <atanf+0x36>
 80068a0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80068a4:	dd04      	ble.n	80068b0 <atanf+0x24>
 80068a6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80068aa:	eeb0 0a67 	vmov.f32	s0, s15
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80069e8 <atanf+0x15c>
 80068b4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80069ec <atanf+0x160>
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	bfd8      	it	le
 80068bc:	eef0 7a47 	vmovle.f32	s15, s14
 80068c0:	e7f3      	b.n	80068aa <atanf+0x1e>
 80068c2:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <atanf+0x164>)
 80068c4:	429c      	cmp	r4, r3
 80068c6:	dc10      	bgt.n	80068ea <atanf+0x5e>
 80068c8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80068cc:	da0a      	bge.n	80068e4 <atanf+0x58>
 80068ce:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80069f4 <atanf+0x168>
 80068d2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80068d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	dce2      	bgt.n	80068aa <atanf+0x1e>
 80068e4:	f04f 33ff 	mov.w	r3, #4294967295
 80068e8:	e013      	b.n	8006912 <atanf+0x86>
 80068ea:	f000 f8e3 	bl	8006ab4 <fabsf>
 80068ee:	4b42      	ldr	r3, [pc, #264]	; (80069f8 <atanf+0x16c>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	dc4f      	bgt.n	8006994 <atanf+0x108>
 80068f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80068f8:	429c      	cmp	r4, r3
 80068fa:	dc41      	bgt.n	8006980 <atanf+0xf4>
 80068fc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006900:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006904:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006908:	2300      	movs	r3, #0
 800690a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800690e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006918:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80069fc <atanf+0x170>
 800691c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8006a00 <atanf+0x174>
 8006920:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8006a04 <atanf+0x178>
 8006924:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006928:	eee6 5a87 	vfma.f32	s11, s13, s14
 800692c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006a08 <atanf+0x17c>
 8006930:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006934:	eddf 5a35 	vldr	s11, [pc, #212]	; 8006a0c <atanf+0x180>
 8006938:	eee7 5a26 	vfma.f32	s11, s14, s13
 800693c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006a10 <atanf+0x184>
 8006940:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006944:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006a14 <atanf+0x188>
 8006948:	eee7 5a26 	vfma.f32	s11, s14, s13
 800694c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006a18 <atanf+0x18c>
 8006950:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006954:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006a1c <atanf+0x190>
 8006958:	eea5 7a26 	vfma.f32	s14, s10, s13
 800695c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8006a20 <atanf+0x194>
 8006960:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006964:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006a24 <atanf+0x198>
 8006968:	eea5 7a26 	vfma.f32	s14, s10, s13
 800696c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006970:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006978:	d121      	bne.n	80069be <atanf+0x132>
 800697a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800697e:	e794      	b.n	80068aa <atanf+0x1e>
 8006980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006984:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006988:	ee30 0a27 	vadd.f32	s0, s0, s15
 800698c:	2301      	movs	r3, #1
 800698e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006992:	e7be      	b.n	8006912 <atanf+0x86>
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <atanf+0x19c>)
 8006996:	429c      	cmp	r4, r3
 8006998:	dc0b      	bgt.n	80069b2 <atanf+0x126>
 800699a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800699e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80069a6:	2302      	movs	r3, #2
 80069a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80069ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b0:	e7af      	b.n	8006912 <atanf+0x86>
 80069b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80069b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80069ba:	2303      	movs	r3, #3
 80069bc:	e7a9      	b.n	8006912 <atanf+0x86>
 80069be:	4a1b      	ldr	r2, [pc, #108]	; (8006a2c <atanf+0x1a0>)
 80069c0:	491b      	ldr	r1, [pc, #108]	; (8006a30 <atanf+0x1a4>)
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	440b      	add	r3, r1
 80069c8:	edd3 6a00 	vldr	s13, [r3]
 80069cc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069d6:	ed92 7a00 	vldr	s14, [r2]
 80069da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069de:	bfb8      	it	lt
 80069e0:	eef1 7a67 	vneglt.f32	s15, s15
 80069e4:	e761      	b.n	80068aa <atanf+0x1e>
 80069e6:	bf00      	nop
 80069e8:	bfc90fdb 	.word	0xbfc90fdb
 80069ec:	3fc90fdb 	.word	0x3fc90fdb
 80069f0:	3edfffff 	.word	0x3edfffff
 80069f4:	7149f2ca 	.word	0x7149f2ca
 80069f8:	3f97ffff 	.word	0x3f97ffff
 80069fc:	3c8569d7 	.word	0x3c8569d7
 8006a00:	3d4bda59 	.word	0x3d4bda59
 8006a04:	bd6ef16b 	.word	0xbd6ef16b
 8006a08:	3d886b35 	.word	0x3d886b35
 8006a0c:	3dba2e6e 	.word	0x3dba2e6e
 8006a10:	3e124925 	.word	0x3e124925
 8006a14:	3eaaaaab 	.word	0x3eaaaaab
 8006a18:	bd15a221 	.word	0xbd15a221
 8006a1c:	bd9d8795 	.word	0xbd9d8795
 8006a20:	bde38e38 	.word	0xbde38e38
 8006a24:	be4ccccd 	.word	0xbe4ccccd
 8006a28:	401bffff 	.word	0x401bffff
 8006a2c:	08008ce4 	.word	0x08008ce4
 8006a30:	08008cf4 	.word	0x08008cf4

08006a34 <cosf>:
 8006a34:	ee10 3a10 	vmov	r3, s0
 8006a38:	b507      	push	{r0, r1, r2, lr}
 8006a3a:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <cosf+0x78>)
 8006a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	4293      	cmp	r3, r2
 8006a42:	dc04      	bgt.n	8006a4e <cosf+0x1a>
 8006a44:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006ab0 <cosf+0x7c>
 8006a48:	f001 fb88 	bl	800815c <__kernel_cosf>
 8006a4c:	e004      	b.n	8006a58 <cosf+0x24>
 8006a4e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006a52:	db04      	blt.n	8006a5e <cosf+0x2a>
 8006a54:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006a58:	b003      	add	sp, #12
 8006a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a5e:	4668      	mov	r0, sp
 8006a60:	f001 fa4c 	bl	8007efc <__ieee754_rem_pio2f>
 8006a64:	f000 0003 	and.w	r0, r0, #3
 8006a68:	2801      	cmp	r0, #1
 8006a6a:	d007      	beq.n	8006a7c <cosf+0x48>
 8006a6c:	2802      	cmp	r0, #2
 8006a6e:	d00e      	beq.n	8006a8e <cosf+0x5a>
 8006a70:	b9a0      	cbnz	r0, 8006a9c <cosf+0x68>
 8006a72:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a76:	ed9d 0a00 	vldr	s0, [sp]
 8006a7a:	e7e5      	b.n	8006a48 <cosf+0x14>
 8006a7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a80:	ed9d 0a00 	vldr	s0, [sp]
 8006a84:	f001 fe4a 	bl	800871c <__kernel_sinf>
 8006a88:	eeb1 0a40 	vneg.f32	s0, s0
 8006a8c:	e7e4      	b.n	8006a58 <cosf+0x24>
 8006a8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a92:	ed9d 0a00 	vldr	s0, [sp]
 8006a96:	f001 fb61 	bl	800815c <__kernel_cosf>
 8006a9a:	e7f5      	b.n	8006a88 <cosf+0x54>
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006aa2:	ed9d 0a00 	vldr	s0, [sp]
 8006aa6:	f001 fe39 	bl	800871c <__kernel_sinf>
 8006aaa:	e7d5      	b.n	8006a58 <cosf+0x24>
 8006aac:	3f490fd8 	.word	0x3f490fd8
 8006ab0:	00000000 	.word	0x00000000

08006ab4 <fabsf>:
 8006ab4:	ee10 3a10 	vmov	r3, s0
 8006ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006abc:	ee00 3a10 	vmov	s0, r3
 8006ac0:	4770      	bx	lr
	...

08006ac4 <pow>:
 8006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	ed2d 8b04 	vpush	{d8-d9}
 8006acc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006da0 <pow+0x2dc>
 8006ad0:	b08d      	sub	sp, #52	; 0x34
 8006ad2:	ec57 6b10 	vmov	r6, r7, d0
 8006ad6:	ec55 4b11 	vmov	r4, r5, d1
 8006ada:	f000 fa6d 	bl	8006fb8 <__ieee754_pow>
 8006ade:	f999 3000 	ldrsb.w	r3, [r9]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	eeb0 8a40 	vmov.f32	s16, s0
 8006aea:	eef0 8a60 	vmov.f32	s17, s1
 8006aee:	46c8      	mov	r8, r9
 8006af0:	d05f      	beq.n	8006bb2 <pow+0xee>
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7fa f817 	bl	8000b2c <__aeabi_dcmpun>
 8006afe:	4683      	mov	fp, r0
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d156      	bne.n	8006bb2 <pow+0xee>
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7fa f80e 	bl	8000b2c <__aeabi_dcmpun>
 8006b10:	9001      	str	r0, [sp, #4]
 8006b12:	b1e8      	cbz	r0, 8006b50 <pow+0x8c>
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d046      	beq.n	8006bb2 <pow+0xee>
 8006b24:	2301      	movs	r3, #1
 8006b26:	9302      	str	r3, [sp, #8]
 8006b28:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <pow+0x2c0>)
 8006b2a:	9303      	str	r3, [sp, #12]
 8006b2c:	4b96      	ldr	r3, [pc, #600]	; (8006d88 <pow+0x2c4>)
 8006b2e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006b32:	2200      	movs	r2, #0
 8006b34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b38:	9b00      	ldr	r3, [sp, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b44:	d033      	beq.n	8006bae <pow+0xea>
 8006b46:	a802      	add	r0, sp, #8
 8006b48:	f001 fe41 	bl	80087ce <matherr>
 8006b4c:	bb48      	cbnz	r0, 8006ba2 <pow+0xde>
 8006b4e:	e05d      	b.n	8006c0c <pow+0x148>
 8006b50:	f04f 0a00 	mov.w	sl, #0
 8006b54:	f04f 0b00 	mov.w	fp, #0
 8006b58:	4652      	mov	r2, sl
 8006b5a:	465b      	mov	r3, fp
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b64:	ec4b ab19 	vmov	d9, sl, fp
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d054      	beq.n	8006c16 <pow+0x152>
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	465b      	mov	r3, fp
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b78:	4680      	mov	r8, r0
 8006b7a:	b318      	cbz	r0, 8006bc4 <pow+0x100>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9302      	str	r3, [sp, #8]
 8006b80:	4b80      	ldr	r3, [pc, #512]	; (8006d84 <pow+0x2c0>)
 8006b82:	9303      	str	r3, [sp, #12]
 8006b84:	9b01      	ldr	r3, [sp, #4]
 8006b86:	930a      	str	r3, [sp, #40]	; 0x28
 8006b88:	9b00      	ldr	r3, [sp, #0]
 8006b8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b92:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0d5      	beq.n	8006b46 <pow+0x82>
 8006b9a:	4b7b      	ldr	r3, [pc, #492]	; (8006d88 <pow+0x2c4>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba4:	b11b      	cbz	r3, 8006bae <pow+0xea>
 8006ba6:	f7ff f983 	bl	8005eb0 <__errno>
 8006baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bac:	6003      	str	r3, [r0, #0]
 8006bae:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8006bb6:	eef0 0a68 	vmov.f32	s1, s17
 8006bba:	b00d      	add	sp, #52	; 0x34
 8006bbc:	ecbd 8b04 	vpop	{d8-d9}
 8006bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc4:	ec45 4b10 	vmov	d0, r4, r5
 8006bc8:	f001 fdf9 	bl	80087be <finite>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d0f0      	beq.n	8006bb2 <pow+0xee>
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	465b      	mov	r3, fp
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f7f9 ff80 	bl	8000adc <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d0e8      	beq.n	8006bb2 <pow+0xee>
 8006be0:	2301      	movs	r3, #1
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	4b67      	ldr	r3, [pc, #412]	; (8006d84 <pow+0x2c0>)
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	f999 3000 	ldrsb.w	r3, [r9]
 8006bec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006bf0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006bf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006bf8:	b913      	cbnz	r3, 8006c00 <pow+0x13c>
 8006bfa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006bfe:	e7a2      	b.n	8006b46 <pow+0x82>
 8006c00:	4962      	ldr	r1, [pc, #392]	; (8006d8c <pow+0x2c8>)
 8006c02:	2000      	movs	r0, #0
 8006c04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d19c      	bne.n	8006b46 <pow+0x82>
 8006c0c:	f7ff f950 	bl	8005eb0 <__errno>
 8006c10:	2321      	movs	r3, #33	; 0x21
 8006c12:	6003      	str	r3, [r0, #0]
 8006c14:	e7c5      	b.n	8006ba2 <pow+0xde>
 8006c16:	eeb0 0a48 	vmov.f32	s0, s16
 8006c1a:	eef0 0a68 	vmov.f32	s1, s17
 8006c1e:	f001 fdce 	bl	80087be <finite>
 8006c22:	9000      	str	r0, [sp, #0]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f040 8081 	bne.w	8006d2c <pow+0x268>
 8006c2a:	ec47 6b10 	vmov	d0, r6, r7
 8006c2e:	f001 fdc6 	bl	80087be <finite>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d07a      	beq.n	8006d2c <pow+0x268>
 8006c36:	ec45 4b10 	vmov	d0, r4, r5
 8006c3a:	f001 fdc0 	bl	80087be <finite>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d074      	beq.n	8006d2c <pow+0x268>
 8006c42:	ec53 2b18 	vmov	r2, r3, d8
 8006c46:	ee18 0a10 	vmov	r0, s16
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f7f9 ff6e 	bl	8000b2c <__aeabi_dcmpun>
 8006c50:	f999 9000 	ldrsb.w	r9, [r9]
 8006c54:	4b4b      	ldr	r3, [pc, #300]	; (8006d84 <pow+0x2c0>)
 8006c56:	b1b0      	cbz	r0, 8006c86 <pow+0x1c2>
 8006c58:	2201      	movs	r2, #1
 8006c5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	930a      	str	r3, [sp, #40]	; 0x28
 8006c62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c6a:	f1b9 0f00 	cmp.w	r9, #0
 8006c6e:	d0c4      	beq.n	8006bfa <pow+0x136>
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	4650      	mov	r0, sl
 8006c76:	4659      	mov	r1, fp
 8006c78:	f7f9 fde8 	bl	800084c <__aeabi_ddiv>
 8006c7c:	f1b9 0f02 	cmp.w	r9, #2
 8006c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c84:	e7c1      	b.n	8006c0a <pow+0x146>
 8006c86:	2203      	movs	r2, #3
 8006c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c8c:	900a      	str	r0, [sp, #40]	; 0x28
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4620      	mov	r0, r4
 8006c92:	2200      	movs	r2, #0
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <pow+0x2cc>)
 8006c96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c9e:	f7f9 fcab 	bl	80005f8 <__aeabi_dmul>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	460d      	mov	r5, r1
 8006ca6:	f1b9 0f00 	cmp.w	r9, #0
 8006caa:	d124      	bne.n	8006cf6 <pow+0x232>
 8006cac:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <pow+0x2d0>)
 8006cae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006cb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	4652      	mov	r2, sl
 8006cba:	465b      	mov	r3, fp
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 ff0d 	bl	8000adc <__aeabi_dcmplt>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d056      	beq.n	8006d74 <pow+0x2b0>
 8006cc6:	ec45 4b10 	vmov	d0, r4, r5
 8006cca:	f001 fd8d 	bl	80087e8 <rint>
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	ec51 0b10 	vmov	r0, r1, d0
 8006cd6:	f7f9 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cda:	b920      	cbnz	r0, 8006ce6 <pow+0x222>
 8006cdc:	4b2e      	ldr	r3, [pc, #184]	; (8006d98 <pow+0x2d4>)
 8006cde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006ce2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ce6:	f998 3000 	ldrsb.w	r3, [r8]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d142      	bne.n	8006d74 <pow+0x2b0>
 8006cee:	f7ff f8df 	bl	8005eb0 <__errno>
 8006cf2:	2322      	movs	r3, #34	; 0x22
 8006cf4:	e78d      	b.n	8006c12 <pow+0x14e>
 8006cf6:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <pow+0x2d8>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4652      	mov	r2, sl
 8006d02:	465b      	mov	r3, fp
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 fee9 	bl	8000adc <__aeabi_dcmplt>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d0eb      	beq.n	8006ce6 <pow+0x222>
 8006d0e:	ec45 4b10 	vmov	d0, r4, r5
 8006d12:	f001 fd69 	bl	80087e8 <rint>
 8006d16:	4622      	mov	r2, r4
 8006d18:	462b      	mov	r3, r5
 8006d1a:	ec51 0b10 	vmov	r0, r1, d0
 8006d1e:	f7f9 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d1df      	bne.n	8006ce6 <pow+0x222>
 8006d26:	2200      	movs	r2, #0
 8006d28:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <pow+0x2c8>)
 8006d2a:	e7da      	b.n	8006ce2 <pow+0x21e>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2300      	movs	r3, #0
 8006d30:	ec51 0b18 	vmov	r0, r1, d8
 8006d34:	f7f9 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f af3a 	beq.w	8006bb2 <pow+0xee>
 8006d3e:	ec47 6b10 	vmov	d0, r6, r7
 8006d42:	f001 fd3c 	bl	80087be <finite>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f43f af33 	beq.w	8006bb2 <pow+0xee>
 8006d4c:	ec45 4b10 	vmov	d0, r4, r5
 8006d50:	f001 fd35 	bl	80087be <finite>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f43f af2c 	beq.w	8006bb2 <pow+0xee>
 8006d5a:	2304      	movs	r3, #4
 8006d5c:	9302      	str	r3, [sp, #8]
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <pow+0x2c0>)
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	2300      	movs	r3, #0
 8006d64:	930a      	str	r3, [sp, #40]	; 0x28
 8006d66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d6e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006d72:	e7b8      	b.n	8006ce6 <pow+0x222>
 8006d74:	a802      	add	r0, sp, #8
 8006d76:	f001 fd2a 	bl	80087ce <matherr>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f47f af11 	bne.w	8006ba2 <pow+0xde>
 8006d80:	e7b5      	b.n	8006cee <pow+0x22a>
 8006d82:	bf00      	nop
 8006d84:	08008d04 	.word	0x08008d04
 8006d88:	3ff00000 	.word	0x3ff00000
 8006d8c:	fff00000 	.word	0xfff00000
 8006d90:	3fe00000 	.word	0x3fe00000
 8006d94:	47efffff 	.word	0x47efffff
 8006d98:	c7efffff 	.word	0xc7efffff
 8006d9c:	7ff00000 	.word	0x7ff00000
 8006da0:	20000200 	.word	0x20000200

08006da4 <sqrt>:
 8006da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006da8:	ed2d 8b02 	vpush	{d8}
 8006dac:	b08b      	sub	sp, #44	; 0x2c
 8006dae:	ec55 4b10 	vmov	r4, r5, d0
 8006db2:	f000 fe0f 	bl	80079d4 <__ieee754_sqrt>
 8006db6:	4b26      	ldr	r3, [pc, #152]	; (8006e50 <sqrt+0xac>)
 8006db8:	eeb0 8a40 	vmov.f32	s16, s0
 8006dbc:	eef0 8a60 	vmov.f32	s17, s1
 8006dc0:	f993 6000 	ldrsb.w	r6, [r3]
 8006dc4:	1c73      	adds	r3, r6, #1
 8006dc6:	d02a      	beq.n	8006e1e <sqrt+0x7a>
 8006dc8:	4622      	mov	r2, r4
 8006dca:	462b      	mov	r3, r5
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 feac 	bl	8000b2c <__aeabi_dcmpun>
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	bb10      	cbnz	r0, 8006e1e <sqrt+0x7a>
 8006dd8:	f04f 0800 	mov.w	r8, #0
 8006ddc:	f04f 0900 	mov.w	r9, #0
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 fe78 	bl	8000adc <__aeabi_dcmplt>
 8006dec:	b1b8      	cbz	r0, 8006e1e <sqrt+0x7a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <sqrt+0xb0>)
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	9708      	str	r7, [sp, #32]
 8006df8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006dfc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e00:	b9b6      	cbnz	r6, 8006e30 <sqrt+0x8c>
 8006e02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006e06:	4668      	mov	r0, sp
 8006e08:	f001 fce1 	bl	80087ce <matherr>
 8006e0c:	b1d0      	cbz	r0, 8006e44 <sqrt+0xa0>
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	b11b      	cbz	r3, 8006e1a <sqrt+0x76>
 8006e12:	f7ff f84d 	bl	8005eb0 <__errno>
 8006e16:	9b08      	ldr	r3, [sp, #32]
 8006e18:	6003      	str	r3, [r0, #0]
 8006e1a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8006e22:	eef0 0a68 	vmov.f32	s1, s17
 8006e26:	b00b      	add	sp, #44	; 0x2c
 8006e28:	ecbd 8b02 	vpop	{d8}
 8006e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	4640      	mov	r0, r8
 8006e36:	4649      	mov	r1, r9
 8006e38:	f7f9 fd08 	bl	800084c <__aeabi_ddiv>
 8006e3c:	2e02      	cmp	r6, #2
 8006e3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e42:	d1e0      	bne.n	8006e06 <sqrt+0x62>
 8006e44:	f7ff f834 	bl	8005eb0 <__errno>
 8006e48:	2321      	movs	r3, #33	; 0x21
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	e7df      	b.n	8006e0e <sqrt+0x6a>
 8006e4e:	bf00      	nop
 8006e50:	20000200 	.word	0x20000200
 8006e54:	08008d08 	.word	0x08008d08

08006e58 <acosf>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	ed2d 8b02 	vpush	{d8}
 8006e5e:	4c27      	ldr	r4, [pc, #156]	; (8006efc <acosf+0xa4>)
 8006e60:	b08a      	sub	sp, #40	; 0x28
 8006e62:	eeb0 8a40 	vmov.f32	s16, s0
 8006e66:	f000 fe65 	bl	8007b34 <__ieee754_acosf>
 8006e6a:	f994 3000 	ldrsb.w	r3, [r4]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	eef0 8a40 	vmov.f32	s17, s0
 8006e74:	d03c      	beq.n	8006ef0 <acosf+0x98>
 8006e76:	eeb4 8a48 	vcmp.f32	s16, s16
 8006e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7e:	d637      	bvs.n	8006ef0 <acosf+0x98>
 8006e80:	eeb0 0a48 	vmov.f32	s0, s16
 8006e84:	f7ff fe16 	bl	8006ab4 <fabsf>
 8006e88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e94:	dd2c      	ble.n	8006ef0 <acosf+0x98>
 8006e96:	2301      	movs	r3, #1
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <acosf+0xa8>)
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	ee18 0a10 	vmov	r0, s16
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9308      	str	r3, [sp, #32]
 8006ea6:	f7f9 fb4f 	bl	8000548 <__aeabi_f2d>
 8006eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb2:	4814      	ldr	r0, [pc, #80]	; (8006f04 <acosf+0xac>)
 8006eb4:	f001 fc90 	bl	80087d8 <nan>
 8006eb8:	f994 3000 	ldrsb.w	r3, [r4]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006ec2:	d104      	bne.n	8006ece <acosf+0x76>
 8006ec4:	f7fe fff4 	bl	8005eb0 <__errno>
 8006ec8:	2321      	movs	r3, #33	; 0x21
 8006eca:	6003      	str	r3, [r0, #0]
 8006ecc:	e004      	b.n	8006ed8 <acosf+0x80>
 8006ece:	4668      	mov	r0, sp
 8006ed0:	f001 fc7d 	bl	80087ce <matherr>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d0f5      	beq.n	8006ec4 <acosf+0x6c>
 8006ed8:	9b08      	ldr	r3, [sp, #32]
 8006eda:	b11b      	cbz	r3, 8006ee4 <acosf+0x8c>
 8006edc:	f7fe ffe8 	bl	8005eb0 <__errno>
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	6003      	str	r3, [r0, #0]
 8006ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ee8:	f7f9 fe5e 	bl	8000ba8 <__aeabi_d2f>
 8006eec:	ee08 0a90 	vmov	s17, r0
 8006ef0:	eeb0 0a68 	vmov.f32	s0, s17
 8006ef4:	b00a      	add	sp, #40	; 0x28
 8006ef6:	ecbd 8b02 	vpop	{d8}
 8006efa:	bd10      	pop	{r4, pc}
 8006efc:	20000200 	.word	0x20000200
 8006f00:	08008d0d 	.word	0x08008d0d
 8006f04:	08008bb3 	.word	0x08008bb3

08006f08 <asinf>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	ed2d 8b02 	vpush	{d8}
 8006f0e:	4c27      	ldr	r4, [pc, #156]	; (8006fac <asinf+0xa4>)
 8006f10:	b08a      	sub	sp, #40	; 0x28
 8006f12:	eeb0 8a40 	vmov.f32	s16, s0
 8006f16:	f000 ff09 	bl	8007d2c <__ieee754_asinf>
 8006f1a:	f994 3000 	ldrsb.w	r3, [r4]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	eef0 8a40 	vmov.f32	s17, s0
 8006f24:	d03c      	beq.n	8006fa0 <asinf+0x98>
 8006f26:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2e:	d637      	bvs.n	8006fa0 <asinf+0x98>
 8006f30:	eeb0 0a48 	vmov.f32	s0, s16
 8006f34:	f7ff fdbe 	bl	8006ab4 <fabsf>
 8006f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006f3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f44:	dd2c      	ble.n	8006fa0 <asinf+0x98>
 8006f46:	2301      	movs	r3, #1
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <asinf+0xa8>)
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	ee18 0a10 	vmov	r0, s16
 8006f52:	2300      	movs	r3, #0
 8006f54:	9308      	str	r3, [sp, #32]
 8006f56:	f7f9 faf7 	bl	8000548 <__aeabi_f2d>
 8006f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f62:	4814      	ldr	r0, [pc, #80]	; (8006fb4 <asinf+0xac>)
 8006f64:	f001 fc38 	bl	80087d8 <nan>
 8006f68:	f994 3000 	ldrsb.w	r3, [r4]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006f72:	d104      	bne.n	8006f7e <asinf+0x76>
 8006f74:	f7fe ff9c 	bl	8005eb0 <__errno>
 8006f78:	2321      	movs	r3, #33	; 0x21
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	e004      	b.n	8006f88 <asinf+0x80>
 8006f7e:	4668      	mov	r0, sp
 8006f80:	f001 fc25 	bl	80087ce <matherr>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d0f5      	beq.n	8006f74 <asinf+0x6c>
 8006f88:	9b08      	ldr	r3, [sp, #32]
 8006f8a:	b11b      	cbz	r3, 8006f94 <asinf+0x8c>
 8006f8c:	f7fe ff90 	bl	8005eb0 <__errno>
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	6003      	str	r3, [r0, #0]
 8006f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f98:	f7f9 fe06 	bl	8000ba8 <__aeabi_d2f>
 8006f9c:	ee08 0a90 	vmov	s17, r0
 8006fa0:	eeb0 0a68 	vmov.f32	s0, s17
 8006fa4:	b00a      	add	sp, #40	; 0x28
 8006fa6:	ecbd 8b02 	vpop	{d8}
 8006faa:	bd10      	pop	{r4, pc}
 8006fac:	20000200 	.word	0x20000200
 8006fb0:	08008d13 	.word	0x08008d13
 8006fb4:	08008bb3 	.word	0x08008bb3

08006fb8 <__ieee754_pow>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	b091      	sub	sp, #68	; 0x44
 8006fbe:	ed8d 1b00 	vstr	d1, [sp]
 8006fc2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006fc6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006fca:	ea58 0302 	orrs.w	r3, r8, r2
 8006fce:	ec57 6b10 	vmov	r6, r7, d0
 8006fd2:	f000 84be 	beq.w	8007952 <__ieee754_pow+0x99a>
 8006fd6:	4b7a      	ldr	r3, [pc, #488]	; (80071c0 <__ieee754_pow+0x208>)
 8006fd8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	463d      	mov	r5, r7
 8006fe0:	ee10 aa10 	vmov	sl, s0
 8006fe4:	dc09      	bgt.n	8006ffa <__ieee754_pow+0x42>
 8006fe6:	d103      	bne.n	8006ff0 <__ieee754_pow+0x38>
 8006fe8:	b93e      	cbnz	r6, 8006ffa <__ieee754_pow+0x42>
 8006fea:	45a0      	cmp	r8, r4
 8006fec:	dc0d      	bgt.n	800700a <__ieee754_pow+0x52>
 8006fee:	e001      	b.n	8006ff4 <__ieee754_pow+0x3c>
 8006ff0:	4598      	cmp	r8, r3
 8006ff2:	dc02      	bgt.n	8006ffa <__ieee754_pow+0x42>
 8006ff4:	4598      	cmp	r8, r3
 8006ff6:	d10e      	bne.n	8007016 <__ieee754_pow+0x5e>
 8006ff8:	b16a      	cbz	r2, 8007016 <__ieee754_pow+0x5e>
 8006ffa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006ffe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007002:	ea54 030a 	orrs.w	r3, r4, sl
 8007006:	f000 84a4 	beq.w	8007952 <__ieee754_pow+0x99a>
 800700a:	486e      	ldr	r0, [pc, #440]	; (80071c4 <__ieee754_pow+0x20c>)
 800700c:	b011      	add	sp, #68	; 0x44
 800700e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007012:	f001 bbe1 	b.w	80087d8 <nan>
 8007016:	2d00      	cmp	r5, #0
 8007018:	da53      	bge.n	80070c2 <__ieee754_pow+0x10a>
 800701a:	4b6b      	ldr	r3, [pc, #428]	; (80071c8 <__ieee754_pow+0x210>)
 800701c:	4598      	cmp	r8, r3
 800701e:	dc4d      	bgt.n	80070bc <__ieee754_pow+0x104>
 8007020:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007024:	4598      	cmp	r8, r3
 8007026:	dd4c      	ble.n	80070c2 <__ieee754_pow+0x10a>
 8007028:	ea4f 5328 	mov.w	r3, r8, asr #20
 800702c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007030:	2b14      	cmp	r3, #20
 8007032:	dd26      	ble.n	8007082 <__ieee754_pow+0xca>
 8007034:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007038:	fa22 f103 	lsr.w	r1, r2, r3
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	4293      	cmp	r3, r2
 8007042:	d13e      	bne.n	80070c2 <__ieee754_pow+0x10a>
 8007044:	f001 0101 	and.w	r1, r1, #1
 8007048:	f1c1 0b02 	rsb	fp, r1, #2
 800704c:	2a00      	cmp	r2, #0
 800704e:	d15b      	bne.n	8007108 <__ieee754_pow+0x150>
 8007050:	4b5b      	ldr	r3, [pc, #364]	; (80071c0 <__ieee754_pow+0x208>)
 8007052:	4598      	cmp	r8, r3
 8007054:	d124      	bne.n	80070a0 <__ieee754_pow+0xe8>
 8007056:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800705a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800705e:	ea53 030a 	orrs.w	r3, r3, sl
 8007062:	f000 8476 	beq.w	8007952 <__ieee754_pow+0x99a>
 8007066:	4b59      	ldr	r3, [pc, #356]	; (80071cc <__ieee754_pow+0x214>)
 8007068:	429c      	cmp	r4, r3
 800706a:	dd2d      	ble.n	80070c8 <__ieee754_pow+0x110>
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	f280 8473 	bge.w	800795a <__ieee754_pow+0x9a2>
 8007074:	2000      	movs	r0, #0
 8007076:	2100      	movs	r1, #0
 8007078:	ec41 0b10 	vmov	d0, r0, r1
 800707c:	b011      	add	sp, #68	; 0x44
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	2a00      	cmp	r2, #0
 8007084:	d13e      	bne.n	8007104 <__ieee754_pow+0x14c>
 8007086:	f1c3 0314 	rsb	r3, r3, #20
 800708a:	fa48 f103 	asr.w	r1, r8, r3
 800708e:	fa01 f303 	lsl.w	r3, r1, r3
 8007092:	4543      	cmp	r3, r8
 8007094:	f040 8469 	bne.w	800796a <__ieee754_pow+0x9b2>
 8007098:	f001 0101 	and.w	r1, r1, #1
 800709c:	f1c1 0b02 	rsb	fp, r1, #2
 80070a0:	4b4b      	ldr	r3, [pc, #300]	; (80071d0 <__ieee754_pow+0x218>)
 80070a2:	4598      	cmp	r8, r3
 80070a4:	d118      	bne.n	80070d8 <__ieee754_pow+0x120>
 80070a6:	f1b9 0f00 	cmp.w	r9, #0
 80070aa:	f280 845a 	bge.w	8007962 <__ieee754_pow+0x9aa>
 80070ae:	4948      	ldr	r1, [pc, #288]	; (80071d0 <__ieee754_pow+0x218>)
 80070b0:	4632      	mov	r2, r6
 80070b2:	463b      	mov	r3, r7
 80070b4:	2000      	movs	r0, #0
 80070b6:	f7f9 fbc9 	bl	800084c <__aeabi_ddiv>
 80070ba:	e7dd      	b.n	8007078 <__ieee754_pow+0xc0>
 80070bc:	f04f 0b02 	mov.w	fp, #2
 80070c0:	e7c4      	b.n	800704c <__ieee754_pow+0x94>
 80070c2:	f04f 0b00 	mov.w	fp, #0
 80070c6:	e7c1      	b.n	800704c <__ieee754_pow+0x94>
 80070c8:	f1b9 0f00 	cmp.w	r9, #0
 80070cc:	dad2      	bge.n	8007074 <__ieee754_pow+0xbc>
 80070ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80070d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070d6:	e7cf      	b.n	8007078 <__ieee754_pow+0xc0>
 80070d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80070dc:	d106      	bne.n	80070ec <__ieee754_pow+0x134>
 80070de:	4632      	mov	r2, r6
 80070e0:	463b      	mov	r3, r7
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	f7f9 fa87 	bl	80005f8 <__aeabi_dmul>
 80070ea:	e7c5      	b.n	8007078 <__ieee754_pow+0xc0>
 80070ec:	4b39      	ldr	r3, [pc, #228]	; (80071d4 <__ieee754_pow+0x21c>)
 80070ee:	4599      	cmp	r9, r3
 80070f0:	d10a      	bne.n	8007108 <__ieee754_pow+0x150>
 80070f2:	2d00      	cmp	r5, #0
 80070f4:	db08      	blt.n	8007108 <__ieee754_pow+0x150>
 80070f6:	ec47 6b10 	vmov	d0, r6, r7
 80070fa:	b011      	add	sp, #68	; 0x44
 80070fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	f000 bc68 	b.w	80079d4 <__ieee754_sqrt>
 8007104:	f04f 0b00 	mov.w	fp, #0
 8007108:	ec47 6b10 	vmov	d0, r6, r7
 800710c:	f001 fb4e 	bl	80087ac <fabs>
 8007110:	ec51 0b10 	vmov	r0, r1, d0
 8007114:	f1ba 0f00 	cmp.w	sl, #0
 8007118:	d127      	bne.n	800716a <__ieee754_pow+0x1b2>
 800711a:	b124      	cbz	r4, 8007126 <__ieee754_pow+0x16e>
 800711c:	4b2c      	ldr	r3, [pc, #176]	; (80071d0 <__ieee754_pow+0x218>)
 800711e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007122:	429a      	cmp	r2, r3
 8007124:	d121      	bne.n	800716a <__ieee754_pow+0x1b2>
 8007126:	f1b9 0f00 	cmp.w	r9, #0
 800712a:	da05      	bge.n	8007138 <__ieee754_pow+0x180>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	2000      	movs	r0, #0
 8007132:	4927      	ldr	r1, [pc, #156]	; (80071d0 <__ieee754_pow+0x218>)
 8007134:	f7f9 fb8a 	bl	800084c <__aeabi_ddiv>
 8007138:	2d00      	cmp	r5, #0
 800713a:	da9d      	bge.n	8007078 <__ieee754_pow+0xc0>
 800713c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007144:	ea54 030b 	orrs.w	r3, r4, fp
 8007148:	d108      	bne.n	800715c <__ieee754_pow+0x1a4>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4610      	mov	r0, r2
 8007150:	4619      	mov	r1, r3
 8007152:	f7f9 f899 	bl	8000288 <__aeabi_dsub>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	e7ac      	b.n	80070b6 <__ieee754_pow+0xfe>
 800715c:	f1bb 0f01 	cmp.w	fp, #1
 8007160:	d18a      	bne.n	8007078 <__ieee754_pow+0xc0>
 8007162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007166:	4619      	mov	r1, r3
 8007168:	e786      	b.n	8007078 <__ieee754_pow+0xc0>
 800716a:	0fed      	lsrs	r5, r5, #31
 800716c:	1e6b      	subs	r3, r5, #1
 800716e:	930d      	str	r3, [sp, #52]	; 0x34
 8007170:	ea5b 0303 	orrs.w	r3, fp, r3
 8007174:	d102      	bne.n	800717c <__ieee754_pow+0x1c4>
 8007176:	4632      	mov	r2, r6
 8007178:	463b      	mov	r3, r7
 800717a:	e7e8      	b.n	800714e <__ieee754_pow+0x196>
 800717c:	4b16      	ldr	r3, [pc, #88]	; (80071d8 <__ieee754_pow+0x220>)
 800717e:	4598      	cmp	r8, r3
 8007180:	f340 80fe 	ble.w	8007380 <__ieee754_pow+0x3c8>
 8007184:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007188:	4598      	cmp	r8, r3
 800718a:	dd0a      	ble.n	80071a2 <__ieee754_pow+0x1ea>
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <__ieee754_pow+0x214>)
 800718e:	429c      	cmp	r4, r3
 8007190:	dc0d      	bgt.n	80071ae <__ieee754_pow+0x1f6>
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	f6bf af6d 	bge.w	8007074 <__ieee754_pow+0xbc>
 800719a:	a307      	add	r3, pc, #28	; (adr r3, 80071b8 <__ieee754_pow+0x200>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	e79f      	b.n	80070e2 <__ieee754_pow+0x12a>
 80071a2:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <__ieee754_pow+0x224>)
 80071a4:	429c      	cmp	r4, r3
 80071a6:	ddf4      	ble.n	8007192 <__ieee754_pow+0x1da>
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <__ieee754_pow+0x218>)
 80071aa:	429c      	cmp	r4, r3
 80071ac:	dd18      	ble.n	80071e0 <__ieee754_pow+0x228>
 80071ae:	f1b9 0f00 	cmp.w	r9, #0
 80071b2:	dcf2      	bgt.n	800719a <__ieee754_pow+0x1e2>
 80071b4:	e75e      	b.n	8007074 <__ieee754_pow+0xbc>
 80071b6:	bf00      	nop
 80071b8:	8800759c 	.word	0x8800759c
 80071bc:	7e37e43c 	.word	0x7e37e43c
 80071c0:	7ff00000 	.word	0x7ff00000
 80071c4:	08008bb3 	.word	0x08008bb3
 80071c8:	433fffff 	.word	0x433fffff
 80071cc:	3fefffff 	.word	0x3fefffff
 80071d0:	3ff00000 	.word	0x3ff00000
 80071d4:	3fe00000 	.word	0x3fe00000
 80071d8:	41e00000 	.word	0x41e00000
 80071dc:	3feffffe 	.word	0x3feffffe
 80071e0:	2200      	movs	r2, #0
 80071e2:	4b63      	ldr	r3, [pc, #396]	; (8007370 <__ieee754_pow+0x3b8>)
 80071e4:	f7f9 f850 	bl	8000288 <__aeabi_dsub>
 80071e8:	a355      	add	r3, pc, #340	; (adr r3, 8007340 <__ieee754_pow+0x388>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	4604      	mov	r4, r0
 80071f0:	460d      	mov	r5, r1
 80071f2:	f7f9 fa01 	bl	80005f8 <__aeabi_dmul>
 80071f6:	a354      	add	r3, pc, #336	; (adr r3, 8007348 <__ieee754_pow+0x390>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	4620      	mov	r0, r4
 8007202:	4629      	mov	r1, r5
 8007204:	f7f9 f9f8 	bl	80005f8 <__aeabi_dmul>
 8007208:	2200      	movs	r2, #0
 800720a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800720e:	4b59      	ldr	r3, [pc, #356]	; (8007374 <__ieee754_pow+0x3bc>)
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	f7f9 f9f0 	bl	80005f8 <__aeabi_dmul>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	a14c      	add	r1, pc, #304	; (adr r1, 8007350 <__ieee754_pow+0x398>)
 800721e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007222:	f7f9 f831 	bl	8000288 <__aeabi_dsub>
 8007226:	4622      	mov	r2, r4
 8007228:	462b      	mov	r3, r5
 800722a:	f7f9 f9e5 	bl	80005f8 <__aeabi_dmul>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	2000      	movs	r0, #0
 8007234:	4950      	ldr	r1, [pc, #320]	; (8007378 <__ieee754_pow+0x3c0>)
 8007236:	f7f9 f827 	bl	8000288 <__aeabi_dsub>
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	4680      	mov	r8, r0
 8007240:	4689      	mov	r9, r1
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f9d7 	bl	80005f8 <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	f7f9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8007256:	a340      	add	r3, pc, #256	; (adr r3, 8007358 <__ieee754_pow+0x3a0>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f9 f9cc 	bl	80005f8 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007268:	f7f9 f80e 	bl	8000288 <__aeabi_dsub>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	4630      	mov	r0, r6
 8007276:	4639      	mov	r1, r7
 8007278:	f7f9 f808 	bl	800028c <__adddf3>
 800727c:	2000      	movs	r0, #0
 800727e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007282:	4632      	mov	r2, r6
 8007284:	463b      	mov	r3, r7
 8007286:	f7f8 ffff 	bl	8000288 <__aeabi_dsub>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	f7f8 fff9 	bl	8000288 <__aeabi_dsub>
 8007296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007298:	f10b 33ff 	add.w	r3, fp, #4294967295
 800729c:	4313      	orrs	r3, r2
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	f040 81eb 	bne.w	800767c <__ieee754_pow+0x6c4>
 80072a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007360 <__ieee754_pow+0x3a8>
 80072aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80072ae:	2400      	movs	r4, #0
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072bc:	f7f8 ffe4 	bl	8000288 <__aeabi_dsub>
 80072c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072c4:	f7f9 f998 	bl	80005f8 <__aeabi_dmul>
 80072c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f8 ffd4 	bl	800028c <__adddf3>
 80072e4:	4622      	mov	r2, r4
 80072e6:	462b      	mov	r3, r5
 80072e8:	4680      	mov	r8, r0
 80072ea:	4689      	mov	r9, r1
 80072ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f0:	f7f9 f982 	bl	80005f8 <__aeabi_dmul>
 80072f4:	460b      	mov	r3, r1
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	4602      	mov	r2, r0
 80072fc:	4649      	mov	r1, r9
 80072fe:	4640      	mov	r0, r8
 8007300:	e9cd 4500 	strd	r4, r5, [sp]
 8007304:	f7f8 ffc2 	bl	800028c <__adddf3>
 8007308:	4b1c      	ldr	r3, [pc, #112]	; (800737c <__ieee754_pow+0x3c4>)
 800730a:	4299      	cmp	r1, r3
 800730c:	4606      	mov	r6, r0
 800730e:	460f      	mov	r7, r1
 8007310:	468b      	mov	fp, r1
 8007312:	f340 82f7 	ble.w	8007904 <__ieee754_pow+0x94c>
 8007316:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800731a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800731e:	4303      	orrs	r3, r0
 8007320:	f000 81ea 	beq.w	80076f8 <__ieee754_pow+0x740>
 8007324:	a310      	add	r3, pc, #64	; (adr r3, 8007368 <__ieee754_pow+0x3b0>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732e:	f7f9 f963 	bl	80005f8 <__aeabi_dmul>
 8007332:	a30d      	add	r3, pc, #52	; (adr r3, 8007368 <__ieee754_pow+0x3b0>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	e6d5      	b.n	80070e6 <__ieee754_pow+0x12e>
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w
 8007340:	60000000 	.word	0x60000000
 8007344:	3ff71547 	.word	0x3ff71547
 8007348:	f85ddf44 	.word	0xf85ddf44
 800734c:	3e54ae0b 	.word	0x3e54ae0b
 8007350:	55555555 	.word	0x55555555
 8007354:	3fd55555 	.word	0x3fd55555
 8007358:	652b82fe 	.word	0x652b82fe
 800735c:	3ff71547 	.word	0x3ff71547
 8007360:	00000000 	.word	0x00000000
 8007364:	bff00000 	.word	0xbff00000
 8007368:	8800759c 	.word	0x8800759c
 800736c:	7e37e43c 	.word	0x7e37e43c
 8007370:	3ff00000 	.word	0x3ff00000
 8007374:	3fd00000 	.word	0x3fd00000
 8007378:	3fe00000 	.word	0x3fe00000
 800737c:	408fffff 	.word	0x408fffff
 8007380:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	da05      	bge.n	8007396 <__ieee754_pow+0x3de>
 800738a:	4bd3      	ldr	r3, [pc, #844]	; (80076d8 <__ieee754_pow+0x720>)
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007394:	460c      	mov	r4, r1
 8007396:	1523      	asrs	r3, r4, #20
 8007398:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800739c:	4413      	add	r3, r2
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	4bce      	ldr	r3, [pc, #824]	; (80076dc <__ieee754_pow+0x724>)
 80073a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80073a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80073aa:	429c      	cmp	r4, r3
 80073ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073b0:	dd08      	ble.n	80073c4 <__ieee754_pow+0x40c>
 80073b2:	4bcb      	ldr	r3, [pc, #812]	; (80076e0 <__ieee754_pow+0x728>)
 80073b4:	429c      	cmp	r4, r3
 80073b6:	f340 815e 	ble.w	8007676 <__ieee754_pow+0x6be>
 80073ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073bc:	3301      	adds	r3, #1
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
 80073c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073c4:	f04f 0a00 	mov.w	sl, #0
 80073c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80073cc:	930c      	str	r3, [sp, #48]	; 0x30
 80073ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d0:	4bc4      	ldr	r3, [pc, #784]	; (80076e4 <__ieee754_pow+0x72c>)
 80073d2:	4413      	add	r3, r2
 80073d4:	ed93 7b00 	vldr	d7, [r3]
 80073d8:	4629      	mov	r1, r5
 80073da:	ec53 2b17 	vmov	r2, r3, d7
 80073de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80073e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073e6:	f7f8 ff4f 	bl	8000288 <__aeabi_dsub>
 80073ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073f6:	f7f8 ff49 	bl	800028c <__adddf3>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	2000      	movs	r0, #0
 8007400:	49b9      	ldr	r1, [pc, #740]	; (80076e8 <__ieee754_pow+0x730>)
 8007402:	f7f9 fa23 	bl	800084c <__aeabi_ddiv>
 8007406:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4630      	mov	r0, r6
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 f8f1 	bl	80005f8 <__aeabi_dmul>
 8007416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800741a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800741e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007422:	2300      	movs	r3, #0
 8007424:	9302      	str	r3, [sp, #8]
 8007426:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800742a:	106d      	asrs	r5, r5, #1
 800742c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007430:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007434:	2200      	movs	r2, #0
 8007436:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	4614      	mov	r4, r2
 8007440:	461d      	mov	r5, r3
 8007442:	f7f9 f8d9 	bl	80005f8 <__aeabi_dmul>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4630      	mov	r0, r6
 800744c:	4639      	mov	r1, r7
 800744e:	f7f8 ff1b 	bl	8000288 <__aeabi_dsub>
 8007452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007456:	4606      	mov	r6, r0
 8007458:	460f      	mov	r7, r1
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	f7f8 ff13 	bl	8000288 <__aeabi_dsub>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800746a:	f7f8 ff0d 	bl	8000288 <__aeabi_dsub>
 800746e:	4642      	mov	r2, r8
 8007470:	464b      	mov	r3, r9
 8007472:	f7f9 f8c1 	bl	80005f8 <__aeabi_dmul>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f8 ff03 	bl	8000288 <__aeabi_dsub>
 8007482:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007486:	f7f9 f8b7 	bl	80005f8 <__aeabi_dmul>
 800748a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800748e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007492:	4610      	mov	r0, r2
 8007494:	4619      	mov	r1, r3
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	a37b      	add	r3, pc, #492	; (adr r3, 8007688 <__ieee754_pow+0x6d0>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	f7f9 f8a8 	bl	80005f8 <__aeabi_dmul>
 80074a8:	a379      	add	r3, pc, #484	; (adr r3, 8007690 <__ieee754_pow+0x6d8>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 feed 	bl	800028c <__adddf3>
 80074b2:	4622      	mov	r2, r4
 80074b4:	462b      	mov	r3, r5
 80074b6:	f7f9 f89f 	bl	80005f8 <__aeabi_dmul>
 80074ba:	a377      	add	r3, pc, #476	; (adr r3, 8007698 <__ieee754_pow+0x6e0>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 fee4 	bl	800028c <__adddf3>
 80074c4:	4622      	mov	r2, r4
 80074c6:	462b      	mov	r3, r5
 80074c8:	f7f9 f896 	bl	80005f8 <__aeabi_dmul>
 80074cc:	a374      	add	r3, pc, #464	; (adr r3, 80076a0 <__ieee754_pow+0x6e8>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f8 fedb 	bl	800028c <__adddf3>
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	a372      	add	r3, pc, #456	; (adr r3, 80076a8 <__ieee754_pow+0x6f0>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f8 fed2 	bl	800028c <__adddf3>
 80074e8:	4622      	mov	r2, r4
 80074ea:	462b      	mov	r3, r5
 80074ec:	f7f9 f884 	bl	80005f8 <__aeabi_dmul>
 80074f0:	a36f      	add	r3, pc, #444	; (adr r3, 80076b0 <__ieee754_pow+0x6f8>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f8 fec9 	bl	800028c <__adddf3>
 80074fa:	4622      	mov	r2, r4
 80074fc:	4606      	mov	r6, r0
 80074fe:	460f      	mov	r7, r1
 8007500:	462b      	mov	r3, r5
 8007502:	4620      	mov	r0, r4
 8007504:	4629      	mov	r1, r5
 8007506:	f7f9 f877 	bl	80005f8 <__aeabi_dmul>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f9 f871 	bl	80005f8 <__aeabi_dmul>
 8007516:	4642      	mov	r2, r8
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	464b      	mov	r3, r9
 800751e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007522:	f7f8 feb3 	bl	800028c <__adddf3>
 8007526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800752a:	f7f9 f865 	bl	80005f8 <__aeabi_dmul>
 800752e:	4622      	mov	r2, r4
 8007530:	462b      	mov	r3, r5
 8007532:	f7f8 feab 	bl	800028c <__adddf3>
 8007536:	4642      	mov	r2, r8
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	464b      	mov	r3, r9
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f7f9 f859 	bl	80005f8 <__aeabi_dmul>
 8007546:	2200      	movs	r2, #0
 8007548:	4b68      	ldr	r3, [pc, #416]	; (80076ec <__ieee754_pow+0x734>)
 800754a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800754e:	f7f8 fe9d 	bl	800028c <__adddf3>
 8007552:	4632      	mov	r2, r6
 8007554:	463b      	mov	r3, r7
 8007556:	f7f8 fe99 	bl	800028c <__adddf3>
 800755a:	9802      	ldr	r0, [sp, #8]
 800755c:	460d      	mov	r5, r1
 800755e:	4604      	mov	r4, r0
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4640      	mov	r0, r8
 8007566:	4649      	mov	r1, r9
 8007568:	f7f9 f846 	bl	80005f8 <__aeabi_dmul>
 800756c:	2200      	movs	r2, #0
 800756e:	4680      	mov	r8, r0
 8007570:	4689      	mov	r9, r1
 8007572:	4b5e      	ldr	r3, [pc, #376]	; (80076ec <__ieee754_pow+0x734>)
 8007574:	4620      	mov	r0, r4
 8007576:	4629      	mov	r1, r5
 8007578:	f7f8 fe86 	bl	8000288 <__aeabi_dsub>
 800757c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007580:	f7f8 fe82 	bl	8000288 <__aeabi_dsub>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f8 fe7c 	bl	8000288 <__aeabi_dsub>
 8007590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007594:	f7f9 f830 	bl	80005f8 <__aeabi_dmul>
 8007598:	4622      	mov	r2, r4
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	462b      	mov	r3, r5
 80075a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4630      	mov	r0, r6
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f8 fe6c 	bl	800028c <__adddf3>
 80075b4:	4606      	mov	r6, r0
 80075b6:	460f      	mov	r7, r1
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4640      	mov	r0, r8
 80075be:	4649      	mov	r1, r9
 80075c0:	f7f8 fe64 	bl	800028c <__adddf3>
 80075c4:	9802      	ldr	r0, [sp, #8]
 80075c6:	a33c      	add	r3, pc, #240	; (adr r3, 80076b8 <__ieee754_pow+0x700>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	4604      	mov	r4, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	f7f9 f812 	bl	80005f8 <__aeabi_dmul>
 80075d4:	4642      	mov	r2, r8
 80075d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075da:	464b      	mov	r3, r9
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 fe52 	bl	8000288 <__aeabi_dsub>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f8 fe4c 	bl	8000288 <__aeabi_dsub>
 80075f0:	a333      	add	r3, pc, #204	; (adr r3, 80076c0 <__ieee754_pow+0x708>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 ffff 	bl	80005f8 <__aeabi_dmul>
 80075fa:	a333      	add	r3, pc, #204	; (adr r3, 80076c8 <__ieee754_pow+0x710>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	4606      	mov	r6, r0
 8007602:	460f      	mov	r7, r1
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 fff6 	bl	80005f8 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f8 fe3a 	bl	800028c <__adddf3>
 8007618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800761a:	4b35      	ldr	r3, [pc, #212]	; (80076f0 <__ieee754_pow+0x738>)
 800761c:	4413      	add	r3, r2
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f8 fe33 	bl	800028c <__adddf3>
 8007626:	4604      	mov	r4, r0
 8007628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800762a:	460d      	mov	r5, r1
 800762c:	f7f8 ff7a 	bl	8000524 <__aeabi_i2d>
 8007630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007632:	4b30      	ldr	r3, [pc, #192]	; (80076f4 <__ieee754_pow+0x73c>)
 8007634:	4413      	add	r3, r2
 8007636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	4622      	mov	r2, r4
 8007640:	462b      	mov	r3, r5
 8007642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007646:	f7f8 fe21 	bl	800028c <__adddf3>
 800764a:	4642      	mov	r2, r8
 800764c:	464b      	mov	r3, r9
 800764e:	f7f8 fe1d 	bl	800028c <__adddf3>
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	f7f8 fe19 	bl	800028c <__adddf3>
 800765a:	9802      	ldr	r0, [sp, #8]
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007664:	f7f8 fe10 	bl	8000288 <__aeabi_dsub>
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	f7f8 fe0c 	bl	8000288 <__aeabi_dsub>
 8007670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007674:	e607      	b.n	8007286 <__ieee754_pow+0x2ce>
 8007676:	f04f 0a01 	mov.w	sl, #1
 800767a:	e6a5      	b.n	80073c8 <__ieee754_pow+0x410>
 800767c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80076d0 <__ieee754_pow+0x718>
 8007680:	e613      	b.n	80072aa <__ieee754_pow+0x2f2>
 8007682:	bf00      	nop
 8007684:	f3af 8000 	nop.w
 8007688:	4a454eef 	.word	0x4a454eef
 800768c:	3fca7e28 	.word	0x3fca7e28
 8007690:	93c9db65 	.word	0x93c9db65
 8007694:	3fcd864a 	.word	0x3fcd864a
 8007698:	a91d4101 	.word	0xa91d4101
 800769c:	3fd17460 	.word	0x3fd17460
 80076a0:	518f264d 	.word	0x518f264d
 80076a4:	3fd55555 	.word	0x3fd55555
 80076a8:	db6fabff 	.word	0xdb6fabff
 80076ac:	3fdb6db6 	.word	0x3fdb6db6
 80076b0:	33333303 	.word	0x33333303
 80076b4:	3fe33333 	.word	0x3fe33333
 80076b8:	e0000000 	.word	0xe0000000
 80076bc:	3feec709 	.word	0x3feec709
 80076c0:	dc3a03fd 	.word	0xdc3a03fd
 80076c4:	3feec709 	.word	0x3feec709
 80076c8:	145b01f5 	.word	0x145b01f5
 80076cc:	be3e2fe0 	.word	0xbe3e2fe0
 80076d0:	00000000 	.word	0x00000000
 80076d4:	3ff00000 	.word	0x3ff00000
 80076d8:	43400000 	.word	0x43400000
 80076dc:	0003988e 	.word	0x0003988e
 80076e0:	000bb679 	.word	0x000bb679
 80076e4:	08008d20 	.word	0x08008d20
 80076e8:	3ff00000 	.word	0x3ff00000
 80076ec:	40080000 	.word	0x40080000
 80076f0:	08008d40 	.word	0x08008d40
 80076f4:	08008d30 	.word	0x08008d30
 80076f8:	a3b4      	add	r3, pc, #720	; (adr r3, 80079cc <__ieee754_pow+0xa14>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	4640      	mov	r0, r8
 8007700:	4649      	mov	r1, r9
 8007702:	f7f8 fdc3 	bl	800028c <__adddf3>
 8007706:	4622      	mov	r2, r4
 8007708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800770c:	462b      	mov	r3, r5
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f8 fdb9 	bl	8000288 <__aeabi_dsub>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771e:	f7f9 f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 8007722:	2800      	cmp	r0, #0
 8007724:	f47f adfe 	bne.w	8007324 <__ieee754_pow+0x36c>
 8007728:	4aa3      	ldr	r2, [pc, #652]	; (80079b8 <__ieee754_pow+0xa00>)
 800772a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800772e:	4293      	cmp	r3, r2
 8007730:	f340 810a 	ble.w	8007948 <__ieee754_pow+0x990>
 8007734:	151b      	asrs	r3, r3, #20
 8007736:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800773a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800773e:	fa4a f303 	asr.w	r3, sl, r3
 8007742:	445b      	add	r3, fp
 8007744:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007748:	4e9c      	ldr	r6, [pc, #624]	; (80079bc <__ieee754_pow+0xa04>)
 800774a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800774e:	4116      	asrs	r6, r2
 8007750:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007754:	2000      	movs	r0, #0
 8007756:	ea23 0106 	bic.w	r1, r3, r6
 800775a:	f1c2 0214 	rsb	r2, r2, #20
 800775e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007762:	fa4a fa02 	asr.w	sl, sl, r2
 8007766:	f1bb 0f00 	cmp.w	fp, #0
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	bfb8      	it	lt
 8007774:	f1ca 0a00 	rsblt	sl, sl, #0
 8007778:	f7f8 fd86 	bl	8000288 <__aeabi_dsub>
 800777c:	e9cd 0100 	strd	r0, r1, [sp]
 8007780:	4642      	mov	r2, r8
 8007782:	464b      	mov	r3, r9
 8007784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007788:	f7f8 fd80 	bl	800028c <__adddf3>
 800778c:	2000      	movs	r0, #0
 800778e:	a378      	add	r3, pc, #480	; (adr r3, 8007970 <__ieee754_pow+0x9b8>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	4604      	mov	r4, r0
 8007796:	460d      	mov	r5, r1
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077a0:	4606      	mov	r6, r0
 80077a2:	460f      	mov	r7, r1
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 fd6e 	bl	8000288 <__aeabi_dsub>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4640      	mov	r0, r8
 80077b2:	4649      	mov	r1, r9
 80077b4:	f7f8 fd68 	bl	8000288 <__aeabi_dsub>
 80077b8:	a36f      	add	r3, pc, #444	; (adr r3, 8007978 <__ieee754_pow+0x9c0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 ff1b 	bl	80005f8 <__aeabi_dmul>
 80077c2:	a36f      	add	r3, pc, #444	; (adr r3, 8007980 <__ieee754_pow+0x9c8>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	4680      	mov	r8, r0
 80077ca:	4689      	mov	r9, r1
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 ff12 	bl	80005f8 <__aeabi_dmul>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f8 fd56 	bl	800028c <__adddf3>
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fd4e 	bl	800028c <__adddf3>
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	f7f8 fd46 	bl	8000288 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f8 fd40 	bl	8000288 <__aeabi_dsub>
 8007808:	4642      	mov	r2, r8
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	464b      	mov	r3, r9
 8007810:	4640      	mov	r0, r8
 8007812:	4649      	mov	r1, r9
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	a35b      	add	r3, pc, #364	; (adr r3, 8007988 <__ieee754_pow+0x9d0>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
 8007822:	f7f8 fee9 	bl	80005f8 <__aeabi_dmul>
 8007826:	a35a      	add	r3, pc, #360	; (adr r3, 8007990 <__ieee754_pow+0x9d8>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fd2c 	bl	8000288 <__aeabi_dsub>
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	f7f8 fee0 	bl	80005f8 <__aeabi_dmul>
 8007838:	a357      	add	r3, pc, #348	; (adr r3, 8007998 <__ieee754_pow+0x9e0>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fd25 	bl	800028c <__adddf3>
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	f7f8 fed7 	bl	80005f8 <__aeabi_dmul>
 800784a:	a355      	add	r3, pc, #340	; (adr r3, 80079a0 <__ieee754_pow+0x9e8>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fd1a 	bl	8000288 <__aeabi_dsub>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 fece 	bl	80005f8 <__aeabi_dmul>
 800785c:	a352      	add	r3, pc, #328	; (adr r3, 80079a8 <__ieee754_pow+0x9f0>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fd13 	bl	800028c <__adddf3>
 8007866:	4622      	mov	r2, r4
 8007868:	462b      	mov	r3, r5
 800786a:	f7f8 fec5 	bl	80005f8 <__aeabi_dmul>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f8 fd07 	bl	8000288 <__aeabi_dsub>
 800787a:	4604      	mov	r4, r0
 800787c:	460d      	mov	r5, r1
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	2200      	movs	r2, #0
 800788c:	e9cd 0100 	strd	r0, r1, [sp]
 8007890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fcf6 	bl	8000288 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078a4:	f7f8 ffd2 	bl	800084c <__aeabi_ddiv>
 80078a8:	4632      	mov	r2, r6
 80078aa:	4604      	mov	r4, r0
 80078ac:	460d      	mov	r5, r1
 80078ae:	463b      	mov	r3, r7
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	4632      	mov	r2, r6
 80078ba:	463b      	mov	r3, r7
 80078bc:	f7f8 fce6 	bl	800028c <__adddf3>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4620      	mov	r0, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7f8 fcde 	bl	8000288 <__aeabi_dsub>
 80078cc:	4642      	mov	r2, r8
 80078ce:	464b      	mov	r3, r9
 80078d0:	f7f8 fcda 	bl	8000288 <__aeabi_dsub>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	2000      	movs	r0, #0
 80078da:	4939      	ldr	r1, [pc, #228]	; (80079c0 <__ieee754_pow+0xa08>)
 80078dc:	f7f8 fcd4 	bl	8000288 <__aeabi_dsub>
 80078e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80078e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	da2f      	bge.n	800794e <__ieee754_pow+0x996>
 80078ee:	4650      	mov	r0, sl
 80078f0:	ec43 2b10 	vmov	d0, r2, r3
 80078f4:	f000 fffc 	bl	80088f0 <scalbn>
 80078f8:	ec51 0b10 	vmov	r0, r1, d0
 80078fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007900:	f7ff bbf1 	b.w	80070e6 <__ieee754_pow+0x12e>
 8007904:	4b2f      	ldr	r3, [pc, #188]	; (80079c4 <__ieee754_pow+0xa0c>)
 8007906:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800790a:	429e      	cmp	r6, r3
 800790c:	f77f af0c 	ble.w	8007728 <__ieee754_pow+0x770>
 8007910:	4b2d      	ldr	r3, [pc, #180]	; (80079c8 <__ieee754_pow+0xa10>)
 8007912:	440b      	add	r3, r1
 8007914:	4303      	orrs	r3, r0
 8007916:	d00b      	beq.n	8007930 <__ieee754_pow+0x978>
 8007918:	a325      	add	r3, pc, #148	; (adr r3, 80079b0 <__ieee754_pow+0x9f8>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007922:	f7f8 fe69 	bl	80005f8 <__aeabi_dmul>
 8007926:	a322      	add	r3, pc, #136	; (adr r3, 80079b0 <__ieee754_pow+0x9f8>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f7ff bbdb 	b.w	80070e6 <__ieee754_pow+0x12e>
 8007930:	4622      	mov	r2, r4
 8007932:	462b      	mov	r3, r5
 8007934:	f7f8 fca8 	bl	8000288 <__aeabi_dsub>
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	f7f9 f8e2 	bl	8000b04 <__aeabi_dcmpge>
 8007940:	2800      	cmp	r0, #0
 8007942:	f43f aef1 	beq.w	8007728 <__ieee754_pow+0x770>
 8007946:	e7e7      	b.n	8007918 <__ieee754_pow+0x960>
 8007948:	f04f 0a00 	mov.w	sl, #0
 800794c:	e718      	b.n	8007780 <__ieee754_pow+0x7c8>
 800794e:	4621      	mov	r1, r4
 8007950:	e7d4      	b.n	80078fc <__ieee754_pow+0x944>
 8007952:	2000      	movs	r0, #0
 8007954:	491a      	ldr	r1, [pc, #104]	; (80079c0 <__ieee754_pow+0xa08>)
 8007956:	f7ff bb8f 	b.w	8007078 <__ieee754_pow+0xc0>
 800795a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800795e:	f7ff bb8b 	b.w	8007078 <__ieee754_pow+0xc0>
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7ff bb87 	b.w	8007078 <__ieee754_pow+0xc0>
 800796a:	4693      	mov	fp, r2
 800796c:	f7ff bb98 	b.w	80070a0 <__ieee754_pow+0xe8>
 8007970:	00000000 	.word	0x00000000
 8007974:	3fe62e43 	.word	0x3fe62e43
 8007978:	fefa39ef 	.word	0xfefa39ef
 800797c:	3fe62e42 	.word	0x3fe62e42
 8007980:	0ca86c39 	.word	0x0ca86c39
 8007984:	be205c61 	.word	0xbe205c61
 8007988:	72bea4d0 	.word	0x72bea4d0
 800798c:	3e663769 	.word	0x3e663769
 8007990:	c5d26bf1 	.word	0xc5d26bf1
 8007994:	3ebbbd41 	.word	0x3ebbbd41
 8007998:	af25de2c 	.word	0xaf25de2c
 800799c:	3f11566a 	.word	0x3f11566a
 80079a0:	16bebd93 	.word	0x16bebd93
 80079a4:	3f66c16c 	.word	0x3f66c16c
 80079a8:	5555553e 	.word	0x5555553e
 80079ac:	3fc55555 	.word	0x3fc55555
 80079b0:	c2f8f359 	.word	0xc2f8f359
 80079b4:	01a56e1f 	.word	0x01a56e1f
 80079b8:	3fe00000 	.word	0x3fe00000
 80079bc:	000fffff 	.word	0x000fffff
 80079c0:	3ff00000 	.word	0x3ff00000
 80079c4:	4090cbff 	.word	0x4090cbff
 80079c8:	3f6f3400 	.word	0x3f6f3400
 80079cc:	652b82fe 	.word	0x652b82fe
 80079d0:	3c971547 	.word	0x3c971547

080079d4 <__ieee754_sqrt>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	4955      	ldr	r1, [pc, #340]	; (8007b30 <__ieee754_sqrt+0x15c>)
 80079da:	ec55 4b10 	vmov	r4, r5, d0
 80079de:	43a9      	bics	r1, r5
 80079e0:	462b      	mov	r3, r5
 80079e2:	462a      	mov	r2, r5
 80079e4:	d112      	bne.n	8007a0c <__ieee754_sqrt+0x38>
 80079e6:	ee10 2a10 	vmov	r2, s0
 80079ea:	ee10 0a10 	vmov	r0, s0
 80079ee:	4629      	mov	r1, r5
 80079f0:	f7f8 fe02 	bl	80005f8 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fc46 	bl	800028c <__adddf3>
 8007a00:	4604      	mov	r4, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	ec45 4b10 	vmov	d0, r4, r5
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	ee10 0a10 	vmov	r0, s0
 8007a12:	4621      	mov	r1, r4
 8007a14:	dc0f      	bgt.n	8007a36 <__ieee754_sqrt+0x62>
 8007a16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a1a:	4330      	orrs	r0, r6
 8007a1c:	d0f2      	beq.n	8007a04 <__ieee754_sqrt+0x30>
 8007a1e:	b155      	cbz	r5, 8007a36 <__ieee754_sqrt+0x62>
 8007a20:	ee10 2a10 	vmov	r2, s0
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fc2e 	bl	8000288 <__aeabi_dsub>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	f7f8 ff0c 	bl	800084c <__aeabi_ddiv>
 8007a34:	e7e4      	b.n	8007a00 <__ieee754_sqrt+0x2c>
 8007a36:	151b      	asrs	r3, r3, #20
 8007a38:	d073      	beq.n	8007b22 <__ieee754_sqrt+0x14e>
 8007a3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a3e:	07dd      	lsls	r5, r3, #31
 8007a40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a44:	bf48      	it	mi
 8007a46:	0fc8      	lsrmi	r0, r1, #31
 8007a48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a4c:	bf44      	itt	mi
 8007a4e:	0049      	lslmi	r1, r1, #1
 8007a50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007a54:	2500      	movs	r5, #0
 8007a56:	1058      	asrs	r0, r3, #1
 8007a58:	0fcb      	lsrs	r3, r1, #31
 8007a5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007a5e:	0049      	lsls	r1, r1, #1
 8007a60:	2316      	movs	r3, #22
 8007a62:	462c      	mov	r4, r5
 8007a64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007a68:	19a7      	adds	r7, r4, r6
 8007a6a:	4297      	cmp	r7, r2
 8007a6c:	bfde      	ittt	le
 8007a6e:	19bc      	addle	r4, r7, r6
 8007a70:	1bd2      	suble	r2, r2, r7
 8007a72:	19ad      	addle	r5, r5, r6
 8007a74:	0fcf      	lsrs	r7, r1, #31
 8007a76:	3b01      	subs	r3, #1
 8007a78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007a7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a84:	d1f0      	bne.n	8007a68 <__ieee754_sqrt+0x94>
 8007a86:	f04f 0c20 	mov.w	ip, #32
 8007a8a:	469e      	mov	lr, r3
 8007a8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a90:	42a2      	cmp	r2, r4
 8007a92:	eb06 070e 	add.w	r7, r6, lr
 8007a96:	dc02      	bgt.n	8007a9e <__ieee754_sqrt+0xca>
 8007a98:	d112      	bne.n	8007ac0 <__ieee754_sqrt+0xec>
 8007a9a:	428f      	cmp	r7, r1
 8007a9c:	d810      	bhi.n	8007ac0 <__ieee754_sqrt+0xec>
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	eb07 0e06 	add.w	lr, r7, r6
 8007aa4:	da42      	bge.n	8007b2c <__ieee754_sqrt+0x158>
 8007aa6:	f1be 0f00 	cmp.w	lr, #0
 8007aaa:	db3f      	blt.n	8007b2c <__ieee754_sqrt+0x158>
 8007aac:	f104 0801 	add.w	r8, r4, #1
 8007ab0:	1b12      	subs	r2, r2, r4
 8007ab2:	428f      	cmp	r7, r1
 8007ab4:	bf88      	it	hi
 8007ab6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007aba:	1bc9      	subs	r1, r1, r7
 8007abc:	4433      	add	r3, r6
 8007abe:	4644      	mov	r4, r8
 8007ac0:	0052      	lsls	r2, r2, #1
 8007ac2:	f1bc 0c01 	subs.w	ip, ip, #1
 8007ac6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007aca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ace:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007ad2:	d1dd      	bne.n	8007a90 <__ieee754_sqrt+0xbc>
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	d006      	beq.n	8007ae6 <__ieee754_sqrt+0x112>
 8007ad8:	1c5c      	adds	r4, r3, #1
 8007ada:	bf13      	iteet	ne
 8007adc:	3301      	addne	r3, #1
 8007ade:	3501      	addeq	r5, #1
 8007ae0:	4663      	moveq	r3, ip
 8007ae2:	f023 0301 	bicne.w	r3, r3, #1
 8007ae6:	106a      	asrs	r2, r5, #1
 8007ae8:	085b      	lsrs	r3, r3, #1
 8007aea:	07e9      	lsls	r1, r5, #31
 8007aec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007af0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007af4:	bf48      	it	mi
 8007af6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007afa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007afe:	461c      	mov	r4, r3
 8007b00:	e780      	b.n	8007a04 <__ieee754_sqrt+0x30>
 8007b02:	0aca      	lsrs	r2, r1, #11
 8007b04:	3815      	subs	r0, #21
 8007b06:	0549      	lsls	r1, r1, #21
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	d0fa      	beq.n	8007b02 <__ieee754_sqrt+0x12e>
 8007b0c:	02d6      	lsls	r6, r2, #11
 8007b0e:	d50a      	bpl.n	8007b26 <__ieee754_sqrt+0x152>
 8007b10:	f1c3 0420 	rsb	r4, r3, #32
 8007b14:	fa21 f404 	lsr.w	r4, r1, r4
 8007b18:	1e5d      	subs	r5, r3, #1
 8007b1a:	4099      	lsls	r1, r3
 8007b1c:	4322      	orrs	r2, r4
 8007b1e:	1b43      	subs	r3, r0, r5
 8007b20:	e78b      	b.n	8007a3a <__ieee754_sqrt+0x66>
 8007b22:	4618      	mov	r0, r3
 8007b24:	e7f0      	b.n	8007b08 <__ieee754_sqrt+0x134>
 8007b26:	0052      	lsls	r2, r2, #1
 8007b28:	3301      	adds	r3, #1
 8007b2a:	e7ef      	b.n	8007b0c <__ieee754_sqrt+0x138>
 8007b2c:	46a0      	mov	r8, r4
 8007b2e:	e7bf      	b.n	8007ab0 <__ieee754_sqrt+0xdc>
 8007b30:	7ff00000 	.word	0x7ff00000

08007b34 <__ieee754_acosf>:
 8007b34:	b508      	push	{r3, lr}
 8007b36:	ee10 3a10 	vmov	r3, s0
 8007b3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b3e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007b42:	ed2d 8b0c 	vpush	{d8-d13}
 8007b46:	d10a      	bne.n	8007b5e <__ieee754_acosf+0x2a>
 8007b48:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8007ce8 <__ieee754_acosf+0x1b4>
 8007b4c:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8007cec <__ieee754_acosf+0x1b8>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bfd8      	it	le
 8007b54:	eeb0 0a48 	vmovle.f32	s0, s16
 8007b58:	ecbd 8b0c 	vpop	{d8-d13}
 8007b5c:	bd08      	pop	{r3, pc}
 8007b5e:	dd04      	ble.n	8007b6a <__ieee754_acosf+0x36>
 8007b60:	ee30 8a40 	vsub.f32	s16, s0, s0
 8007b64:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007b68:	e7f6      	b.n	8007b58 <__ieee754_acosf+0x24>
 8007b6a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8007b6e:	da3e      	bge.n	8007bee <__ieee754_acosf+0xba>
 8007b70:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8007b74:	f340 80b5 	ble.w	8007ce2 <__ieee754_acosf+0x1ae>
 8007b78:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007b7c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8007cf0 <__ieee754_acosf+0x1bc>
 8007b80:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8007cf4 <__ieee754_acosf+0x1c0>
 8007b84:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8007cf8 <__ieee754_acosf+0x1c4>
 8007b88:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8007cfc <__ieee754_acosf+0x1c8>
 8007b8c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007b90:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8007d00 <__ieee754_acosf+0x1cc>
 8007b94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007b98:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8007d04 <__ieee754_acosf+0x1d0>
 8007b9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ba0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8007d08 <__ieee754_acosf+0x1d4>
 8007ba4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ba8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8007d0c <__ieee754_acosf+0x1d8>
 8007bac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007bb0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007d10 <__ieee754_acosf+0x1dc>
 8007bb4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8007bb8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8007d14 <__ieee754_acosf+0x1e0>
 8007bbc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bc0:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8007d18 <__ieee754_acosf+0x1e4>
 8007bc4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bcc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bd4:	eef0 7a66 	vmov.f32	s15, s13
 8007bd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007bdc:	eea0 8a66 	vfms.f32	s16, s0, s13
 8007be0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007be4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007d1c <__ieee754_acosf+0x1e8>
 8007be8:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007bec:	e7b4      	b.n	8007b58 <__ieee754_acosf+0x24>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	eddf da3f 	vldr	s27, [pc, #252]	; 8007cf0 <__ieee754_acosf+0x1bc>
 8007bf4:	eddf ca3f 	vldr	s25, [pc, #252]	; 8007cf4 <__ieee754_acosf+0x1c0>
 8007bf8:	ed9f ca41 	vldr	s24, [pc, #260]	; 8007d00 <__ieee754_acosf+0x1cc>
 8007bfc:	eddf ba41 	vldr	s23, [pc, #260]	; 8007d04 <__ieee754_acosf+0x1d0>
 8007c00:	ed9f ba41 	vldr	s22, [pc, #260]	; 8007d08 <__ieee754_acosf+0x1d4>
 8007c04:	eddf 8a41 	vldr	s17, [pc, #260]	; 8007d0c <__ieee754_acosf+0x1d8>
 8007c08:	ed9f da41 	vldr	s26, [pc, #260]	; 8007d10 <__ieee754_acosf+0x1dc>
 8007c0c:	eddf aa3a 	vldr	s21, [pc, #232]	; 8007cf8 <__ieee754_acosf+0x1c4>
 8007c10:	ed9f aa40 	vldr	s20, [pc, #256]	; 8007d14 <__ieee754_acosf+0x1e0>
 8007c14:	eddf 9a40 	vldr	s19, [pc, #256]	; 8007d18 <__ieee754_acosf+0x1e4>
 8007c18:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007c1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c20:	da28      	bge.n	8007c74 <__ieee754_acosf+0x140>
 8007c22:	ee30 0a09 	vadd.f32	s0, s0, s18
 8007c26:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c2a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8007c2e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8007c32:	eeac ca80 	vfma.f32	s24, s25, s0
 8007c36:	eeaa aa80 	vfma.f32	s20, s21, s0
 8007c3a:	eeec ba00 	vfma.f32	s23, s24, s0
 8007c3e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8007c42:	eeab ba80 	vfma.f32	s22, s23, s0
 8007c46:	eea9 9a80 	vfma.f32	s18, s19, s0
 8007c4a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8007c4e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8007c52:	f000 fa7f 	bl	8008154 <__ieee754_sqrtf>
 8007c56:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8007c5a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007d20 <__ieee754_acosf+0x1ec>
 8007c5e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c62:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007c66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007c6a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8007d24 <__ieee754_acosf+0x1f0>
 8007c6e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007c72:	e771      	b.n	8007b58 <__ieee754_acosf+0x24>
 8007c74:	ee39 8a40 	vsub.f32	s16, s18, s0
 8007c78:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007c80:	f000 fa68 	bl	8008154 <__ieee754_sqrtf>
 8007c84:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8007c88:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8007c8c:	eeac ca88 	vfma.f32	s24, s25, s16
 8007c90:	eeaa aa88 	vfma.f32	s20, s21, s16
 8007c94:	eeec ba08 	vfma.f32	s23, s24, s16
 8007c98:	ee10 3a10 	vmov	r3, s0
 8007c9c:	eeab ba88 	vfma.f32	s22, s23, s16
 8007ca0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007ca4:	f023 030f 	bic.w	r3, r3, #15
 8007ca8:	eeea 9a08 	vfma.f32	s19, s20, s16
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8007cb4:	eeb0 6a48 	vmov.f32	s12, s16
 8007cb8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8007cbc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8007cc0:	ee70 6a27 	vadd.f32	s13, s0, s15
 8007cc4:	ee68 8a88 	vmul.f32	s17, s17, s16
 8007cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8007ccc:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8007cd0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8007cd4:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007cd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007cdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ce0:	e73a      	b.n	8007b58 <__ieee754_acosf+0x24>
 8007ce2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007d28 <__ieee754_acosf+0x1f4>
 8007ce6:	e737      	b.n	8007b58 <__ieee754_acosf+0x24>
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	40490fdb 	.word	0x40490fdb
 8007cf0:	3811ef08 	.word	0x3811ef08
 8007cf4:	3a4f7f04 	.word	0x3a4f7f04
 8007cf8:	bf303361 	.word	0xbf303361
 8007cfc:	33a22168 	.word	0x33a22168
 8007d00:	bd241146 	.word	0xbd241146
 8007d04:	3e4e0aa8 	.word	0x3e4e0aa8
 8007d08:	bea6b090 	.word	0xbea6b090
 8007d0c:	3e2aaaab 	.word	0x3e2aaaab
 8007d10:	3d9dc62e 	.word	0x3d9dc62e
 8007d14:	4001572d 	.word	0x4001572d
 8007d18:	c019d139 	.word	0xc019d139
 8007d1c:	3fc90fda 	.word	0x3fc90fda
 8007d20:	b3a22168 	.word	0xb3a22168
 8007d24:	40490fda 	.word	0x40490fda
 8007d28:	3fc90fdb 	.word	0x3fc90fdb

08007d2c <__ieee754_asinf>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	ee10 5a10 	vmov	r5, s0
 8007d32:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007d36:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007d3a:	ed2d 8b04 	vpush	{d8-d9}
 8007d3e:	d10c      	bne.n	8007d5a <__ieee754_asinf+0x2e>
 8007d40:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8007ebc <__ieee754_asinf+0x190>
 8007d44:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007ec0 <__ieee754_asinf+0x194>
 8007d48:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007d4c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007d50:	eeb0 0a67 	vmov.f32	s0, s15
 8007d54:	ecbd 8b04 	vpop	{d8-d9}
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	dd04      	ble.n	8007d66 <__ieee754_asinf+0x3a>
 8007d5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d60:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007d64:	e7f6      	b.n	8007d54 <__ieee754_asinf+0x28>
 8007d66:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007d6a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007d6e:	da0b      	bge.n	8007d88 <__ieee754_asinf+0x5c>
 8007d70:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007d74:	da52      	bge.n	8007e1c <__ieee754_asinf+0xf0>
 8007d76:	eddf 7a53 	vldr	s15, [pc, #332]	; 8007ec4 <__ieee754_asinf+0x198>
 8007d7a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007d7e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8007d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d86:	dce5      	bgt.n	8007d54 <__ieee754_asinf+0x28>
 8007d88:	f7fe fe94 	bl	8006ab4 <fabsf>
 8007d8c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8007d90:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8007d94:	ee20 8a08 	vmul.f32	s16, s0, s16
 8007d98:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8007ec8 <__ieee754_asinf+0x19c>
 8007d9c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007ecc <__ieee754_asinf+0x1a0>
 8007da0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8007ed0 <__ieee754_asinf+0x1a4>
 8007da4:	eea8 7a27 	vfma.f32	s14, s16, s15
 8007da8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8007ed4 <__ieee754_asinf+0x1a8>
 8007dac:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007db0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007ed8 <__ieee754_asinf+0x1ac>
 8007db4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007db8:	eddf 7a48 	vldr	s15, [pc, #288]	; 8007edc <__ieee754_asinf+0x1b0>
 8007dbc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007dc0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007ee0 <__ieee754_asinf+0x1b4>
 8007dc4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8007dc8:	eddf 7a46 	vldr	s15, [pc, #280]	; 8007ee4 <__ieee754_asinf+0x1b8>
 8007dcc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8007dd0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8007ee8 <__ieee754_asinf+0x1bc>
 8007dd4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007dd8:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007eec <__ieee754_asinf+0x1c0>
 8007ddc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007de0:	eeb0 0a48 	vmov.f32	s0, s16
 8007de4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007de8:	f000 f9b4 	bl	8008154 <__ieee754_sqrtf>
 8007dec:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <__ieee754_asinf+0x1c4>)
 8007dee:	ee29 9a08 	vmul.f32	s18, s18, s16
 8007df2:	429c      	cmp	r4, r3
 8007df4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007df8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007dfc:	dd3d      	ble.n	8007e7a <__ieee754_asinf+0x14e>
 8007dfe:	eea0 0a06 	vfma.f32	s0, s0, s12
 8007e02:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8007ef4 <__ieee754_asinf+0x1c8>
 8007e06:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007e0a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8007ec0 <__ieee754_asinf+0x194>
 8007e0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e12:	2d00      	cmp	r5, #0
 8007e14:	bfd8      	it	le
 8007e16:	eeb1 0a40 	vnegle.f32	s0, s0
 8007e1a:	e79b      	b.n	8007d54 <__ieee754_asinf+0x28>
 8007e1c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007e20:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007ec8 <__ieee754_asinf+0x19c>
 8007e24:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007ecc <__ieee754_asinf+0x1a0>
 8007e28:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007ee0 <__ieee754_asinf+0x1b4>
 8007e2c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007e30:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007ed4 <__ieee754_asinf+0x1a8>
 8007e34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e38:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007ed8 <__ieee754_asinf+0x1ac>
 8007e3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e40:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007edc <__ieee754_asinf+0x1b0>
 8007e44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007ed0 <__ieee754_asinf+0x1a4>
 8007e4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e50:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007ee4 <__ieee754_asinf+0x1b8>
 8007e54:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007e58:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8007ee8 <__ieee754_asinf+0x1bc>
 8007e5c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007e60:	eddf 6a22 	vldr	s13, [pc, #136]	; 8007eec <__ieee754_asinf+0x1c0>
 8007e64:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e6c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8007e70:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8007e74:	eea0 0a27 	vfma.f32	s0, s0, s15
 8007e78:	e76c      	b.n	8007d54 <__ieee754_asinf+0x28>
 8007e7a:	ee10 3a10 	vmov	r3, s0
 8007e7e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007e82:	f023 030f 	bic.w	r3, r3, #15
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef1 6a67 	vneg.f32	s13, s15
 8007e8e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8007e92:	ee70 5a00 	vadd.f32	s11, s0, s0
 8007e96:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007e9a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007ebc <__ieee754_asinf+0x190>
 8007e9e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8007ea2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8007ef8 <__ieee754_asinf+0x1cc>
 8007ea6:	eee5 7a47 	vfms.f32	s15, s10, s14
 8007eaa:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8007eae:	eeb0 6a40 	vmov.f32	s12, s0
 8007eb2:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007eb6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007eba:	e7a8      	b.n	8007e0e <__ieee754_asinf+0xe2>
 8007ebc:	b33bbd2e 	.word	0xb33bbd2e
 8007ec0:	3fc90fdb 	.word	0x3fc90fdb
 8007ec4:	7149f2ca 	.word	0x7149f2ca
 8007ec8:	3811ef08 	.word	0x3811ef08
 8007ecc:	3a4f7f04 	.word	0x3a4f7f04
 8007ed0:	3e2aaaab 	.word	0x3e2aaaab
 8007ed4:	bd241146 	.word	0xbd241146
 8007ed8:	3e4e0aa8 	.word	0x3e4e0aa8
 8007edc:	bea6b090 	.word	0xbea6b090
 8007ee0:	3d9dc62e 	.word	0x3d9dc62e
 8007ee4:	bf303361 	.word	0xbf303361
 8007ee8:	4001572d 	.word	0x4001572d
 8007eec:	c019d139 	.word	0xc019d139
 8007ef0:	3f799999 	.word	0x3f799999
 8007ef4:	333bbd2e 	.word	0x333bbd2e
 8007ef8:	3f490fdb 	.word	0x3f490fdb

08007efc <__ieee754_rem_pio2f>:
 8007efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efe:	ee10 6a10 	vmov	r6, s0
 8007f02:	4b86      	ldr	r3, [pc, #536]	; (800811c <__ieee754_rem_pio2f+0x220>)
 8007f04:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	dc05      	bgt.n	8007f1c <__ieee754_rem_pio2f+0x20>
 8007f10:	2300      	movs	r3, #0
 8007f12:	ed85 0a00 	vstr	s0, [r5]
 8007f16:	6043      	str	r3, [r0, #4]
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e020      	b.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8007f1c:	4b80      	ldr	r3, [pc, #512]	; (8008120 <__ieee754_rem_pio2f+0x224>)
 8007f1e:	429c      	cmp	r4, r3
 8007f20:	dc38      	bgt.n	8007f94 <__ieee754_rem_pio2f+0x98>
 8007f22:	2e00      	cmp	r6, #0
 8007f24:	f024 040f 	bic.w	r4, r4, #15
 8007f28:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008124 <__ieee754_rem_pio2f+0x228>
 8007f2c:	4b7e      	ldr	r3, [pc, #504]	; (8008128 <__ieee754_rem_pio2f+0x22c>)
 8007f2e:	dd18      	ble.n	8007f62 <__ieee754_rem_pio2f+0x66>
 8007f30:	429c      	cmp	r4, r3
 8007f32:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007f36:	bf09      	itett	eq
 8007f38:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800812c <__ieee754_rem_pio2f+0x230>
 8007f3c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008130 <__ieee754_rem_pio2f+0x234>
 8007f40:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007f44:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008134 <__ieee754_rem_pio2f+0x238>
 8007f48:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007f4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f50:	edc0 6a00 	vstr	s13, [r0]
 8007f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f58:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	b007      	add	sp, #28
 8007f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f62:	429c      	cmp	r4, r3
 8007f64:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007f68:	bf09      	itett	eq
 8007f6a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800812c <__ieee754_rem_pio2f+0x230>
 8007f6e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008130 <__ieee754_rem_pio2f+0x234>
 8007f72:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007f76:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008134 <__ieee754_rem_pio2f+0x238>
 8007f7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007f7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f82:	edc0 6a00 	vstr	s13, [r0]
 8007f86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f8a:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	e7e4      	b.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8007f94:	4b68      	ldr	r3, [pc, #416]	; (8008138 <__ieee754_rem_pio2f+0x23c>)
 8007f96:	429c      	cmp	r4, r3
 8007f98:	dc71      	bgt.n	800807e <__ieee754_rem_pio2f+0x182>
 8007f9a:	f7fe fd8b 	bl	8006ab4 <fabsf>
 8007f9e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800813c <__ieee754_rem_pio2f+0x240>
 8007fa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007fa6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007fb2:	ee17 0a90 	vmov	r0, s15
 8007fb6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008124 <__ieee754_rem_pio2f+0x228>
 8007fba:	eeb1 7a46 	vneg.f32	s14, s12
 8007fbe:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007fc2:	281f      	cmp	r0, #31
 8007fc4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008130 <__ieee754_rem_pio2f+0x234>
 8007fc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007fcc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007fd0:	ee16 3a90 	vmov	r3, s13
 8007fd4:	dc1c      	bgt.n	8008010 <__ieee754_rem_pio2f+0x114>
 8007fd6:	1e47      	subs	r7, r0, #1
 8007fd8:	4959      	ldr	r1, [pc, #356]	; (8008140 <__ieee754_rem_pio2f+0x244>)
 8007fda:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007fde:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007fe2:	428a      	cmp	r2, r1
 8007fe4:	d014      	beq.n	8008010 <__ieee754_rem_pio2f+0x114>
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	ed95 7a00 	vldr	s14, [r5]
 8007fec:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ff6:	ed85 0a01 	vstr	s0, [r5, #4]
 8007ffa:	dab0      	bge.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8007ffc:	eeb1 7a47 	vneg.f32	s14, s14
 8008000:	eeb1 0a40 	vneg.f32	s0, s0
 8008004:	ed85 7a00 	vstr	s14, [r5]
 8008008:	ed85 0a01 	vstr	s0, [r5, #4]
 800800c:	4240      	negs	r0, r0
 800800e:	e7a6      	b.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8008010:	15e4      	asrs	r4, r4, #23
 8008012:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008016:	1aa2      	subs	r2, r4, r2
 8008018:	2a08      	cmp	r2, #8
 800801a:	dde4      	ble.n	8007fe6 <__ieee754_rem_pio2f+0xea>
 800801c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800812c <__ieee754_rem_pio2f+0x230>
 8008020:	eef0 6a40 	vmov.f32	s13, s0
 8008024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008028:	ee30 0a66 	vsub.f32	s0, s0, s13
 800802c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008030:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008134 <__ieee754_rem_pio2f+0x238>
 8008034:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008038:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800803c:	eef0 7a40 	vmov.f32	s15, s0
 8008040:	ee15 3a90 	vmov	r3, s11
 8008044:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008048:	1aa4      	subs	r4, r4, r2
 800804a:	2c19      	cmp	r4, #25
 800804c:	dc04      	bgt.n	8008058 <__ieee754_rem_pio2f+0x15c>
 800804e:	edc5 5a00 	vstr	s11, [r5]
 8008052:	eeb0 0a66 	vmov.f32	s0, s13
 8008056:	e7c7      	b.n	8007fe8 <__ieee754_rem_pio2f+0xec>
 8008058:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008144 <__ieee754_rem_pio2f+0x248>
 800805c:	eeb0 0a66 	vmov.f32	s0, s13
 8008060:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008064:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008068:	eee7 7a25 	vfma.f32	s15, s14, s11
 800806c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008148 <__ieee754_rem_pio2f+0x24c>
 8008070:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008074:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008078:	ed85 7a00 	vstr	s14, [r5]
 800807c:	e7b4      	b.n	8007fe8 <__ieee754_rem_pio2f+0xec>
 800807e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008082:	db06      	blt.n	8008092 <__ieee754_rem_pio2f+0x196>
 8008084:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008088:	edc0 7a01 	vstr	s15, [r0, #4]
 800808c:	edc0 7a00 	vstr	s15, [r0]
 8008090:	e742      	b.n	8007f18 <__ieee754_rem_pio2f+0x1c>
 8008092:	15e2      	asrs	r2, r4, #23
 8008094:	3a86      	subs	r2, #134	; 0x86
 8008096:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080a2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800814c <__ieee754_rem_pio2f+0x250>
 80080a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80080b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80080c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80080d6:	d11e      	bne.n	8008116 <__ieee754_rem_pio2f+0x21a>
 80080d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	bf0c      	ite	eq
 80080e2:	2301      	moveq	r3, #1
 80080e4:	2302      	movne	r3, #2
 80080e6:	491a      	ldr	r1, [pc, #104]	; (8008150 <__ieee754_rem_pio2f+0x254>)
 80080e8:	9101      	str	r1, [sp, #4]
 80080ea:	2102      	movs	r1, #2
 80080ec:	9100      	str	r1, [sp, #0]
 80080ee:	a803      	add	r0, sp, #12
 80080f0:	4629      	mov	r1, r5
 80080f2:	f000 f891 	bl	8008218 <__kernel_rem_pio2f>
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	f6bf af31 	bge.w	8007f5e <__ieee754_rem_pio2f+0x62>
 80080fc:	edd5 7a00 	vldr	s15, [r5]
 8008100:	eef1 7a67 	vneg.f32	s15, s15
 8008104:	edc5 7a00 	vstr	s15, [r5]
 8008108:	edd5 7a01 	vldr	s15, [r5, #4]
 800810c:	eef1 7a67 	vneg.f32	s15, s15
 8008110:	edc5 7a01 	vstr	s15, [r5, #4]
 8008114:	e77a      	b.n	800800c <__ieee754_rem_pio2f+0x110>
 8008116:	2303      	movs	r3, #3
 8008118:	e7e5      	b.n	80080e6 <__ieee754_rem_pio2f+0x1ea>
 800811a:	bf00      	nop
 800811c:	3f490fd8 	.word	0x3f490fd8
 8008120:	4016cbe3 	.word	0x4016cbe3
 8008124:	3fc90f80 	.word	0x3fc90f80
 8008128:	3fc90fd0 	.word	0x3fc90fd0
 800812c:	37354400 	.word	0x37354400
 8008130:	37354443 	.word	0x37354443
 8008134:	2e85a308 	.word	0x2e85a308
 8008138:	43490f80 	.word	0x43490f80
 800813c:	3f22f984 	.word	0x3f22f984
 8008140:	08008d50 	.word	0x08008d50
 8008144:	2e85a300 	.word	0x2e85a300
 8008148:	248d3132 	.word	0x248d3132
 800814c:	43800000 	.word	0x43800000
 8008150:	08008dd0 	.word	0x08008dd0

08008154 <__ieee754_sqrtf>:
 8008154:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008158:	4770      	bx	lr
	...

0800815c <__kernel_cosf>:
 800815c:	ee10 3a10 	vmov	r3, s0
 8008160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008164:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816c:	da05      	bge.n	800817a <__kernel_cosf+0x1e>
 800816e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008172:	ee17 2a90 	vmov	r2, s15
 8008176:	2a00      	cmp	r2, #0
 8008178:	d03b      	beq.n	80081f2 <__kernel_cosf+0x96>
 800817a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800817e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008182:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80081f8 <__kernel_cosf+0x9c>
 8008186:	4a1d      	ldr	r2, [pc, #116]	; (80081fc <__kernel_cosf+0xa0>)
 8008188:	ee66 7a07 	vmul.f32	s15, s12, s14
 800818c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008200 <__kernel_cosf+0xa4>
 8008190:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008194:	4293      	cmp	r3, r2
 8008196:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008204 <__kernel_cosf+0xa8>
 800819a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800819e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008208 <__kernel_cosf+0xac>
 80081a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80081a6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800820c <__kernel_cosf+0xb0>
 80081aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80081ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008210 <__kernel_cosf+0xb4>
 80081b2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80081b6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80081ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80081be:	eee6 0a07 	vfma.f32	s1, s12, s14
 80081c2:	dc04      	bgt.n	80081ce <__kernel_cosf+0x72>
 80081c4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80081c8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80081cc:	4770      	bx	lr
 80081ce:	4a11      	ldr	r2, [pc, #68]	; (8008214 <__kernel_cosf+0xb8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	bfda      	itte	le
 80081d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80081d8:	ee07 3a10 	vmovle	s14, r3
 80081dc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80081e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081e4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80081e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80081ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80081f0:	4770      	bx	lr
 80081f2:	eeb0 0a66 	vmov.f32	s0, s13
 80081f6:	4770      	bx	lr
 80081f8:	ad47d74e 	.word	0xad47d74e
 80081fc:	3e999999 	.word	0x3e999999
 8008200:	310f74f6 	.word	0x310f74f6
 8008204:	b493f27c 	.word	0xb493f27c
 8008208:	37d00d01 	.word	0x37d00d01
 800820c:	bab60b61 	.word	0xbab60b61
 8008210:	3d2aaaab 	.word	0x3d2aaaab
 8008214:	3f480000 	.word	0x3f480000

08008218 <__kernel_rem_pio2f>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b04 	vpush	{d8-d9}
 8008220:	b0d7      	sub	sp, #348	; 0x15c
 8008222:	469b      	mov	fp, r3
 8008224:	460e      	mov	r6, r1
 8008226:	4bbe      	ldr	r3, [pc, #760]	; (8008520 <__kernel_rem_pio2f+0x308>)
 8008228:	9964      	ldr	r1, [sp, #400]	; 0x190
 800822a:	9002      	str	r0, [sp, #8]
 800822c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008230:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008232:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008530 <__kernel_rem_pio2f+0x318>
 8008236:	1ed1      	subs	r1, r2, #3
 8008238:	2308      	movs	r3, #8
 800823a:	fb91 f1f3 	sdiv	r1, r1, r3
 800823e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008242:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008246:	1c4c      	adds	r4, r1, #1
 8008248:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800824c:	eba1 050a 	sub.w	r5, r1, sl
 8008250:	aa1a      	add	r2, sp, #104	; 0x68
 8008252:	eb09 070a 	add.w	r7, r9, sl
 8008256:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800825a:	4696      	mov	lr, r2
 800825c:	2300      	movs	r3, #0
 800825e:	42bb      	cmp	r3, r7
 8008260:	dd0f      	ble.n	8008282 <__kernel_rem_pio2f+0x6a>
 8008262:	af42      	add	r7, sp, #264	; 0x108
 8008264:	2200      	movs	r2, #0
 8008266:	454a      	cmp	r2, r9
 8008268:	dc27      	bgt.n	80082ba <__kernel_rem_pio2f+0xa2>
 800826a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800826e:	eb0b 0302 	add.w	r3, fp, r2
 8008272:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008276:	9d02      	ldr	r5, [sp, #8]
 8008278:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008530 <__kernel_rem_pio2f+0x318>
 800827c:	f04f 0c00 	mov.w	ip, #0
 8008280:	e015      	b.n	80082ae <__kernel_rem_pio2f+0x96>
 8008282:	42dd      	cmn	r5, r3
 8008284:	bf5d      	ittte	pl
 8008286:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800828a:	ee07 2a90 	vmovpl	s15, r2
 800828e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008292:	eef0 7a47 	vmovmi.f32	s15, s14
 8008296:	ecee 7a01 	vstmia	lr!, {s15}
 800829a:	3301      	adds	r3, #1
 800829c:	e7df      	b.n	800825e <__kernel_rem_pio2f+0x46>
 800829e:	ecf5 6a01 	vldmia	r5!, {s13}
 80082a2:	ed33 7a01 	vldmdb	r3!, {s14}
 80082a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80082aa:	f10c 0c01 	add.w	ip, ip, #1
 80082ae:	45d4      	cmp	ip, sl
 80082b0:	ddf5      	ble.n	800829e <__kernel_rem_pio2f+0x86>
 80082b2:	ece7 7a01 	vstmia	r7!, {s15}
 80082b6:	3201      	adds	r2, #1
 80082b8:	e7d5      	b.n	8008266 <__kernel_rem_pio2f+0x4e>
 80082ba:	ab06      	add	r3, sp, #24
 80082bc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800852c <__kernel_rem_pio2f+0x314>
 80082c6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008528 <__kernel_rem_pio2f+0x310>
 80082ca:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	464d      	mov	r5, r9
 80082d2:	ab56      	add	r3, sp, #344	; 0x158
 80082d4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80082d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80082dc:	3f01      	subs	r7, #1
 80082de:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80082e2:	00bf      	lsls	r7, r7, #2
 80082e4:	ab56      	add	r3, sp, #344	; 0x158
 80082e6:	19da      	adds	r2, r3, r7
 80082e8:	3a4c      	subs	r2, #76	; 0x4c
 80082ea:	2300      	movs	r3, #0
 80082ec:	1ae9      	subs	r1, r5, r3
 80082ee:	2900      	cmp	r1, #0
 80082f0:	dc4c      	bgt.n	800838c <__kernel_rem_pio2f+0x174>
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 fbb4 	bl	8008a60 <scalbnf>
 80082f8:	eeb0 8a40 	vmov.f32	s16, s0
 80082fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008300:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008304:	f000 fb6a 	bl	80089dc <floorf>
 8008308:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800830c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008310:	2c00      	cmp	r4, #0
 8008312:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008316:	edcd 7a01 	vstr	s15, [sp, #4]
 800831a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800831e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008322:	dd48      	ble.n	80083b6 <__kernel_rem_pio2f+0x19e>
 8008324:	1e69      	subs	r1, r5, #1
 8008326:	ab06      	add	r3, sp, #24
 8008328:	f1c4 0008 	rsb	r0, r4, #8
 800832c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008330:	9a01      	ldr	r2, [sp, #4]
 8008332:	fa4c f300 	asr.w	r3, ip, r0
 8008336:	441a      	add	r2, r3
 8008338:	4083      	lsls	r3, r0
 800833a:	9201      	str	r2, [sp, #4]
 800833c:	ebac 0203 	sub.w	r2, ip, r3
 8008340:	ab06      	add	r3, sp, #24
 8008342:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008346:	f1c4 0307 	rsb	r3, r4, #7
 800834a:	fa42 f803 	asr.w	r8, r2, r3
 800834e:	f1b8 0f00 	cmp.w	r8, #0
 8008352:	dd41      	ble.n	80083d8 <__kernel_rem_pio2f+0x1c0>
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	2000      	movs	r0, #0
 8008358:	3301      	adds	r3, #1
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	4601      	mov	r1, r0
 800835e:	4285      	cmp	r5, r0
 8008360:	dc6d      	bgt.n	800843e <__kernel_rem_pio2f+0x226>
 8008362:	2c00      	cmp	r4, #0
 8008364:	dd04      	ble.n	8008370 <__kernel_rem_pio2f+0x158>
 8008366:	2c01      	cmp	r4, #1
 8008368:	d07e      	beq.n	8008468 <__kernel_rem_pio2f+0x250>
 800836a:	2c02      	cmp	r4, #2
 800836c:	f000 8086 	beq.w	800847c <__kernel_rem_pio2f+0x264>
 8008370:	f1b8 0f02 	cmp.w	r8, #2
 8008374:	d130      	bne.n	80083d8 <__kernel_rem_pio2f+0x1c0>
 8008376:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800837a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800837e:	b359      	cbz	r1, 80083d8 <__kernel_rem_pio2f+0x1c0>
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fb6d 	bl	8008a60 <scalbnf>
 8008386:	ee38 8a40 	vsub.f32	s16, s16, s0
 800838a:	e025      	b.n	80083d8 <__kernel_rem_pio2f+0x1c0>
 800838c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008390:	a806      	add	r0, sp, #24
 8008392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800839a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800839e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083a2:	ee10 1a10 	vmov	r1, s0
 80083a6:	ed32 0a01 	vldmdb	r2!, {s0}
 80083aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80083ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 80083b2:	3301      	adds	r3, #1
 80083b4:	e79a      	b.n	80082ec <__kernel_rem_pio2f+0xd4>
 80083b6:	d106      	bne.n	80083c6 <__kernel_rem_pio2f+0x1ae>
 80083b8:	1e6b      	subs	r3, r5, #1
 80083ba:	aa06      	add	r2, sp, #24
 80083bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083c0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80083c4:	e7c3      	b.n	800834e <__kernel_rem_pio2f+0x136>
 80083c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80083ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	da31      	bge.n	8008438 <__kernel_rem_pio2f+0x220>
 80083d4:	f04f 0800 	mov.w	r8, #0
 80083d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	f040 80a8 	bne.w	8008534 <__kernel_rem_pio2f+0x31c>
 80083e4:	1e6b      	subs	r3, r5, #1
 80083e6:	4618      	mov	r0, r3
 80083e8:	2200      	movs	r2, #0
 80083ea:	4548      	cmp	r0, r9
 80083ec:	da4d      	bge.n	800848a <__kernel_rem_pio2f+0x272>
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	f000 8087 	beq.w	8008502 <__kernel_rem_pio2f+0x2ea>
 80083f4:	aa06      	add	r2, sp, #24
 80083f6:	3c08      	subs	r4, #8
 80083f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083fc:	2900      	cmp	r1, #0
 80083fe:	f000 808d 	beq.w	800851c <__kernel_rem_pio2f+0x304>
 8008402:	4620      	mov	r0, r4
 8008404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	f000 fb29 	bl	8008a60 <scalbnf>
 800840e:	9b02      	ldr	r3, [sp, #8]
 8008410:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800852c <__kernel_rem_pio2f+0x314>
 8008414:	0099      	lsls	r1, r3, #2
 8008416:	aa42      	add	r2, sp, #264	; 0x108
 8008418:	1850      	adds	r0, r2, r1
 800841a:	1d05      	adds	r5, r0, #4
 800841c:	461c      	mov	r4, r3
 800841e:	2c00      	cmp	r4, #0
 8008420:	f280 80b8 	bge.w	8008594 <__kernel_rem_pio2f+0x37c>
 8008424:	2500      	movs	r5, #0
 8008426:	1b5c      	subs	r4, r3, r5
 8008428:	2c00      	cmp	r4, #0
 800842a:	f2c0 80d8 	blt.w	80085de <__kernel_rem_pio2f+0x3c6>
 800842e:	4f3d      	ldr	r7, [pc, #244]	; (8008524 <__kernel_rem_pio2f+0x30c>)
 8008430:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008530 <__kernel_rem_pio2f+0x318>
 8008434:	2400      	movs	r4, #0
 8008436:	e0c6      	b.n	80085c6 <__kernel_rem_pio2f+0x3ae>
 8008438:	f04f 0802 	mov.w	r8, #2
 800843c:	e78a      	b.n	8008354 <__kernel_rem_pio2f+0x13c>
 800843e:	ab06      	add	r3, sp, #24
 8008440:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008444:	b949      	cbnz	r1, 800845a <__kernel_rem_pio2f+0x242>
 8008446:	b12b      	cbz	r3, 8008454 <__kernel_rem_pio2f+0x23c>
 8008448:	aa06      	add	r2, sp, #24
 800844a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800844e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008452:	2301      	movs	r3, #1
 8008454:	3001      	adds	r0, #1
 8008456:	4619      	mov	r1, r3
 8008458:	e781      	b.n	800835e <__kernel_rem_pio2f+0x146>
 800845a:	aa06      	add	r2, sp, #24
 800845c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008460:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008464:	460b      	mov	r3, r1
 8008466:	e7f5      	b.n	8008454 <__kernel_rem_pio2f+0x23c>
 8008468:	1e68      	subs	r0, r5, #1
 800846a:	ab06      	add	r3, sp, #24
 800846c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008474:	aa06      	add	r2, sp, #24
 8008476:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800847a:	e779      	b.n	8008370 <__kernel_rem_pio2f+0x158>
 800847c:	1e68      	subs	r0, r5, #1
 800847e:	ab06      	add	r3, sp, #24
 8008480:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008488:	e7f4      	b.n	8008474 <__kernel_rem_pio2f+0x25c>
 800848a:	a906      	add	r1, sp, #24
 800848c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008490:	3801      	subs	r0, #1
 8008492:	430a      	orrs	r2, r1
 8008494:	e7a9      	b.n	80083ea <__kernel_rem_pio2f+0x1d2>
 8008496:	f10c 0c01 	add.w	ip, ip, #1
 800849a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800849e:	2a00      	cmp	r2, #0
 80084a0:	d0f9      	beq.n	8008496 <__kernel_rem_pio2f+0x27e>
 80084a2:	eb0b 0305 	add.w	r3, fp, r5
 80084a6:	aa1a      	add	r2, sp, #104	; 0x68
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	1898      	adds	r0, r3, r2
 80084ac:	3004      	adds	r0, #4
 80084ae:	1c69      	adds	r1, r5, #1
 80084b0:	3704      	adds	r7, #4
 80084b2:	2200      	movs	r2, #0
 80084b4:	4465      	add	r5, ip
 80084b6:	9005      	str	r0, [sp, #20]
 80084b8:	428d      	cmp	r5, r1
 80084ba:	f6ff af0a 	blt.w	80082d2 <__kernel_rem_pio2f+0xba>
 80084be:	a81a      	add	r0, sp, #104	; 0x68
 80084c0:	eb02 0c03 	add.w	ip, r2, r3
 80084c4:	4484      	add	ip, r0
 80084c6:	9803      	ldr	r0, [sp, #12]
 80084c8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80084cc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80084d0:	9001      	str	r0, [sp, #4]
 80084d2:	ee07 0a90 	vmov	s15, r0
 80084d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084da:	9805      	ldr	r0, [sp, #20]
 80084dc:	edcc 7a00 	vstr	s15, [ip]
 80084e0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008530 <__kernel_rem_pio2f+0x318>
 80084e4:	eb00 0802 	add.w	r8, r0, r2
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	45d4      	cmp	ip, sl
 80084ee:	dd0c      	ble.n	800850a <__kernel_rem_pio2f+0x2f2>
 80084f0:	eb02 0c07 	add.w	ip, r2, r7
 80084f4:	a842      	add	r0, sp, #264	; 0x108
 80084f6:	4484      	add	ip, r0
 80084f8:	edcc 7a01 	vstr	s15, [ip, #4]
 80084fc:	3101      	adds	r1, #1
 80084fe:	3204      	adds	r2, #4
 8008500:	e7da      	b.n	80084b8 <__kernel_rem_pio2f+0x2a0>
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	f04f 0c01 	mov.w	ip, #1
 8008508:	e7c7      	b.n	800849a <__kernel_rem_pio2f+0x282>
 800850a:	ecfe 6a01 	vldmia	lr!, {s13}
 800850e:	ed38 7a01 	vldmdb	r8!, {s14}
 8008512:	f10c 0c01 	add.w	ip, ip, #1
 8008516:	eee6 7a87 	vfma.f32	s15, s13, s14
 800851a:	e7e7      	b.n	80084ec <__kernel_rem_pio2f+0x2d4>
 800851c:	3b01      	subs	r3, #1
 800851e:	e769      	b.n	80083f4 <__kernel_rem_pio2f+0x1dc>
 8008520:	08009114 	.word	0x08009114
 8008524:	080090e8 	.word	0x080090e8
 8008528:	43800000 	.word	0x43800000
 800852c:	3b800000 	.word	0x3b800000
 8008530:	00000000 	.word	0x00000000
 8008534:	4260      	negs	r0, r4
 8008536:	eeb0 0a48 	vmov.f32	s0, s16
 800853a:	f000 fa91 	bl	8008a60 <scalbnf>
 800853e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008528 <__kernel_rem_pio2f+0x310>
 8008542:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854a:	db1a      	blt.n	8008582 <__kernel_rem_pio2f+0x36a>
 800854c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800852c <__kernel_rem_pio2f+0x314>
 8008550:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008554:	aa06      	add	r2, sp, #24
 8008556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800855a:	a906      	add	r1, sp, #24
 800855c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008560:	3408      	adds	r4, #8
 8008562:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800856a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800856e:	ee10 3a10 	vmov	r3, s0
 8008572:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008576:	1c6b      	adds	r3, r5, #1
 8008578:	ee17 2a90 	vmov	r2, s15
 800857c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008580:	e73f      	b.n	8008402 <__kernel_rem_pio2f+0x1ea>
 8008582:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008586:	aa06      	add	r2, sp, #24
 8008588:	ee10 3a10 	vmov	r3, s0
 800858c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008590:	462b      	mov	r3, r5
 8008592:	e736      	b.n	8008402 <__kernel_rem_pio2f+0x1ea>
 8008594:	aa06      	add	r2, sp, #24
 8008596:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800859a:	9202      	str	r2, [sp, #8]
 800859c:	ee07 2a90 	vmov	s15, r2
 80085a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085a4:	3c01      	subs	r4, #1
 80085a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80085ae:	ed65 7a01 	vstmdb	r5!, {s15}
 80085b2:	e734      	b.n	800841e <__kernel_rem_pio2f+0x206>
 80085b4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80085b8:	ecf7 6a01 	vldmia	r7!, {s13}
 80085bc:	ed9c 7a00 	vldr	s14, [ip]
 80085c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085c4:	3401      	adds	r4, #1
 80085c6:	454c      	cmp	r4, r9
 80085c8:	dc01      	bgt.n	80085ce <__kernel_rem_pio2f+0x3b6>
 80085ca:	42a5      	cmp	r5, r4
 80085cc:	daf2      	bge.n	80085b4 <__kernel_rem_pio2f+0x39c>
 80085ce:	aa56      	add	r2, sp, #344	; 0x158
 80085d0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80085d4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80085d8:	3501      	adds	r5, #1
 80085da:	3804      	subs	r0, #4
 80085dc:	e723      	b.n	8008426 <__kernel_rem_pio2f+0x20e>
 80085de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80085e0:	2a03      	cmp	r2, #3
 80085e2:	d84d      	bhi.n	8008680 <__kernel_rem_pio2f+0x468>
 80085e4:	e8df f002 	tbb	[pc, r2]
 80085e8:	021f1f3e 	.word	0x021f1f3e
 80085ec:	aa56      	add	r2, sp, #344	; 0x158
 80085ee:	4411      	add	r1, r2
 80085f0:	399c      	subs	r1, #156	; 0x9c
 80085f2:	4608      	mov	r0, r1
 80085f4:	461c      	mov	r4, r3
 80085f6:	2c00      	cmp	r4, #0
 80085f8:	dc5f      	bgt.n	80086ba <__kernel_rem_pio2f+0x4a2>
 80085fa:	4608      	mov	r0, r1
 80085fc:	461c      	mov	r4, r3
 80085fe:	2c01      	cmp	r4, #1
 8008600:	dc6b      	bgt.n	80086da <__kernel_rem_pio2f+0x4c2>
 8008602:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008530 <__kernel_rem_pio2f+0x318>
 8008606:	2b01      	cmp	r3, #1
 8008608:	dc77      	bgt.n	80086fa <__kernel_rem_pio2f+0x4e2>
 800860a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800860e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008612:	f1b8 0f00 	cmp.w	r8, #0
 8008616:	d176      	bne.n	8008706 <__kernel_rem_pio2f+0x4ee>
 8008618:	edc6 6a00 	vstr	s13, [r6]
 800861c:	ed86 7a01 	vstr	s14, [r6, #4]
 8008620:	edc6 7a02 	vstr	s15, [r6, #8]
 8008624:	e02c      	b.n	8008680 <__kernel_rem_pio2f+0x468>
 8008626:	aa56      	add	r2, sp, #344	; 0x158
 8008628:	4411      	add	r1, r2
 800862a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008530 <__kernel_rem_pio2f+0x318>
 800862e:	399c      	subs	r1, #156	; 0x9c
 8008630:	4618      	mov	r0, r3
 8008632:	2800      	cmp	r0, #0
 8008634:	da32      	bge.n	800869c <__kernel_rem_pio2f+0x484>
 8008636:	f1b8 0f00 	cmp.w	r8, #0
 800863a:	d035      	beq.n	80086a8 <__kernel_rem_pio2f+0x490>
 800863c:	eef1 7a47 	vneg.f32	s15, s14
 8008640:	edc6 7a00 	vstr	s15, [r6]
 8008644:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800864c:	a82f      	add	r0, sp, #188	; 0xbc
 800864e:	2101      	movs	r1, #1
 8008650:	428b      	cmp	r3, r1
 8008652:	da2c      	bge.n	80086ae <__kernel_rem_pio2f+0x496>
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	d001      	beq.n	800865e <__kernel_rem_pio2f+0x446>
 800865a:	eef1 7a67 	vneg.f32	s15, s15
 800865e:	edc6 7a01 	vstr	s15, [r6, #4]
 8008662:	e00d      	b.n	8008680 <__kernel_rem_pio2f+0x468>
 8008664:	aa56      	add	r2, sp, #344	; 0x158
 8008666:	4411      	add	r1, r2
 8008668:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008530 <__kernel_rem_pio2f+0x318>
 800866c:	399c      	subs	r1, #156	; 0x9c
 800866e:	2b00      	cmp	r3, #0
 8008670:	da0e      	bge.n	8008690 <__kernel_rem_pio2f+0x478>
 8008672:	f1b8 0f00 	cmp.w	r8, #0
 8008676:	d001      	beq.n	800867c <__kernel_rem_pio2f+0x464>
 8008678:	eef1 7a67 	vneg.f32	s15, s15
 800867c:	edc6 7a00 	vstr	s15, [r6]
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	f003 0007 	and.w	r0, r3, #7
 8008686:	b057      	add	sp, #348	; 0x15c
 8008688:	ecbd 8b04 	vpop	{d8-d9}
 800868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	ed31 7a01 	vldmdb	r1!, {s14}
 8008694:	3b01      	subs	r3, #1
 8008696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800869a:	e7e8      	b.n	800866e <__kernel_rem_pio2f+0x456>
 800869c:	ed71 7a01 	vldmdb	r1!, {s15}
 80086a0:	3801      	subs	r0, #1
 80086a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086a6:	e7c4      	b.n	8008632 <__kernel_rem_pio2f+0x41a>
 80086a8:	eef0 7a47 	vmov.f32	s15, s14
 80086ac:	e7c8      	b.n	8008640 <__kernel_rem_pio2f+0x428>
 80086ae:	ecb0 7a01 	vldmia	r0!, {s14}
 80086b2:	3101      	adds	r1, #1
 80086b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086b8:	e7ca      	b.n	8008650 <__kernel_rem_pio2f+0x438>
 80086ba:	ed50 7a02 	vldr	s15, [r0, #-8]
 80086be:	ed70 6a01 	vldmdb	r0!, {s13}
 80086c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80086c6:	3c01      	subs	r4, #1
 80086c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086cc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80086d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d4:	edc0 7a00 	vstr	s15, [r0]
 80086d8:	e78d      	b.n	80085f6 <__kernel_rem_pio2f+0x3de>
 80086da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80086de:	ed70 6a01 	vldmdb	r0!, {s13}
 80086e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80086e6:	3c01      	subs	r4, #1
 80086e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086ec:	ed00 7a01 	vstr	s14, [r0, #-4]
 80086f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f4:	edc0 7a00 	vstr	s15, [r0]
 80086f8:	e781      	b.n	80085fe <__kernel_rem_pio2f+0x3e6>
 80086fa:	ed31 7a01 	vldmdb	r1!, {s14}
 80086fe:	3b01      	subs	r3, #1
 8008700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008704:	e77f      	b.n	8008606 <__kernel_rem_pio2f+0x3ee>
 8008706:	eef1 6a66 	vneg.f32	s13, s13
 800870a:	eeb1 7a47 	vneg.f32	s14, s14
 800870e:	edc6 6a00 	vstr	s13, [r6]
 8008712:	ed86 7a01 	vstr	s14, [r6, #4]
 8008716:	eef1 7a67 	vneg.f32	s15, s15
 800871a:	e781      	b.n	8008620 <__kernel_rem_pio2f+0x408>

0800871c <__kernel_sinf>:
 800871c:	ee10 3a10 	vmov	r3, s0
 8008720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008724:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008728:	da04      	bge.n	8008734 <__kernel_sinf+0x18>
 800872a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800872e:	ee17 3a90 	vmov	r3, s15
 8008732:	b35b      	cbz	r3, 800878c <__kernel_sinf+0x70>
 8008734:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008738:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008790 <__kernel_sinf+0x74>
 800873c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008794 <__kernel_sinf+0x78>
 8008740:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008744:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008798 <__kernel_sinf+0x7c>
 8008748:	eee6 7a07 	vfma.f32	s15, s12, s14
 800874c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800879c <__kernel_sinf+0x80>
 8008750:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008754:	eddf 7a12 	vldr	s15, [pc, #72]	; 80087a0 <__kernel_sinf+0x84>
 8008758:	ee60 6a07 	vmul.f32	s13, s0, s14
 800875c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008760:	b930      	cbnz	r0, 8008770 <__kernel_sinf+0x54>
 8008762:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80087a4 <__kernel_sinf+0x88>
 8008766:	eea7 6a27 	vfma.f32	s12, s14, s15
 800876a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800876e:	4770      	bx	lr
 8008770:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008774:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008778:	eee0 7a86 	vfma.f32	s15, s1, s12
 800877c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008780:	eddf 7a09 	vldr	s15, [pc, #36]	; 80087a8 <__kernel_sinf+0x8c>
 8008784:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008788:	ee30 0a60 	vsub.f32	s0, s0, s1
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	2f2ec9d3 	.word	0x2f2ec9d3
 8008794:	b2d72f34 	.word	0xb2d72f34
 8008798:	3638ef1b 	.word	0x3638ef1b
 800879c:	b9500d01 	.word	0xb9500d01
 80087a0:	3c088889 	.word	0x3c088889
 80087a4:	be2aaaab 	.word	0xbe2aaaab
 80087a8:	3e2aaaab 	.word	0x3e2aaaab

080087ac <fabs>:
 80087ac:	ec51 0b10 	vmov	r0, r1, d0
 80087b0:	ee10 2a10 	vmov	r2, s0
 80087b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087b8:	ec43 2b10 	vmov	d0, r2, r3
 80087bc:	4770      	bx	lr

080087be <finite>:
 80087be:	ee10 3a90 	vmov	r3, s1
 80087c2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80087c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80087ca:	0fc0      	lsrs	r0, r0, #31
 80087cc:	4770      	bx	lr

080087ce <matherr>:
 80087ce:	2000      	movs	r0, #0
 80087d0:	4770      	bx	lr
 80087d2:	0000      	movs	r0, r0
 80087d4:	0000      	movs	r0, r0
	...

080087d8 <nan>:
 80087d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087e0 <nan+0x8>
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	00000000 	.word	0x00000000
 80087e4:	7ff80000 	.word	0x7ff80000

080087e8 <rint>:
 80087e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ea:	ec51 0b10 	vmov	r0, r1, d0
 80087ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80087f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80087f6:	2e13      	cmp	r6, #19
 80087f8:	460b      	mov	r3, r1
 80087fa:	ee10 4a10 	vmov	r4, s0
 80087fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008802:	dc56      	bgt.n	80088b2 <rint+0xca>
 8008804:	2e00      	cmp	r6, #0
 8008806:	da2b      	bge.n	8008860 <rint+0x78>
 8008808:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800880c:	4302      	orrs	r2, r0
 800880e:	d023      	beq.n	8008858 <rint+0x70>
 8008810:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008814:	4302      	orrs	r2, r0
 8008816:	4254      	negs	r4, r2
 8008818:	4314      	orrs	r4, r2
 800881a:	0c4b      	lsrs	r3, r1, #17
 800881c:	0b24      	lsrs	r4, r4, #12
 800881e:	045b      	lsls	r3, r3, #17
 8008820:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008824:	ea44 0103 	orr.w	r1, r4, r3
 8008828:	460b      	mov	r3, r1
 800882a:	492f      	ldr	r1, [pc, #188]	; (80088e8 <rint+0x100>)
 800882c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008830:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008834:	4602      	mov	r2, r0
 8008836:	4639      	mov	r1, r7
 8008838:	4630      	mov	r0, r6
 800883a:	f7f7 fd27 	bl	800028c <__adddf3>
 800883e:	e9cd 0100 	strd	r0, r1, [sp]
 8008842:	463b      	mov	r3, r7
 8008844:	4632      	mov	r2, r6
 8008846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884a:	f7f7 fd1d 	bl	8000288 <__aeabi_dsub>
 800884e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008852:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008856:	4639      	mov	r1, r7
 8008858:	ec41 0b10 	vmov	d0, r0, r1
 800885c:	b003      	add	sp, #12
 800885e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008860:	4a22      	ldr	r2, [pc, #136]	; (80088ec <rint+0x104>)
 8008862:	4132      	asrs	r2, r6
 8008864:	ea01 0702 	and.w	r7, r1, r2
 8008868:	4307      	orrs	r7, r0
 800886a:	d0f5      	beq.n	8008858 <rint+0x70>
 800886c:	0852      	lsrs	r2, r2, #1
 800886e:	4011      	ands	r1, r2
 8008870:	430c      	orrs	r4, r1
 8008872:	d00b      	beq.n	800888c <rint+0xa4>
 8008874:	ea23 0202 	bic.w	r2, r3, r2
 8008878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800887c:	2e13      	cmp	r6, #19
 800887e:	fa43 f306 	asr.w	r3, r3, r6
 8008882:	bf0c      	ite	eq
 8008884:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008888:	2400      	movne	r4, #0
 800888a:	4313      	orrs	r3, r2
 800888c:	4916      	ldr	r1, [pc, #88]	; (80088e8 <rint+0x100>)
 800888e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008892:	4622      	mov	r2, r4
 8008894:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008898:	4620      	mov	r0, r4
 800889a:	4629      	mov	r1, r5
 800889c:	f7f7 fcf6 	bl	800028c <__adddf3>
 80088a0:	e9cd 0100 	strd	r0, r1, [sp]
 80088a4:	4622      	mov	r2, r4
 80088a6:	462b      	mov	r3, r5
 80088a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ac:	f7f7 fcec 	bl	8000288 <__aeabi_dsub>
 80088b0:	e7d2      	b.n	8008858 <rint+0x70>
 80088b2:	2e33      	cmp	r6, #51	; 0x33
 80088b4:	dd07      	ble.n	80088c6 <rint+0xde>
 80088b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80088ba:	d1cd      	bne.n	8008858 <rint+0x70>
 80088bc:	ee10 2a10 	vmov	r2, s0
 80088c0:	f7f7 fce4 	bl	800028c <__adddf3>
 80088c4:	e7c8      	b.n	8008858 <rint+0x70>
 80088c6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	40f2      	lsrs	r2, r6
 80088d0:	4210      	tst	r0, r2
 80088d2:	d0c1      	beq.n	8008858 <rint+0x70>
 80088d4:	0852      	lsrs	r2, r2, #1
 80088d6:	4210      	tst	r0, r2
 80088d8:	bf1f      	itttt	ne
 80088da:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80088de:	ea20 0202 	bicne.w	r2, r0, r2
 80088e2:	4134      	asrne	r4, r6
 80088e4:	4314      	orrne	r4, r2
 80088e6:	e7d1      	b.n	800888c <rint+0xa4>
 80088e8:	08009120 	.word	0x08009120
 80088ec:	000fffff 	.word	0x000fffff

080088f0 <scalbn>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	ec55 4b10 	vmov	r4, r5, d0
 80088f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80088fa:	4606      	mov	r6, r0
 80088fc:	462b      	mov	r3, r5
 80088fe:	b9aa      	cbnz	r2, 800892c <scalbn+0x3c>
 8008900:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008904:	4323      	orrs	r3, r4
 8008906:	d03b      	beq.n	8008980 <scalbn+0x90>
 8008908:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <scalbn+0xe0>)
 800890a:	4629      	mov	r1, r5
 800890c:	2200      	movs	r2, #0
 800890e:	ee10 0a10 	vmov	r0, s0
 8008912:	f7f7 fe71 	bl	80005f8 <__aeabi_dmul>
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <scalbn+0xe4>)
 8008918:	429e      	cmp	r6, r3
 800891a:	4604      	mov	r4, r0
 800891c:	460d      	mov	r5, r1
 800891e:	da12      	bge.n	8008946 <scalbn+0x56>
 8008920:	a327      	add	r3, pc, #156	; (adr r3, 80089c0 <scalbn+0xd0>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	e009      	b.n	8008940 <scalbn+0x50>
 800892c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008930:	428a      	cmp	r2, r1
 8008932:	d10c      	bne.n	800894e <scalbn+0x5e>
 8008934:	ee10 2a10 	vmov	r2, s0
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fca6 	bl	800028c <__adddf3>
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	e01c      	b.n	8008980 <scalbn+0x90>
 8008946:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800894a:	460b      	mov	r3, r1
 800894c:	3a36      	subs	r2, #54	; 0x36
 800894e:	4432      	add	r2, r6
 8008950:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008954:	428a      	cmp	r2, r1
 8008956:	dd0b      	ble.n	8008970 <scalbn+0x80>
 8008958:	ec45 4b11 	vmov	d1, r4, r5
 800895c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80089c8 <scalbn+0xd8>
 8008960:	f000 f8de 	bl	8008b20 <copysign>
 8008964:	a318      	add	r3, pc, #96	; (adr r3, 80089c8 <scalbn+0xd8>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	ec51 0b10 	vmov	r0, r1, d0
 800896e:	e7da      	b.n	8008926 <scalbn+0x36>
 8008970:	2a00      	cmp	r2, #0
 8008972:	dd08      	ble.n	8008986 <scalbn+0x96>
 8008974:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008978:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800897c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008980:	ec45 4b10 	vmov	d0, r4, r5
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800898a:	da0d      	bge.n	80089a8 <scalbn+0xb8>
 800898c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008990:	429e      	cmp	r6, r3
 8008992:	ec45 4b11 	vmov	d1, r4, r5
 8008996:	dce1      	bgt.n	800895c <scalbn+0x6c>
 8008998:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80089c0 <scalbn+0xd0>
 800899c:	f000 f8c0 	bl	8008b20 <copysign>
 80089a0:	a307      	add	r3, pc, #28	; (adr r3, 80089c0 <scalbn+0xd0>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e7e0      	b.n	800896a <scalbn+0x7a>
 80089a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089ac:	3236      	adds	r2, #54	; 0x36
 80089ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	2200      	movs	r2, #0
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <scalbn+0xe8>)
 80089be:	e7b2      	b.n	8008926 <scalbn+0x36>
 80089c0:	c2f8f359 	.word	0xc2f8f359
 80089c4:	01a56e1f 	.word	0x01a56e1f
 80089c8:	8800759c 	.word	0x8800759c
 80089cc:	7e37e43c 	.word	0x7e37e43c
 80089d0:	43500000 	.word	0x43500000
 80089d4:	ffff3cb0 	.word	0xffff3cb0
 80089d8:	3c900000 	.word	0x3c900000

080089dc <floorf>:
 80089dc:	ee10 3a10 	vmov	r3, s0
 80089e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089e4:	0dca      	lsrs	r2, r1, #23
 80089e6:	3a7f      	subs	r2, #127	; 0x7f
 80089e8:	2a16      	cmp	r2, #22
 80089ea:	dc2a      	bgt.n	8008a42 <floorf+0x66>
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	da11      	bge.n	8008a14 <floorf+0x38>
 80089f0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008a54 <floorf+0x78>
 80089f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a00:	dd05      	ble.n	8008a0e <floorf+0x32>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da23      	bge.n	8008a4e <floorf+0x72>
 8008a06:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <floorf+0x7c>)
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	4613      	movne	r3, r2
 8008a0e:	ee00 3a10 	vmov	s0, r3
 8008a12:	4770      	bx	lr
 8008a14:	4911      	ldr	r1, [pc, #68]	; (8008a5c <floorf+0x80>)
 8008a16:	4111      	asrs	r1, r2
 8008a18:	420b      	tst	r3, r1
 8008a1a:	d0fa      	beq.n	8008a12 <floorf+0x36>
 8008a1c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008a54 <floorf+0x78>
 8008a20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	ddef      	ble.n	8008a0e <floorf+0x32>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bfbe      	ittt	lt
 8008a32:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008a36:	fa40 f202 	asrlt.w	r2, r0, r2
 8008a3a:	189b      	addlt	r3, r3, r2
 8008a3c:	ea23 0301 	bic.w	r3, r3, r1
 8008a40:	e7e5      	b.n	8008a0e <floorf+0x32>
 8008a42:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a46:	d3e4      	bcc.n	8008a12 <floorf+0x36>
 8008a48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a4c:	4770      	bx	lr
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e7dd      	b.n	8008a0e <floorf+0x32>
 8008a52:	bf00      	nop
 8008a54:	7149f2ca 	.word	0x7149f2ca
 8008a58:	bf800000 	.word	0xbf800000
 8008a5c:	007fffff 	.word	0x007fffff

08008a60 <scalbnf>:
 8008a60:	b508      	push	{r3, lr}
 8008a62:	ee10 2a10 	vmov	r2, s0
 8008a66:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008a6a:	ed2d 8b02 	vpush	{d8}
 8008a6e:	eef0 0a40 	vmov.f32	s1, s0
 8008a72:	d004      	beq.n	8008a7e <scalbnf+0x1e>
 8008a74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a78:	d306      	bcc.n	8008a88 <scalbnf+0x28>
 8008a7a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008a7e:	ecbd 8b02 	vpop	{d8}
 8008a82:	eeb0 0a60 	vmov.f32	s0, s1
 8008a86:	bd08      	pop	{r3, pc}
 8008a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a8c:	d21c      	bcs.n	8008ac8 <scalbnf+0x68>
 8008a8e:	4b1f      	ldr	r3, [pc, #124]	; (8008b0c <scalbnf+0xac>)
 8008a90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b10 <scalbnf+0xb0>
 8008a94:	4298      	cmp	r0, r3
 8008a96:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008a9a:	db10      	blt.n	8008abe <scalbnf+0x5e>
 8008a9c:	ee10 2a90 	vmov	r2, s1
 8008aa0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008aa4:	3b19      	subs	r3, #25
 8008aa6:	4403      	add	r3, r0
 8008aa8:	2bfe      	cmp	r3, #254	; 0xfe
 8008aaa:	dd0f      	ble.n	8008acc <scalbnf+0x6c>
 8008aac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008b14 <scalbnf+0xb4>
 8008ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ab4:	f000 f843 	bl	8008b3e <copysignf>
 8008ab8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008abc:	e7df      	b.n	8008a7e <scalbnf+0x1e>
 8008abe:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008b18 <scalbnf+0xb8>
 8008ac2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008ac6:	e7da      	b.n	8008a7e <scalbnf+0x1e>
 8008ac8:	0ddb      	lsrs	r3, r3, #23
 8008aca:	e7ec      	b.n	8008aa6 <scalbnf+0x46>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dd06      	ble.n	8008ade <scalbnf+0x7e>
 8008ad0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008ad4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008ad8:	ee00 3a90 	vmov	s1, r3
 8008adc:	e7cf      	b.n	8008a7e <scalbnf+0x1e>
 8008ade:	f113 0f16 	cmn.w	r3, #22
 8008ae2:	da06      	bge.n	8008af2 <scalbnf+0x92>
 8008ae4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008ae8:	4298      	cmp	r0, r3
 8008aea:	dcdf      	bgt.n	8008aac <scalbnf+0x4c>
 8008aec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008b18 <scalbnf+0xb8>
 8008af0:	e7de      	b.n	8008ab0 <scalbnf+0x50>
 8008af2:	3319      	adds	r3, #25
 8008af4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008af8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008afc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008b1c <scalbnf+0xbc>
 8008b00:	ee07 3a10 	vmov	s14, r3
 8008b04:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008b08:	e7b9      	b.n	8008a7e <scalbnf+0x1e>
 8008b0a:	bf00      	nop
 8008b0c:	ffff3cb0 	.word	0xffff3cb0
 8008b10:	4c000000 	.word	0x4c000000
 8008b14:	7149f2ca 	.word	0x7149f2ca
 8008b18:	0da24260 	.word	0x0da24260
 8008b1c:	33000000 	.word	0x33000000

08008b20 <copysign>:
 8008b20:	ec51 0b10 	vmov	r0, r1, d0
 8008b24:	ee11 0a90 	vmov	r0, s3
 8008b28:	ee10 2a10 	vmov	r2, s0
 8008b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008b34:	ea41 0300 	orr.w	r3, r1, r0
 8008b38:	ec43 2b10 	vmov	d0, r2, r3
 8008b3c:	4770      	bx	lr

08008b3e <copysignf>:
 8008b3e:	ee10 3a10 	vmov	r3, s0
 8008b42:	ee10 2a90 	vmov	r2, s1
 8008b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	ee00 3a10 	vmov	s0, r3
 8008b54:	4770      	bx	lr
	...

08008b58 <_init>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr

08008b64 <_fini>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr
