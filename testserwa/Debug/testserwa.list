
testserwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005620  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005934  08005934  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800593c  0800593c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001dc  08005b20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08005b20  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbdb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aba  00000000  00000000  0002bde7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016588  00000000  00000000  0002f000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a50  00000000  00000000  00045588  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ce03  00000000  00000000  0004dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000daddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  000dae58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057a8 	.word	0x080057a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080057a8 	.word	0x080057a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <kierunek>:
static void MX_TIM3_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
/* USER CODE BEGIN PFP */

void kierunek(int a, int b, int c, int d) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(kierunkiL1_GPIO_Port, kierunkiL1_Pin, a);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d84:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <kierunek+0x54>)
 8000d86:	f001 fd17 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kierunkiL2_GPIO_Port, kierunkiL2_Pin, b);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <kierunek+0x58>)
 8000d96:	f001 fd0f 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kierunkiP1_GPIO_Port, kierunkiP1_Pin, c);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	2110      	movs	r1, #16
 8000da2:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <kierunek+0x5c>)
 8000da4:	f001 fd08 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kierunkiP2_GPIO_Port, kierunkiP2_Pin, d);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	2120      	movs	r1, #32
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <kierunek+0x5c>)
 8000db2:	f001 fd01 	bl	80027b8 <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020800 	.word	0x40020800

08000dcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a8e      	ldr	r2, [pc, #568]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	f040 80df 	bne.w	8000f9c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		if (flaga == 1) {
 8000dde:	4b8d      	ldr	r3, [pc, #564]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d138      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x8c>
			kalibracja++;
 8000de6:	4b8c      	ldr	r3, [pc, #560]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a8a      	ldr	r2, [pc, #552]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000dee:	6013      	str	r3, [r2, #0]
			i++;
 8000df0:	4b8a      	ldr	r3, [pc, #552]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a89      	ldr	r2, [pc, #548]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000df8:	6013      	str	r3, [r2, #0]
			j--;
 8000dfa:	4b89      	ldr	r3, [pc, #548]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	4a87      	ldr	r2, [pc, #540]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e02:	6013      	str	r3, [r2, #0]
			if (i == 75) {
 8000e04:	4b85      	ldr	r3, [pc, #532]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b4b      	cmp	r3, #75	; 0x4b
 8000e0a:	d105      	bne.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x4c>
				j = 80;
 8000e0c:	4b84      	ldr	r3, [pc, #528]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e0e:	2250      	movs	r2, #80	; 0x50
 8000e10:	601a      	str	r2, [r3, #0]
				kalibracja = 0;
 8000e12:	4b81      	ldr	r3, [pc, #516]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
			}
			if (kalibracja == 7) {
 8000e18:	4b7f      	ldr	r3, [pc, #508]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b07      	cmp	r3, #7
 8000e1e:	d107      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x64>
				j++;
 8000e20:	4b7f      	ldr	r3, [pc, #508]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a7e      	ldr	r2, [pc, #504]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e28:	6013      	str	r3, [r2, #0]
				kalibracja = 0;
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
			}
			TIM4->CCR4 = i;
 8000e30:	4b7a      	ldr	r3, [pc, #488]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
			TIM4->CCR3 = j;
 8000e38:	4b79      	ldr	r3, [pc, #484]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b79      	ldr	r3, [pc, #484]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000e3e:	63da      	str	r2, [r3, #60]	; 0x3c
			if (i == max) {
 8000e40:	4b76      	ldr	r3, [pc, #472]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d105      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x8c>
				flaga = 0;
 8000e4c:	4b71      	ldr	r3, [pc, #452]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000e52:	486f      	ldr	r0, [pc, #444]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e54:	f002 f97b 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == -1) {
 8000e58:	4b6e      	ldr	r3, [pc, #440]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d138      	bne.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x108>
			kalibracja++;
 8000e62:	4b6d      	ldr	r3, [pc, #436]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a6b      	ldr	r2, [pc, #428]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e6a:	6013      	str	r3, [r2, #0]
			i--;
 8000e6c:	4b6b      	ldr	r3, [pc, #428]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4a6a      	ldr	r2, [pc, #424]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e74:	6013      	str	r3, [r2, #0]
			j++;
 8000e76:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	4a68      	ldr	r2, [pc, #416]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e7e:	6013      	str	r3, [r2, #0]
			if (i == 75) {
 8000e80:	4b66      	ldr	r3, [pc, #408]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b4b      	cmp	r3, #75	; 0x4b
 8000e86:	d105      	bne.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0xc8>
				j = 80;
 8000e88:	4b65      	ldr	r3, [pc, #404]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e8a:	2250      	movs	r2, #80	; 0x50
 8000e8c:	601a      	str	r2, [r3, #0]
				kalibracja = 0;
 8000e8e:	4b62      	ldr	r3, [pc, #392]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
			}
			if (kalibracja == 7) {
 8000e94:	4b60      	ldr	r3, [pc, #384]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	d107      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0xe0>
				j--;
 8000e9c:	4b60      	ldr	r3, [pc, #384]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	4a5f      	ldr	r2, [pc, #380]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ea4:	6013      	str	r3, [r2, #0]
				kalibracja = 0;
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
			}
			TIM4->CCR4 = i;
 8000eac:	4b5b      	ldr	r3, [pc, #364]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
			TIM4->CCR3 = j;
 8000eb4:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
			if (i == max) {
 8000ebc:	4b57      	ldr	r3, [pc, #348]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b59      	ldr	r3, [pc, #356]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d105      	bne.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x108>
				flaga = 0;
 8000ec8:	4b52      	ldr	r3, [pc, #328]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000ece:	4850      	ldr	r0, [pc, #320]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000ed0:	f002 f93d 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 2) {
 8000ed4:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d114      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x13a>
			k++;
 8000edc:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a52      	ldr	r2, [pc, #328]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ee4:	6013      	str	r3, [r2, #0]
			TIM4->CCR2 = k;
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b4e      	ldr	r3, [pc, #312]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
			if (k == max) {
 8000eee:	4b4f      	ldr	r3, [pc, #316]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d105      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x13a>
				flaga = 0;
 8000efa:	4b46      	ldr	r3, [pc, #280]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000f00:	4843      	ldr	r0, [pc, #268]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f02:	f002 f924 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 3) {
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d114      	bne.n	8000f38 <HAL_TIM_PeriodElapsedCallback+0x16c>
			k--;
 8000f0e:	4b47      	ldr	r3, [pc, #284]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4a45      	ldr	r2, [pc, #276]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000f16:	6013      	str	r3, [r2, #0]
			TIM4->CCR2 = k;
 8000f18:	4b44      	ldr	r3, [pc, #272]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f1e:	639a      	str	r2, [r3, #56]	; 0x38
			if (k == max) {
 8000f20:	4b42      	ldr	r3, [pc, #264]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b40      	ldr	r3, [pc, #256]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d105      	bne.n	8000f38 <HAL_TIM_PeriodElapsedCallback+0x16c>
				flaga = 0;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000f32:	4837      	ldr	r0, [pc, #220]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f34:	f002 f90b 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 4) {
 8000f38:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d114      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x19e>
			l++;
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a3a      	ldr	r2, [pc, #232]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f48:	6013      	str	r3, [r2, #0]
			TIM4->CCR1 = l;
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b35      	ldr	r3, [pc, #212]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
			if (l == max) {
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d105      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x19e>
				flaga = 0;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000f64:	482a      	ldr	r0, [pc, #168]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f66:	f002 f8f2 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
		if (flaga == 5) {
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d114      	bne.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0x1d0>
			l--;
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f7a:	6013      	str	r3, [r2, #0]
			TIM4->CCR1 = l;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
			if (l == max) {
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d105      	bne.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				flaga = 0;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000f96:	481e      	ldr	r0, [pc, #120]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f98:	f002 f8d9 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if (htim == &htim9) { //BEDAC W WHILE PRZESTAJE DZIALAC UART
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a25      	ldr	r2, [pc, #148]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d130      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x23a>
		if (obrot == 1) {
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d113      	bne.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x208>
			if (TIM5->CNT <= positions + 500) { //hamowanie
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d80b      	bhi.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x208>
				kierunek(1, 1, 1, 1);
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff fed2 	bl	8000d6c <kierunek>
				obrot = 0;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8000fce:	4819      	ldr	r0, [pc, #100]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000fd0:	f002 f8bd 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
		if (obrot == -1) {
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d113      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x23a>
			if (TIM5->CNT >= positions - 500) {
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d30b      	bcc.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x23a>
				kierunek(1, 1, 1, 1);
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff feb9 	bl	8000d6c <kierunek>
				obrot = 0;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001002:	f002 f8a4 	bl	800314e <HAL_TIM_Base_Stop_IT>
			}
		}
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003b8 	.word	0x200003b8
 8001014:	200001f8 	.word	0x200001f8
 8001018:	200001fc 	.word	0x200001fc
 800101c:	200002e8 	.word	0x200002e8
 8001020:	20000218 	.word	0x20000218
 8001024:	40000800 	.word	0x40000800
 8001028:	200002ec 	.word	0x200002ec
 800102c:	20000260 	.word	0x20000260
 8001030:	2000025c 	.word	0x2000025c
 8001034:	20000330 	.word	0x20000330
 8001038:	20000200 	.word	0x20000200
 800103c:	40000c00 	.word	0x40000c00
 8001040:	200003b4 	.word	0x200003b4
 8001044:	00000000 	.word	0x00000000

08001048 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b093      	sub	sp, #76	; 0x4c
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]

	uint8_t Data[50]; // Tablica przechowujaca wysylana wiadomosc.
	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8001050:	2300      	movs	r3, #0
 8001052:	87fb      	strh	r3, [r7, #62]	; 0x3e

	switch (Received[0]) {
 8001054:	4baa      	ldr	r3, [pc, #680]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3b61      	subs	r3, #97	; 0x61
 800105a:	2b06      	cmp	r3, #6
 800105c:	f200 81d2 	bhi.w	8001404 <HAL_UART_RxCpltCallback+0x3bc>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <HAL_UART_RxCpltCallback+0x20>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001085 	.word	0x08001085
 800106c:	08001133 	.word	0x08001133
 8001070:	08001203 	.word	0x08001203
 8001074:	080012a5 	.word	0x080012a5
 8001078:	0800133d 	.word	0x0800133d
 800107c:	080013cb 	.word	0x080013cb
 8001080:	080013e5 	.word	0x080013e5
	case 'a':
		odczyt = atoi((char*) &Received[1]);
 8001084:	489f      	ldr	r0, [pc, #636]	; (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001086:	f003 fe9d 	bl	8004dc4 <atoi>
 800108a:	4602      	mov	r2, r0
 800108c:	4b9e      	ldr	r3, [pc, #632]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800108e:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001090:	4b9b      	ldr	r3, [pc, #620]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 8001096:	4b9a      	ldr	r3, [pc, #616]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001098:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800109a:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 800109c:	4b98      	ldr	r3, [pc, #608]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 800109e:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80010a0:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 80010a2:	4b97      	ldr	r3, [pc, #604]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80010a4:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80010a6:	f107 000c 	add.w	r0, r7, #12
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	4623      	mov	r3, r4
 80010b0:	460a      	mov	r2, r1
 80010b2:	4996      	ldr	r1, [pc, #600]	; (800130c <HAL_UART_RxCpltCallback+0x2c4>)
 80010b4:	f003 febc 	bl	8004e30 <siprintf>
 80010b8:	4603      	mov	r3, r0
 80010ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = ((((float) odczyt / 180) * 90) + 30);
 80010bc:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c8:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001310 <HAL_UART_RxCpltCallback+0x2c8>
 80010cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d0:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001314 <HAL_UART_RxCpltCallback+0x2cc>
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80010dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e4:	ee17 2a90 	vmov	r2, s15
 80010e8:	4b8b      	ldr	r3, [pc, #556]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80010ea:	601a      	str	r2, [r3, #0]
		i = TIM4->CCR4;
 80010ec:	4b8b      	ldr	r3, [pc, #556]	; (800131c <HAL_UART_RxCpltCallback+0x2d4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <HAL_UART_RxCpltCallback+0x2d8>)
 80010f4:	601a      	str	r2, [r3, #0]
		j = TIM4->CCR3;
 80010f6:	4b89      	ldr	r3, [pc, #548]	; (800131c <HAL_UART_RxCpltCallback+0x2d4>)
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b89      	ldr	r3, [pc, #548]	; (8001324 <HAL_UART_RxCpltCallback+0x2dc>)
 80010fe:	601a      	str	r2, [r3, #0]
		if (max == i)
 8001100:	4b85      	ldr	r3, [pc, #532]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b86      	ldr	r3, [pc, #536]	; (8001320 <HAL_UART_RxCpltCallback+0x2d8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	f000 8176 	beq.w	80013fa <HAL_UART_RxCpltCallback+0x3b2>
			break;
		if (max > i)
 800110e:	4b82      	ldr	r3, [pc, #520]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b83      	ldr	r3, [pc, #524]	; (8001320 <HAL_UART_RxCpltCallback+0x2d8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	dd03      	ble.n	8001122 <HAL_UART_RxCpltCallback+0xda>
			flaga = 1;
 800111a:	4b83      	ldr	r3, [pc, #524]	; (8001328 <HAL_UART_RxCpltCallback+0x2e0>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e003      	b.n	800112a <HAL_UART_RxCpltCallback+0xe2>
		else
			flaga = -1;
 8001122:	4b81      	ldr	r3, [pc, #516]	; (8001328 <HAL_UART_RxCpltCallback+0x2e0>)
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 800112a:	4880      	ldr	r0, [pc, #512]	; (800132c <HAL_UART_RxCpltCallback+0x2e4>)
 800112c:	f001 ffeb 	bl	8003106 <HAL_TIM_Base_Start_IT>
		break; //
 8001130:	e168      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
	case 'b':
		odczyt = atoi((char*) &Received[1]);
 8001132:	4874      	ldr	r0, [pc, #464]	; (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001134:	f003 fe46 	bl	8004dc4 <atoi>
 8001138:	4602      	mov	r2, r0
 800113a:	4b73      	ldr	r3, [pc, #460]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800113c:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800113e:	4b70      	ldr	r3, [pc, #448]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 8001144:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001146:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001148:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 800114a:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 800114c:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800114e:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 8001150:	4b6b      	ldr	r3, [pc, #428]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001152:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001154:	f107 000c 	add.w	r0, r7, #12
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	9200      	str	r2, [sp, #0]
 800115c:	4623      	mov	r3, r4
 800115e:	460a      	mov	r2, r1
 8001160:	496a      	ldr	r1, [pc, #424]	; (800130c <HAL_UART_RxCpltCallback+0x2c4>)
 8001162:	f003 fe65 	bl	8004e30 <siprintf>
 8001166:	4603      	mov	r3, r0
 8001168:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = (((-0.53) * (float) odczyt) + (119.3));
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ee17 0a90 	vmov	r0, s15
 800117a:	f7ff f9e5 	bl	8000548 <__aeabi_f2d>
 800117e:	a35c      	add	r3, pc, #368	; (adr r3, 80012f0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa38 	bl	80005f8 <__aeabi_dmul>
 8001188:	4603      	mov	r3, r0
 800118a:	460c      	mov	r4, r1
 800118c:	4618      	mov	r0, r3
 800118e:	4621      	mov	r1, r4
 8001190:	a359      	add	r3, pc, #356	; (adr r3, 80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f879 	bl	800028c <__adddf3>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	4618      	mov	r0, r3
 80011a0:	4621      	mov	r1, r4
 80011a2:	f7ff fc3b 	bl	8000a1c <__aeabi_d2iz>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011aa:	601a      	str	r2, [r3, #0]
		if (max > 98)
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b62      	cmp	r3, #98	; 0x62
 80011b2:	dd02      	ble.n	80011ba <HAL_UART_RxCpltCallback+0x172>
			max = 98;
 80011b4:	4b58      	ldr	r3, [pc, #352]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011b6:	2262      	movs	r2, #98	; 0x62
 80011b8:	601a      	str	r2, [r3, #0]
		if (max < 25)
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b18      	cmp	r3, #24
 80011c0:	dc02      	bgt.n	80011c8 <HAL_UART_RxCpltCallback+0x180>
			max = 25;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011c4:	2219      	movs	r2, #25
 80011c6:	601a      	str	r2, [r3, #0]
		//OBSLUGA BLEDU
		k = TIM4->CCR2;
 80011c8:	4b54      	ldr	r3, [pc, #336]	; (800131c <HAL_UART_RxCpltCallback+0x2d4>)
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b58      	ldr	r3, [pc, #352]	; (8001330 <HAL_UART_RxCpltCallback+0x2e8>)
 80011d0:	601a      	str	r2, [r3, #0]
		if (max == k)
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b56      	ldr	r3, [pc, #344]	; (8001330 <HAL_UART_RxCpltCallback+0x2e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	f000 810f 	beq.w	80013fe <HAL_UART_RxCpltCallback+0x3b6>
			break;
		if (max > k)
 80011e0:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b52      	ldr	r3, [pc, #328]	; (8001330 <HAL_UART_RxCpltCallback+0x2e8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dd03      	ble.n	80011f4 <HAL_UART_RxCpltCallback+0x1ac>
			flaga = 2;
 80011ec:	4b4e      	ldr	r3, [pc, #312]	; (8001328 <HAL_UART_RxCpltCallback+0x2e0>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e002      	b.n	80011fa <HAL_UART_RxCpltCallback+0x1b2>
		else
			flaga = 3;
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <HAL_UART_RxCpltCallback+0x2e0>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80011fa:	484c      	ldr	r0, [pc, #304]	; (800132c <HAL_UART_RxCpltCallback+0x2e4>)
 80011fc:	f001 ff83 	bl	8003106 <HAL_TIM_Base_Start_IT>
		break;
 8001200:	e100      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
	case 'c':
		odczyt = atoi((char*) &Received[1]);
 8001202:	4840      	ldr	r0, [pc, #256]	; (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001204:	f003 fdde 	bl	8004dc4 <atoi>
 8001208:	4602      	mov	r2, r0
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800120c:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800120e:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001216:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001218:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 800121c:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800121e:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001222:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001224:	f107 000c 	add.w	r0, r7, #12
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	4623      	mov	r3, r4
 800122e:	460a      	mov	r2, r1
 8001230:	4936      	ldr	r1, [pc, #216]	; (800130c <HAL_UART_RxCpltCallback+0x2c4>)
 8001232:	f003 fdfd 	bl	8004e30 <siprintf>
 8001236:	4603      	mov	r3, r0
 8001238:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = ((((float) odczyt / 180) * 90) + 30);
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001246:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001310 <HAL_UART_RxCpltCallback+0x2c8>
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001314 <HAL_UART_RxCpltCallback+0x2cc>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800125a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800125e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001262:	ee17 2a90 	vmov	r2, s15
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 8001268:	601a      	str	r2, [r3, #0]
		l = TIM4->CCR1;
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_UART_RxCpltCallback+0x2d4>)
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	461a      	mov	r2, r3
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_UART_RxCpltCallback+0x2ec>)
 8001272:	601a      	str	r2, [r3, #0]
		if (max == l)
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_UART_RxCpltCallback+0x2ec>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	f000 80c0 	beq.w	8001402 <HAL_UART_RxCpltCallback+0x3ba>
			break;
		if (max > l)
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_UART_RxCpltCallback+0x2ec>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	dd03      	ble.n	8001296 <HAL_UART_RxCpltCallback+0x24e>
			flaga = 4;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_UART_RxCpltCallback+0x2e0>)
 8001290:	2204      	movs	r2, #4
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e002      	b.n	800129c <HAL_UART_RxCpltCallback+0x254>
		else
			flaga = 5;
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_UART_RxCpltCallback+0x2e0>)
 8001298:	2205      	movs	r2, #5
 800129a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 800129c:	4823      	ldr	r0, [pc, #140]	; (800132c <HAL_UART_RxCpltCallback+0x2e4>)
 800129e:	f001 ff32 	bl	8003106 <HAL_TIM_Base_Start_IT>
		break;
 80012a2:	e0af      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
	case 'd':
		odczyt = atoi((char*) &Received[1]);
 80012a4:	4817      	ldr	r0, [pc, #92]	; (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80012a6:	f003 fd8d 	bl	8004dc4 <atoi>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 80012ae:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80012b8:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80012ba:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80012be:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80012c0:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80012c4:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 80012c6:	f107 000c 	add.w	r0, r7, #12
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	9200      	str	r2, [sp, #0]
 80012ce:	4623      	mov	r3, r4
 80012d0:	460a      	mov	r2, r1
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <HAL_UART_RxCpltCallback+0x2c4>)
 80012d4:	f003 fdac 	bl	8004e30 <siprintf>
 80012d8:	4603      	mov	r3, r0
 80012da:	87fb      	strh	r3, [r7, #62]	; 0x3e
		max = odczyt + 25;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3319      	adds	r3, #25
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80012e4:	6013      	str	r3, [r2, #0]
		TIM3->CCR2 = max;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_UART_RxCpltCallback+0x2d0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_UART_RxCpltCallback+0x2f0>)
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80012ee:	e089      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
 80012f0:	8f5c28f6 	.word	0x8f5c28f6
 80012f4:	bfe0f5c2 	.word	0xbfe0f5c2
 80012f8:	33333333 	.word	0x33333333
 80012fc:	405dd333 	.word	0x405dd333
 8001300:	20000210 	.word	0x20000210
 8001304:	20000211 	.word	0x20000211
 8001308:	20000370 	.word	0x20000370
 800130c:	080057c0 	.word	0x080057c0
 8001310:	43340000 	.word	0x43340000
 8001314:	42b40000 	.word	0x42b40000
 8001318:	200002ec 	.word	0x200002ec
 800131c:	40000800 	.word	0x40000800
 8001320:	200002e8 	.word	0x200002e8
 8001324:	20000218 	.word	0x20000218
 8001328:	200001f8 	.word	0x200001f8
 800132c:	200003b8 	.word	0x200003b8
 8001330:	20000260 	.word	0x20000260
 8001334:	2000025c 	.word	0x2000025c
 8001338:	40000400 	.word	0x40000400
	case 'e':
		//TIM5->CNT = 3875;
		odczyt = atoi((char*) &Received[1]);
 800133c:	4839      	ldr	r0, [pc, #228]	; (8001424 <HAL_UART_RxCpltCallback+0x3dc>)
 800133e:	f003 fd41 	bl	8004dc4 <atoi>
 8001342:	4602      	mov	r2, r0
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <HAL_UART_RxCpltCallback+0x3e0>)
 8001346:	601a      	str	r2, [r3, #0]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_UART_RxCpltCallback+0x3e4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
				Received[1], Received[2], Received[3]);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_UART_RxCpltCallback+0x3e4>)
 8001350:	785b      	ldrb	r3, [r3, #1]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001352:	461c      	mov	r4, r3
				Received[1], Received[2], Received[3]);
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <HAL_UART_RxCpltCallback+0x3e4>)
 8001356:	789b      	ldrb	r3, [r3, #2]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 8001358:	461a      	mov	r2, r3
				Received[1], Received[2], Received[3]);
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_UART_RxCpltCallback+0x3e4>)
 800135c:	78db      	ldrb	r3, [r3, #3]
		size = sprintf((char*) Data, "Odebrano znak: %c%c%c%c\n\r", Received[0],
 800135e:	f107 000c 	add.w	r0, r7, #12
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	9200      	str	r2, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	460a      	mov	r2, r1
 800136a:	4931      	ldr	r1, [pc, #196]	; (8001430 <HAL_UART_RxCpltCallback+0x3e8>)
 800136c:	f003 fd60 	bl	8004e30 <siprintf>
 8001370:	4603      	mov	r3, r0
 8001372:	87fb      	strh	r3, [r7, #62]	; 0x3e
		positions = (odczyt * 32) + 1405;
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <HAL_UART_RxCpltCallback+0x3e0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	015b      	lsls	r3, r3, #5
 800137a:	f203 537d 	addw	r3, r3, #1405	; 0x57d
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <HAL_UART_RxCpltCallback+0x3ec>)
 8001380:	6013      	str	r3, [r2, #0]
		if (positions < TIM5->CNT) {
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_UART_RxCpltCallback+0x3f0>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	4a2b      	ldr	r2, [pc, #172]	; (8001434 <HAL_UART_RxCpltCallback+0x3ec>)
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	4293      	cmp	r3, r2
 800138c:	d909      	bls.n	80013a2 <HAL_UART_RxCpltCallback+0x35a>
			kierunek(0, 1, 1, 0); //obrot w prawo
 800138e:	2300      	movs	r3, #0
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fce9 	bl	8000d6c <kierunek>
			obrot = 1;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_UART_RxCpltCallback+0x3f4>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e009      	b.n	80013b6 <HAL_UART_RxCpltCallback+0x36e>
		} else {
			kierunek(1, 0, 0, 1); //obrot w lewo
 80013a2:	2301      	movs	r3, #1
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fcdf 	bl	8000d6c <kierunek>
			obrot = -1;
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_UART_RxCpltCallback+0x3f4>)
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	601a      	str	r2, [r3, #0]
		}
		TIM1->CCR2 = 60;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_UART_RxCpltCallback+0x3f8>)
 80013b8:	223c      	movs	r2, #60	; 0x3c
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR4 = 40;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_UART_RxCpltCallback+0x3f8>)
 80013be:	2228      	movs	r2, #40	; 0x28
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_Base_Start_IT(&htim9);
 80013c2:	4820      	ldr	r0, [pc, #128]	; (8001444 <HAL_UART_RxCpltCallback+0x3fc>)
 80013c4:	f001 fe9f 	bl	8003106 <HAL_TIM_Base_Start_IT>
		break;
 80013c8:	e01c      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
	case 'f': //jazda do przodu
		kierunek(1, 0, 1, 0);
 80013ca:	2300      	movs	r3, #0
 80013cc:	2201      	movs	r2, #1
 80013ce:	2100      	movs	r1, #0
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fccb 	bl	8000d6c <kierunek>
		TIM1->CCR2 = 100;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_UART_RxCpltCallback+0x3f8>)
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR4 = 70;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_RxCpltCallback+0x3f8>)
 80013de:	2246      	movs	r2, #70	; 0x46
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80013e2:	e00f      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
	case 'g': //zatrzymanie
		kierunek(1, 1, 1, 1);
 80013e4:	2301      	movs	r3, #1
 80013e6:	2201      	movs	r2, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fcbe 	bl	8000d6c <kierunek>
		TIM5->CNT = 7000;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_UART_RxCpltCallback+0x3f0>)
 80013f2:	f641 3258 	movw	r2, #7000	; 0x1b58
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80013f8:	e004      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
			break;
 80013fa:	bf00      	nop
 80013fc:	e002      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
			break;
 80013fe:	bf00      	nop
 8001400:	e000      	b.n	8001404 <HAL_UART_RxCpltCallback+0x3bc>
			break;
 8001402:	bf00      	nop
	}

	HAL_UART_Transmit_IT(&huart6, Data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8001404:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	480e      	ldr	r0, [pc, #56]	; (8001448 <HAL_UART_RxCpltCallback+0x400>)
 800140e:	f002 fe8c 	bl	800412a <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 4); // Ponowne włączenie nasłuchiwania
 8001412:	2204      	movs	r2, #4
 8001414:	4905      	ldr	r1, [pc, #20]	; (800142c <HAL_UART_RxCpltCallback+0x3e4>)
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <HAL_UART_RxCpltCallback+0x400>)
 8001418:	f002 fecc 	bl	80041b4 <HAL_UART_Receive_IT>
}
 800141c:	bf00      	nop
 800141e:	3744      	adds	r7, #68	; 0x44
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	20000211 	.word	0x20000211
 8001428:	20000370 	.word	0x20000370
 800142c:	20000210 	.word	0x20000210
 8001430:	080057c0 	.word	0x080057c0
 8001434:	200003b4 	.word	0x200003b4
 8001438:	40000c00 	.word	0x40000c00
 800143c:	20000200 	.word	0x20000200
 8001440:	40010000 	.word	0x40010000
 8001444:	20000330 	.word	0x20000330
 8001448:	20000374 	.word	0x20000374

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f000 fe8a 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f864 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001458:	f000 fb36 	bl	8001ac8 <MX_GPIO_Init>
  MX_TIM4_Init();
 800145c:	f000 fa00 	bl	8001860 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001460:	f000 f956 	bl	8001710 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8001464:	f000 fb06 	bl	8001a74 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001468:	f000 f8c2 	bl	80015f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800146c:	f000 f99e 	bl	80017ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8001470:	f000 fa72 	bl	8001958 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001474:	f000 fac4 	bl	8001a00 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
	//HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); //enkoder z 1 silnika
 8001478:	213c      	movs	r1, #60	; 0x3c
 800147a:	4820      	ldr	r0, [pc, #128]	; (80014fc <main+0xb0>)
 800147c:	f001 ff82 	bl	8003384 <HAL_TIM_Encoder_Start>
	TIM5->CNT = 7000; //pozycja poczatkowa podstawy odpowiadajaca 180stopni
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <main+0xb4>)
 8001482:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // ten sam przy podstawie
 8001488:	210c      	movs	r1, #12
 800148a:	481e      	ldr	r0, [pc, #120]	; (8001504 <main+0xb8>)
 800148c:	f001 feb6 	bl	80031fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // ten sam przy podstawie
 8001490:	2108      	movs	r1, #8
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <main+0xb8>)
 8001494:	f001 feb2 	bl	80031fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // srodkowy przegub
 8001498:	2104      	movs	r1, #4
 800149a:	481a      	ldr	r0, [pc, #104]	; (8001504 <main+0xb8>)
 800149c:	f001 feae 	bl	80031fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // obrot efektorem
 80014a0:	2100      	movs	r1, #0
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <main+0xb8>)
 80014a4:	f001 feaa 	bl	80031fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // chwytak
 80014a8:	2104      	movs	r1, #4
 80014aa:	4817      	ldr	r0, [pc, #92]	; (8001508 <main+0xbc>)
 80014ac:	f001 fea6 	bl	80031fc <HAL_TIM_PWM_Start>
	/*
	 * KONFIGURACJA POCZATKOWA MANIPULATORA
	 */
	TIM4->CCR4 = 120; //(75 srodek) inkrementacja ruch w przod
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <main+0xc0>)
 80014b2:	2278      	movs	r2, #120	; 0x78
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR3 = 41; //(80 na srodku) inkremetacja odchyla w tyl
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <main+0xc0>)
 80014b8:	2229      	movs	r2, #41	; 0x29
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR2 = 98; //25-125 inkrementacja zamyka (66 kat prosty) (25 wyprostowane) (98 zamkniety)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <main+0xc0>)
 80014be:	2262      	movs	r2, #98	; 0x62
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = 75; //25-125 inkrementacja skreca w lewo (75 srodek) (125 max w prawo) (25 max w lewo ale lekko wychodzi poza zakres)
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <main+0xc0>)
 80014c4:	224b      	movs	r2, #75	; 0x4b
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34
	kierunek(1, 0, 1, 0); // jazda na wprost
 80014c8:	2300      	movs	r3, #0
 80014ca:	2201      	movs	r2, #1
 80014cc:	2100      	movs	r1, #0
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fc4c 	bl	8000d6c <kierunek>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PRAWY (2)  100 dobra predkosc
 80014d4:	2104      	movs	r1, #4
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <main+0xc4>)
 80014d8:	f001 fe90 	bl	80031fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LEWY (1)    70 dobra predkosc
 80014dc:	210c      	movs	r1, #12
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <main+0xc4>)
 80014e0:	f001 fe8c 	bl	80031fc <HAL_TIM_PWM_Start>
	TIM1->CCR2 = 0;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <main+0xc8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR4 = 0;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <main+0xc8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_UART_Receive_IT(&huart6, (uint8_t*) &Received, 4);
 80014f0:	2204      	movs	r2, #4
 80014f2:	4909      	ldr	r1, [pc, #36]	; (8001518 <main+0xcc>)
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <main+0xd0>)
 80014f6:	f002 fe5d 	bl	80041b4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80014fa:	e7fe      	b.n	80014fa <main+0xae>
 80014fc:	20000268 	.word	0x20000268
 8001500:	40000c00 	.word	0x40000c00
 8001504:	2000021c 	.word	0x2000021c
 8001508:	200002a8 	.word	0x200002a8
 800150c:	40000800 	.word	0x40000800
 8001510:	200002f0 	.word	0x200002f0
 8001514:	40010000 	.word	0x40010000
 8001518:	20000210 	.word	0x20000210
 800151c:	20000374 	.word	0x20000374

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	; 0x50
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	2230      	movs	r2, #48	; 0x30
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fc76 	bl	8004e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <SystemClock_Config+0xc8>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <SystemClock_Config+0xc8>)
 800154e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <SystemClock_Config+0xc8>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <SystemClock_Config+0xcc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a20      	ldr	r2, [pc, #128]	; (80015ec <SystemClock_Config+0xcc>)
 800156a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <SystemClock_Config+0xcc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	2302      	movs	r3, #2
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001594:	2364      	movs	r3, #100	; 0x64
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f921 	bl	80027ec <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015b0:	f000 fb32 	bl	8001c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2103      	movs	r1, #3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 fb7b 	bl	8002ccc <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015dc:	f000 fb1c 	bl	8001c18 <Error_Handler>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3750      	adds	r7, #80	; 0x50
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b092      	sub	sp, #72	; 0x48
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2220      	movs	r2, #32
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fc00 	bl	8004e20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <MX_TIM1_Init+0x118>)
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <MX_TIM1_Init+0x11c>)
 8001624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <MX_TIM1_Init+0x118>)
 8001628:	f242 720f 	movw	r2, #9999	; 0x270f
 800162c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <MX_TIM1_Init+0x118>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <MX_TIM1_Init+0x118>)
 8001636:	2263      	movs	r2, #99	; 0x63
 8001638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <MX_TIM1_Init+0x118>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <MX_TIM1_Init+0x118>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <MX_TIM1_Init+0x118>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800164c:	482e      	ldr	r0, [pc, #184]	; (8001708 <MX_TIM1_Init+0x118>)
 800164e:	f001 fda9 	bl	80031a4 <HAL_TIM_PWM_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001658:	f000 fade 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001668:	4619      	mov	r1, r3
 800166a:	4827      	ldr	r0, [pc, #156]	; (8001708 <MX_TIM1_Init+0x118>)
 800166c:	f002 fc3c 	bl	8003ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001676:	f000 facf 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167a:	2360      	movs	r3, #96	; 0x60
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	2204      	movs	r2, #4
 800169c:	4619      	mov	r1, r3
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <MX_TIM1_Init+0x118>)
 80016a0:	f001 ffb0 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80016aa:	f000 fab5 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	220c      	movs	r2, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <MX_TIM1_Init+0x118>)
 80016b8:	f001 ffa4 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80016c2:	f000 faa9 	bl	8001c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM1_Init+0x118>)
 80016ea:	f002 fc6b 	bl	8003fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80016f4:	f000 fa90 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM1_Init+0x118>)
 80016fa:	f000 fb9d 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3748      	adds	r7, #72	; 0x48
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002f0 	.word	0x200002f0
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_TIM2_Init+0x98>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001736:	f640 729f 	movw	r2, #3999	; 0xf9f
 800173a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM2_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_TIM2_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001758:	f001 fcaa 	bl	80030b0 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001762:	f000 fa59 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001774:	f002 f80c 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800177e:	f000 fa4b 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001790:	f002 fbaa 	bl	8003ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800179a:	f000 fa3d 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200003b8 	.word	0x200003b8

080017ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_TIM3_Init+0xac>)
 80017d0:	4a22      	ldr	r2, [pc, #136]	; (800185c <MX_TIM3_Init+0xb0>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_TIM3_Init+0xac>)
 80017d6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_TIM3_Init+0xac>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_TIM3_Init+0xac>)
 80017e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <MX_TIM3_Init+0xac>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_TIM3_Init+0xac>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <MX_TIM3_Init+0xac>)
 80017f8:	f001 fcd4 	bl	80031a4 <HAL_TIM_PWM_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001802:	f000 fa09 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4619      	mov	r1, r3
 8001814:	4810      	ldr	r0, [pc, #64]	; (8001858 <MX_TIM3_Init+0xac>)
 8001816:	f002 fb67 	bl	8003ee8 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001820:	f000 f9fa 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001824:	2360      	movs	r3, #96	; 0x60
 8001826:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2204      	movs	r2, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM3_Init+0xac>)
 800183c:	f001 fee2 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001846:	f000 f9e7 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM3_Init+0xac>)
 800184c:	f000 faf4 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200002a8 	.word	0x200002a8
 800185c:	40000400 	.word	0x40000400

08001860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <MX_TIM4_Init+0xf0>)
 8001884:	4a33      	ldr	r2, [pc, #204]	; (8001954 <MX_TIM4_Init+0xf4>)
 8001886:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1999;
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <MX_TIM4_Init+0xf0>)
 800188a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800188e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <MX_TIM4_Init+0xf0>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <MX_TIM4_Init+0xf0>)
 8001898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <MX_TIM4_Init+0xf0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <MX_TIM4_Init+0xf0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018aa:	4829      	ldr	r0, [pc, #164]	; (8001950 <MX_TIM4_Init+0xf0>)
 80018ac:	f001 fc7a 	bl	80031a4 <HAL_TIM_PWM_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80018b6:	f000 f9af 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	4619      	mov	r1, r3
 80018c8:	4821      	ldr	r0, [pc, #132]	; (8001950 <MX_TIM4_Init+0xf0>)
 80018ca:	f002 fb0d 	bl	8003ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80018d4:	f000 f9a0 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d8:	2360      	movs	r3, #96	; 0x60
 80018da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <MX_TIM4_Init+0xf0>)
 80018f0:	f001 fe88 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80018fa:	f000 f98d 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2204      	movs	r2, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_TIM4_Init+0xf0>)
 8001906:	f001 fe7d 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001910:	f000 f982 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2208      	movs	r2, #8
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM4_Init+0xf0>)
 800191c:	f001 fe72 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001926:	f000 f977 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	220c      	movs	r2, #12
 800192e:	4619      	mov	r1, r3
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM4_Init+0xf0>)
 8001932:	f001 fe67 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800193c:	f000 f96c 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM4_Init+0xf0>)
 8001942:	f000 fa79 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000021c 	.word	0x2000021c
 8001954:	40000800 	.word	0x40000800

08001958 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fa5a 	bl	8004e20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <MX_TIM5_Init+0xa4>)
 8001978:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_TIM5_Init+0xa0>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 14000;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001988:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800198c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800199a:	2303      	movs	r3, #3
 800199c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80019aa:	230f      	movs	r3, #15
 80019ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80019ba:	230f      	movs	r3, #15
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM5_Init+0xa0>)
 80019c6:	f001 fc4b 	bl	8003260 <HAL_TIM_Encoder_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80019d0:	f000 f922 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM5_Init+0xa0>)
 80019e2:	f002 fa81 	bl	8003ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80019ec:	f000 f914 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000268 	.word	0x20000268
 80019fc:	40000c00 	.word	0x40000c00

08001a00 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a14:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <MX_TIM9_Init+0x70>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 499;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a1a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001a1e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a28:	2263      	movs	r2, #99	; 0x63
 8001a2a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a3a:	f001 fb39 	bl	80030b0 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001a44:	f000 f8e8 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_TIM9_Init+0x6c>)
 8001a54:	f001 fe9c 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001a5e:	f000 f8db 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000330 	.word	0x20000330
 8001a70:	40014000 	.word	0x40014000

08001a74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <MX_USART6_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001aac:	f002 faf0 	bl	8004090 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f000 f8af 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000374 	.word	0x20000374
 8001ac4:	40011400 	.word	0x40011400

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a3a      	ldr	r2, [pc, #232]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a33      	ldr	r2, [pc, #204]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <MX_GPIO_Init+0x140>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, kierunkiP1_Pin|kierunkiP2_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2130      	movs	r1, #48	; 0x30
 8001b8a:	4820      	ldr	r0, [pc, #128]	; (8001c0c <MX_GPIO_Init+0x144>)
 8001b8c:	f000 fe14 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(kierunkiL1_GPIO_Port, kierunkiL1_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <MX_GPIO_Init+0x148>)
 8001b98:	f000 fe0e 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(kierunkiL2_GPIO_Port, kierunkiL2_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba2:	481c      	ldr	r0, [pc, #112]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001ba4:	f000 fe08 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : kierunkiP1_Pin kierunkiP2_Pin */
  GPIO_InitStruct.Pin = kierunkiP1_Pin|kierunkiP2_Pin;
 8001ba8:	2330      	movs	r3, #48	; 0x30
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_GPIO_Init+0x144>)
 8001bc0:	f000 fc78 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : kierunkiL1_Pin */
  GPIO_InitStruct.Pin = kierunkiL1_Pin;
 8001bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(kierunkiL1_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <MX_GPIO_Init+0x148>)
 8001bde:	f000 fc69 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : kierunkiL2_Pin */
  GPIO_InitStruct.Pin = kierunkiL2_Pin;
 8001be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(kierunkiL2_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001bfc:	f000 fc5a 	bl	80024b4 <HAL_GPIO_Init>

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40020400 	.word	0x40020400

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_TIM_PWM_MspInit+0x98>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d116      	bne.n	8001cb8 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2018      	movs	r0, #24
 8001cac:	f000 fba9 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cb0:	2018      	movs	r0, #24
 8001cb2:	f000 fbc2 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cb6:	e026      	b.n	8001d06 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_TIM_PWM_MspInit+0xa0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
}
 8001cde:	e012      	b.n	8001d06 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <HAL_TIM_PWM_MspInit+0xa4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d10d      	bne.n	8001d06 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d30:	d116      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_TIM_Base_MspInit+0x80>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_TIM_Base_MspInit+0x80>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_TIM_Base_MspInit+0x80>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	201c      	movs	r0, #28
 8001d54:	f000 fb55 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d58:	201c      	movs	r0, #28
 8001d5a:	f000 fb6e 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d5e:	e01a      	b.n	8001d96 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_TIM_Base_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d115      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0x80>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_TIM_Base_MspInit+0x80>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_TIM_Base_MspInit+0x80>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2018      	movs	r0, #24
 8001d8c:	f000 fb39 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d90:	2018      	movs	r0, #24
 8001d92:	f000 fb52 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40014000 	.word	0x40014000

08001da8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_TIM_Encoder_MspInit+0x84>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12b      	bne.n	8001e22 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = enkoder1_Pin|enkoder2_Pin;
 8001e02:	2303      	movs	r3, #3
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e12:	2302      	movs	r3, #2
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e1e:	f000 fb49 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a37      	ldr	r2, [pc, #220]	; (8001f34 <HAL_TIM_MspPostInit+0xfc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11f      	bne.n	8001e9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a35      	ldr	r2, [pc, #212]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001e64:	f043 0310 	orr.w	r3, r3, #16
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = silnikPrawy_Pin|silnikLewy_Pin;
 8001e76:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	482a      	ldr	r0, [pc, #168]	; (8001f3c <HAL_TIM_MspPostInit+0x104>)
 8001e94:	f000 fb0e 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e98:	e047      	b.n	8001f2a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_TIM_MspPostInit+0x108>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d11e      	bne.n	8001ee2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = chwytak_Pin;
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(chwytak_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481a      	ldr	r0, [pc, #104]	; (8001f44 <HAL_TIM_MspPostInit+0x10c>)
 8001edc:	f000 faea 	bl	80024b4 <HAL_GPIO_Init>
}
 8001ee0:	e023      	b.n	8001f2a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_TIM_MspPostInit+0x110>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d11e      	bne.n	8001f2a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	6313      	str	r3, [r2, #48]	; 0x30
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_TIM_MspPostInit+0x100>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = przegub2_Pin|przegub1_Pin|podstawa2_Pin|podstawa1_Pin;
 8001f08:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <HAL_TIM_MspPostInit+0x114>)
 8001f26:	f000 fac5 	bl	80024b4 <HAL_GPIO_Init>
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40020c00 	.word	0x40020c00

08001f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_UART_MspInit+0x94>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d133      	bne.n	8001fda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_UART_MspInit+0x98>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_UART_MspInit+0x98>)
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_UART_MspInit+0x98>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0x98>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_UART_MspInit+0x98>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_UART_MspInit+0x98>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001faa:	23c0      	movs	r3, #192	; 0xc0
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <HAL_UART_MspInit+0x9c>)
 8001fc6:	f000 fa75 	bl	80024b4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2047      	movs	r0, #71	; 0x47
 8001fd0:	f000 fa17 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fd4:	2047      	movs	r0, #71	; 0x47
 8001fd6:	f000 fa30 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020800 	.word	0x40020800

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f8e2 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002052:	f001 f9ce 	bl	80033f2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002058:	f001 f9cb 	bl	80033f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200002f0 	.word	0x200002f0
 8002064:	20000330 	.word	0x20000330

08002068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM2_IRQHandler+0x10>)
 800206e:	f001 f9c0 	bl	80033f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003b8 	.word	0x200003b8

0800207c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <USART6_IRQHandler+0x10>)
 8002082:	f002 f8ed 	bl	8004260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000374 	.word	0x20000374

08002090 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <_sbrk+0x50>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x16>
		heap_end = &end;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <_sbrk+0x50>)
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <_sbrk+0x54>)
 80020a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <_sbrk+0x50>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <_sbrk+0x50>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	466a      	mov	r2, sp
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d907      	bls.n	80020ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ba:	f002 fe87 	bl	8004dcc <__errno>
 80020be:	4602      	mov	r2, r0
 80020c0:	230c      	movs	r3, #12
 80020c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	e006      	b.n	80020d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <_sbrk+0x50>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <_sbrk+0x50>)
 80020d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000204 	.word	0x20000204
 80020e4:	20000400 	.word	0x20000400

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <SystemInit+0x28>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <SystemInit+0x28>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SystemInit+0x28>)
 80020fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002102:	609a      	str	r2, [r3, #8]
#endif
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800211a:	e003      	b.n	8002124 <LoopCopyDataInit>

0800211c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800211e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002122:	3104      	adds	r1, #4

08002124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800212a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800212c:	d3f6      	bcc.n	800211c <CopyDataInit>
  ldr  r2, =_sbss
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002130:	e002      	b.n	8002138 <LoopFillZerobss>

08002132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002134:	f842 3b04 	str.w	r3, [r2], #4

08002138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800213a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800213c:	d3f9      	bcc.n	8002132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800213e:	f7ff ffd3 	bl	80020e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002142:	f002 fe49 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7ff f981 	bl	800144c <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800214c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002150:	08005944 	.word	0x08005944
  ldr  r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002158:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800215c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002160:	20000400 	.word	0x20000400

08002164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC_IRQHandler>
	...

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_Init+0x40>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_Init+0x40>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x40>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 f92b 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f000 f808 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fd44 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x54>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f943 	bl	8002456 <HAL_SYSTICK_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00e      	b.n	80021f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d80a      	bhi.n	80021f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f000 f90b 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <HAL_InitTick+0x5c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000000 	.word	0x20000000
 8002204:	20000008 	.word	0x20000008
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008
 8002230:	200003f8 	.word	0x200003f8

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200003f8 	.word	0x200003f8

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff3e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff31 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d004      	beq.n	800248c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e00c      	b.n	80024a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2205      	movs	r2, #5
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e159      	b.n	8002784 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8148 	bne.w	800277e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d00b      	beq.n	800250e <HAL_GPIO_Init+0x5a>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002502:	2b11      	cmp	r3, #17
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b12      	cmp	r3, #18
 800250c:	d130      	bne.n	8002570 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0201 	and.w	r2, r3, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0xfc>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a2 	beq.w	800277e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_GPIO_Init+0x2e4>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a55      	ldr	r2, [pc, #340]	; (8002798 <HAL_GPIO_Init+0x2e4>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_GPIO_Init+0x2e4>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_GPIO_Init+0x2ec>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x202>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x1fe>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <HAL_GPIO_Init+0x2f4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x1fa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <HAL_GPIO_Init+0x2f8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x1f6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <HAL_GPIO_Init+0x2fc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x1f2>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4934      	ldr	r1, [pc, #208]	; (800279c <HAL_GPIO_Init+0x2e8>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_GPIO_Init+0x300>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fa:	4a2e      	ldr	r2, [pc, #184]	; (80027b4 <HAL_GPIO_Init+0x300>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_GPIO_Init+0x300>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002724:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <HAL_GPIO_Init+0x300>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_GPIO_Init+0x300>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_GPIO_Init+0x300>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_GPIO_Init+0x300>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_GPIO_Init+0x300>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f aea2 	bls.w	80024d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	3724      	adds	r7, #36	; 0x24
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	619a      	str	r2, [r3, #24]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e25b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4ba0      	ldr	r3, [pc, #640]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b9d      	ldr	r3, [pc, #628]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b99      	ldr	r3, [pc, #612]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e236      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a90      	ldr	r2, [pc, #576]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a8a      	ldr	r2, [pc, #552]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a87      	ldr	r2, [pc, #540]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b84      	ldr	r3, [pc, #528]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a83      	ldr	r2, [pc, #524]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a80      	ldr	r2, [pc, #512]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fcc6 	bl	8002234 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fcc2 	bl	8002234 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1fb      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fcb2 	bl	8002234 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fcae 	bl	8002234 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1e7      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1bb      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4952      	ldr	r1, [pc, #328]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <HAL_RCC_OscConfig+0x2b0>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7ff fc67 	bl	8002234 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff fc63 	bl	8002234 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e19c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4940      	ldr	r1, [pc, #256]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_RCC_OscConfig+0x2b0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff fc46 	bl	8002234 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff fc42 	bl	8002234 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e17b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d030      	beq.n	8002a38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <HAL_RCC_OscConfig+0x2b4>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff fc26 	bl	8002234 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff fc22 	bl	8002234 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e15b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e015      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x2b4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7ff fc0f 	bl	8002234 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fc0b 	bl	8002234 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e144      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a0 	beq.w	8002b86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_OscConfig+0x2b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_RCC_OscConfig+0x2b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_RCC_OscConfig+0x2b8>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff fbd1 	bl	8002234 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x2ce>
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	42470000 	.word	0x42470000
 8002aa0:	42470e80 	.word	0x42470e80
 8002aa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7ff fbc4 	bl	8002234 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0fd      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b81      	ldr	r3, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x4d4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x2f0>
 8002ace:	4b7d      	ldr	r3, [pc, #500]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a7c      	ldr	r2, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	e01c      	b.n	8002b16 <HAL_RCC_OscConfig+0x32a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCC_OscConfig+0x312>
 8002ae4:	4b77      	ldr	r3, [pc, #476]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a76      	ldr	r2, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	4b74      	ldr	r3, [pc, #464]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a73      	ldr	r2, [pc, #460]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	e00b      	b.n	8002b16 <HAL_RCC_OscConfig+0x32a>
 8002afe:	4b71      	ldr	r3, [pc, #452]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a70      	ldr	r2, [pc, #448]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b6e      	ldr	r3, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a6d      	ldr	r2, [pc, #436]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d015      	beq.n	8002b4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fb89 	bl	8002234 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7ff fb85 	bl	8002234 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0bc      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ee      	beq.n	8002b26 <HAL_RCC_OscConfig+0x33a>
 8002b48:	e014      	b.n	8002b74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fb73 	bl	8002234 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7ff fb6f 	bl	8002234 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0a6      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b68:	4b56      	ldr	r3, [pc, #344]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ee      	bne.n	8002b52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8092 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b90:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d05c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d141      	bne.n	8002c28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba4:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <HAL_RCC_OscConfig+0x4dc>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7ff fb43 	bl	8002234 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7ff fb3f 	bl	8002234 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e078      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	019b      	lsls	r3, r3, #6
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	3b01      	subs	r3, #1
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	4933      	ldr	r1, [pc, #204]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_RCC_OscConfig+0x4dc>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fb18 	bl	8002234 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff fb14 	bl	8002234 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x41c>
 8002c26:	e045      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x4dc>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7ff fb01 	bl	8002234 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c36:	f7ff fafd 	bl	8002234 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e036      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x44a>
 8002c54:	e02e      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e029      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_RCC_OscConfig+0x4d8>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d115      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10d      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	42470060 	.word	0x42470060

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cc      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90c      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d119      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e067      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7ff fa3a 	bl	8002234 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7ff fa36 	bl	8002234 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20c      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4601      	mov	r1, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f99a 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	080057dc 	.word	0x080057dc
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d007      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x32>
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x38>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80b4 	bne.w	800302c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ec6:	60bb      	str	r3, [r7, #8]
       break;
 8002ec8:	e0b3      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ecc:	60bb      	str	r3, [r7, #8]
      break;
 8002ece:	e0b0      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b5a      	ldr	r3, [pc, #360]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	ea03 0501 	and.w	r5, r3, r1
 8002efc:	ea04 0602 	and.w	r6, r4, r2
 8002f00:	4629      	mov	r1, r5
 8002f02:	4632      	mov	r2, r6
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	4619      	mov	r1, r3
 8002f16:	4622      	mov	r2, r4
 8002f18:	1b49      	subs	r1, r1, r5
 8002f1a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	0194      	lsls	r4, r2, #6
 8002f28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f2c:	018b      	lsls	r3, r1, #6
 8002f2e:	1a5b      	subs	r3, r3, r1
 8002f30:	eb64 0402 	sbc.w	r4, r4, r2
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	00e2      	lsls	r2, r4, #3
 8002f3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f42:	00d9      	lsls	r1, r3, #3
 8002f44:	460b      	mov	r3, r1
 8002f46:	4614      	mov	r4, r2
 8002f48:	195b      	adds	r3, r3, r5
 8002f4a:	eb44 0406 	adc.w	r4, r4, r6
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	0262      	lsls	r2, r4, #9
 8002f58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f5c:	0259      	lsls	r1, r3, #9
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	4621      	mov	r1, r4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	f7fd fd7c 	bl	8000a6c <__aeabi_uldivmod>
 8002f74:	4603      	mov	r3, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e049      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	ea03 0501 	and.w	r5, r3, r1
 8002f92:	ea04 0602 	and.w	r6, r4, r2
 8002f96:	4629      	mov	r1, r5
 8002f98:	4632      	mov	r2, r6
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	0154      	lsls	r4, r2, #5
 8002fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fa8:	014b      	lsls	r3, r1, #5
 8002faa:	4619      	mov	r1, r3
 8002fac:	4622      	mov	r2, r4
 8002fae:	1b49      	subs	r1, r1, r5
 8002fb0:	eb62 0206 	sbc.w	r2, r2, r6
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	0194      	lsls	r4, r2, #6
 8002fbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fc2:	018b      	lsls	r3, r1, #6
 8002fc4:	1a5b      	subs	r3, r3, r1
 8002fc6:	eb64 0402 	sbc.w	r4, r4, r2
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	00e2      	lsls	r2, r4, #3
 8002fd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fd8:	00d9      	lsls	r1, r3, #3
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	195b      	adds	r3, r3, r5
 8002fe0:	eb44 0406 	adc.w	r4, r4, r6
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	02a2      	lsls	r2, r4, #10
 8002fee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ff2:	0299      	lsls	r1, r3, #10
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	461a      	mov	r2, r3
 8003004:	4623      	mov	r3, r4
 8003006:	f7fd fd31 	bl	8000a6c <__aeabi_uldivmod>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	60bb      	str	r3, [r7, #8]
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800302e:	60bb      	str	r3, [r7, #8]
      break;
 8003030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003032:	68bb      	ldr	r3, [r7, #8]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4601      	mov	r1, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4a03      	ldr	r2, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	080057ec 	.word	0x080057ec

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	4601      	mov	r1, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	080057ec 	.word	0x080057ec

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01d      	b.n	80030fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fe22 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 fc2e 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d007      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_TIM_Base_Stop_IT+0x48>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	f240 4344 	movw	r3, #1092	; 0x444
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_TIM_Base_Stop_IT+0x48>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e01d      	b.n	80031f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fd54 	bl	8001c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 fbb4 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fe44 	bl	8003e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIM_PWM_Start+0x60>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d107      	bne.n	800322e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d007      	beq.n	8003250 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000

08003260 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e083      	b.n	800337c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fe fd8d 	bl	8001da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f000 fb4b 	bl	8003950 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	4313      	orrs	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003300:	f023 030c 	bic.w	r3, r3, #12
 8003304:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800330c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	4313      	orrs	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	011a      	lsls	r2, r3, #4
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	031b      	lsls	r3, r3, #12
 8003330:	4313      	orrs	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4313      	orrs	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_TIM_Encoder_Start+0x16>
 8003394:	2b04      	cmp	r3, #4
 8003396:	d008      	beq.n	80033aa <HAL_TIM_Encoder_Start+0x26>
 8003398:	e00f      	b.n	80033ba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fd7a 	bl	8003e9c <TIM_CCxChannelCmd>
      break;
 80033a8:	e016      	b.n	80033d8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2104      	movs	r1, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fd72 	bl	8003e9c <TIM_CCxChannelCmd>
      break;
 80033b8:	e00e      	b.n	80033d8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd6a 	bl	8003e9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	2104      	movs	r1, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fd63 	bl	8003e9c <TIM_CCxChannelCmd>
      break;
 80033d6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d122      	bne.n	800344e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11b      	bne.n	800344e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0202 	mvn.w	r2, #2
 800341e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa6c 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 800343a:	e005      	b.n	8003448 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa5e 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa6f 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d122      	bne.n	80034a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d11b      	bne.n	80034a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0204 	mvn.w	r2, #4
 8003472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa42 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 800348e:	e005      	b.n	800349c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa34 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa45 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d122      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11b      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0208 	mvn.w	r2, #8
 80034c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa18 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 80034e2:	e005      	b.n	80034f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa0a 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa1b 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d122      	bne.n	800354a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d11b      	bne.n	800354a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0210 	mvn.w	r2, #16
 800351a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2208      	movs	r2, #8
 8003520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9ee 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 8003536:	e005      	b.n	8003544 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9e0 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9f1 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0201 	mvn.w	r2, #1
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fc2b 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fd6d 	bl	800407c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9b6 	bl	800393a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d10e      	bne.n	80035fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0220 	mvn.w	r2, #32
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fd37 	bl	8004068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800361a:	2302      	movs	r3, #2
 800361c:	e0b4      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x184>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	f200 809f 	bhi.w	8003774 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	08003671 	.word	0x08003671
 8003640:	08003775 	.word	0x08003775
 8003644:	08003775 	.word	0x08003775
 8003648:	08003775 	.word	0x08003775
 800364c:	080036b1 	.word	0x080036b1
 8003650:	08003775 	.word	0x08003775
 8003654:	08003775 	.word	0x08003775
 8003658:	08003775 	.word	0x08003775
 800365c:	080036f3 	.word	0x080036f3
 8003660:	08003775 	.word	0x08003775
 8003664:	08003775 	.word	0x08003775
 8003668:	08003775 	.word	0x08003775
 800366c:	08003733 	.word	0x08003733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f9ea 	bl	8003a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0204 	bic.w	r2, r2, #4
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	619a      	str	r2, [r3, #24]
      break;
 80036ae:	e062      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa30 	bl	8003b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]
      break;
 80036f0:	e041      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fa7b 	bl	8003bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0208 	orr.w	r2, r2, #8
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0204 	bic.w	r2, r2, #4
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	61da      	str	r2, [r3, #28]
      break;
 8003730:	e021      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fac5 	bl	8003cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	61da      	str	r2, [r3, #28]
      break;
 8003772:	e000      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003774:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_ConfigClockSource+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0a6      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x166>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d067      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0x120>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d80b      	bhi.n	80037fc <HAL_TIM_ConfigClockSource+0x6c>
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d073      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0x140>
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d802      	bhi.n	80037f2 <HAL_TIM_ConfigClockSource+0x62>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d06f      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037f0:	e078      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d06c      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0x140>
 80037f6:	2b30      	cmp	r3, #48	; 0x30
 80037f8:	d06a      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037fa:	e073      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037fc:	2b70      	cmp	r3, #112	; 0x70
 80037fe:	d00d      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x8c>
 8003800:	2b70      	cmp	r3, #112	; 0x70
 8003802:	d804      	bhi.n	800380e <HAL_TIM_ConfigClockSource+0x7e>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d033      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xe0>
 8003808:	2b60      	cmp	r3, #96	; 0x60
 800380a:	d041      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800380c:	e06a      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d066      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x152>
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d017      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800381a:	e063      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f000 fb16 	bl	8003e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800383e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e04c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 faff 	bl	8003e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e039      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	461a      	mov	r2, r3
 800387e:	f000 fa73 	bl	8003d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2150      	movs	r1, #80	; 0x50
 8003888:	4618      	mov	r0, r3
 800388a:	f000 facc 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 800388e:	e029      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	461a      	mov	r2, r3
 800389e:	f000 fa92 	bl	8003dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2160      	movs	r1, #96	; 0x60
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fabc 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 80038ae:	e019      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	461a      	mov	r2, r3
 80038be:	f000 fa53 	bl	8003d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2140      	movs	r1, #64	; 0x40
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 faac 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 80038ce:	e009      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 faa3 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e000      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <TIM_Base_SetConfig+0xe4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00f      	beq.n	8003988 <TIM_Base_SetConfig+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x38>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a31      	ldr	r2, [pc, #196]	; (8003a38 <TIM_Base_SetConfig+0xe8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x38>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a30      	ldr	r2, [pc, #192]	; (8003a3c <TIM_Base_SetConfig+0xec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x38>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a2f      	ldr	r2, [pc, #188]	; (8003a40 <TIM_Base_SetConfig+0xf0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <TIM_Base_SetConfig+0xe4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01b      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d017      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <TIM_Base_SetConfig+0xe8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <TIM_Base_SetConfig+0xec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <TIM_Base_SetConfig+0xf0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <TIM_Base_SetConfig+0xf4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <TIM_Base_SetConfig+0xf8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0x8a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <TIM_Base_SetConfig+0xfc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <TIM_Base_SetConfig+0xe4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d103      	bne.n	8003a20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	615a      	str	r2, [r3, #20]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800

08003a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0201 	bic.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0302 	bic.w	r3, r3, #2
 8003a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <TIM_OC1_SetConfig+0xc8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10c      	bne.n	8003ac6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0308 	bic.w	r3, r3, #8
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <TIM_OC1_SetConfig+0xc8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d111      	bne.n	8003af2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40010000 	.word	0x40010000

08003b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0210 	bic.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0320 	bic.w	r3, r3, #32
 8003b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <TIM_OC2_SetConfig+0xd4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10d      	bne.n	8003b98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <TIM_OC2_SetConfig+0xd4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d113      	bne.n	8003bc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000

08003bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <TIM_OC3_SetConfig+0xd0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10d      	bne.n	8003c6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <TIM_OC3_SetConfig+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d113      	bne.n	8003c9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40010000 	.word	0x40010000

08003cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <TIM_OC4_SetConfig+0x9c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d109      	bne.n	8003d3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000

08003d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0201 	bic.w	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 030a 	bic.w	r3, r3, #10
 8003da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0210 	bic.w	r2, r3, #16
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	031b      	lsls	r3, r3, #12
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f043 0307 	orr.w	r3, r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2201      	movs	r2, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e050      	b.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d013      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10c      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000

08003fc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e03d      	b.n	800405c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e03f      	b.n	8004122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd ff4a 	bl	8001f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 faf9 	bl	80046cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d130      	bne.n	80041a6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Transmit_IT+0x26>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e029      	b.n	80041a8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_UART_Transmit_IT+0x38>
 800415e:	2302      	movs	r3, #2
 8004160:	e022      	b.n	80041a8 <HAL_UART_Transmit_IT+0x7e>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d140      	bne.n	8004250 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_UART_Receive_IT+0x26>
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e039      	b.n	8004252 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Receive_IT+0x38>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e032      	b.n	8004252 <HAL_UART_Receive_IT+0x9e>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2222      	movs	r2, #34	; 0x22
 8004210:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0220 	orr.w	r2, r2, #32
 800424a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10d      	bne.n	80042b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_UART_IRQHandler+0x52>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f98c 	bl	80045c8 <UART_Receive_IT>
      return;
 80042b0:	e0d1      	b.n	8004456 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80b0 	beq.w	800441a <HAL_UART_IRQHandler+0x1ba>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_UART_IRQHandler+0x70>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80a5 	beq.w	800441a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_UART_IRQHandler+0x90>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_UART_IRQHandler+0xb0>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	f043 0202 	orr.w	r2, r3, #2
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_UART_IRQHandler+0xd0>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00f      	beq.n	800435a <HAL_UART_IRQHandler+0xfa>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <HAL_UART_IRQHandler+0xee>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	f043 0208 	orr.w	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d078      	beq.n	8004454 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_UART_IRQHandler+0x11c>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f926 	bl	80045c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <HAL_UART_IRQHandler+0x144>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d031      	beq.n	8004408 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f86f 	bl	8004488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d123      	bne.n	8004400 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	4a21      	ldr	r2, [pc, #132]	; (800445c <HAL_UART_IRQHandler+0x1fc>)
 80043d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe f846 	bl	800246e <HAL_DMA_Abort_IT>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d016      	beq.n	8004416 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f2:	4610      	mov	r0, r2
 80043f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	e00e      	b.n	8004416 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f83b 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fe:	e00a      	b.n	8004416 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f837 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004406:	e006      	b.n	8004416 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f833 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004414:	e01e      	b.n	8004454 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004416:	bf00      	nop
    return;
 8004418:	e01c      	b.n	8004454 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_UART_IRQHandler+0x1d6>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f85c 	bl	80044ec <UART_Transmit_IT>
    return;
 8004434:	e00f      	b.n	8004456 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_UART_IRQHandler+0x1f6>
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8a4 	bl	8004598 <UART_EndTransmit_IT>
    return;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004454:	bf00      	nop
  }
}
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	080044c5 	.word	0x080044c5

08004460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800449e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff ffc8 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b21      	cmp	r3, #33	; 0x21
 80044fe:	d144      	bne.n	800458a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d11a      	bne.n	8004540 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]
 8004532:	e00e      	b.n	8004552 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]
 800453e:	e008      	b.n	8004552 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	1c59      	adds	r1, r3, #1
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6211      	str	r1, [r2, #32]
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29b      	uxth	r3, r3
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4619      	mov	r1, r3
 8004560:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff51 	bl	8004460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b22      	cmp	r3, #34	; 0x22
 80045da:	d171      	bne.n	80046c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d123      	bne.n	800462e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10e      	bne.n	8004612 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
 8004610:	e029      	b.n	8004666 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	b29b      	uxth	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
 800462c:	e01b      	b.n	8004666 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6858      	ldr	r0, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6291      	str	r1, [r2, #40]	; 0x28
 8004646:	b2c2      	uxtb	r2, r0
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e00c      	b.n	8004666 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	1c58      	adds	r0, r3, #1
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	6288      	str	r0, [r1, #40]	; 0x28
 800465e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29b      	uxth	r3, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4619      	mov	r1, r3
 8004674:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004676:	2b00      	cmp	r3, #0
 8004678:	d120      	bne.n	80046bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0220 	bic.w	r2, r2, #32
 8004688:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fcc8 	bl	8001048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e002      	b.n	80046c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800470e:	f023 030c 	bic.w	r3, r3, #12
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	430b      	orrs	r3, r1
 800471a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473a:	f040 818b 	bne.w	8004a54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4ac1      	ldr	r2, [pc, #772]	; (8004a48 <UART_SetConfig+0x37c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d005      	beq.n	8004754 <UART_SetConfig+0x88>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4abf      	ldr	r2, [pc, #764]	; (8004a4c <UART_SetConfig+0x380>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f040 80bd 	bne.w	80048ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004754:	f7fe fc98 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8004758:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	461d      	mov	r5, r3
 800475e:	f04f 0600 	mov.w	r6, #0
 8004762:	46a8      	mov	r8, r5
 8004764:	46b1      	mov	r9, r6
 8004766:	eb18 0308 	adds.w	r3, r8, r8
 800476a:	eb49 0409 	adc.w	r4, r9, r9
 800476e:	4698      	mov	r8, r3
 8004770:	46a1      	mov	r9, r4
 8004772:	eb18 0805 	adds.w	r8, r8, r5
 8004776:	eb49 0906 	adc.w	r9, r9, r6
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004786:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800478a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800478e:	4688      	mov	r8, r1
 8004790:	4691      	mov	r9, r2
 8004792:	eb18 0005 	adds.w	r0, r8, r5
 8004796:	eb49 0106 	adc.w	r1, r9, r6
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	461d      	mov	r5, r3
 80047a0:	f04f 0600 	mov.w	r6, #0
 80047a4:	196b      	adds	r3, r5, r5
 80047a6:	eb46 0406 	adc.w	r4, r6, r6
 80047aa:	461a      	mov	r2, r3
 80047ac:	4623      	mov	r3, r4
 80047ae:	f7fc f95d 	bl	8000a6c <__aeabi_uldivmod>
 80047b2:	4603      	mov	r3, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	461a      	mov	r2, r3
 80047b8:	4ba5      	ldr	r3, [pc, #660]	; (8004a50 <UART_SetConfig+0x384>)
 80047ba:	fba3 2302 	umull	r2, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	461d      	mov	r5, r3
 80047c8:	f04f 0600 	mov.w	r6, #0
 80047cc:	46a9      	mov	r9, r5
 80047ce:	46b2      	mov	sl, r6
 80047d0:	eb19 0309 	adds.w	r3, r9, r9
 80047d4:	eb4a 040a 	adc.w	r4, sl, sl
 80047d8:	4699      	mov	r9, r3
 80047da:	46a2      	mov	sl, r4
 80047dc:	eb19 0905 	adds.w	r9, r9, r5
 80047e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80047e4:	f04f 0100 	mov.w	r1, #0
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047f8:	4689      	mov	r9, r1
 80047fa:	4692      	mov	sl, r2
 80047fc:	eb19 0005 	adds.w	r0, r9, r5
 8004800:	eb4a 0106 	adc.w	r1, sl, r6
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	461d      	mov	r5, r3
 800480a:	f04f 0600 	mov.w	r6, #0
 800480e:	196b      	adds	r3, r5, r5
 8004810:	eb46 0406 	adc.w	r4, r6, r6
 8004814:	461a      	mov	r2, r3
 8004816:	4623      	mov	r3, r4
 8004818:	f7fc f928 	bl	8000a6c <__aeabi_uldivmod>
 800481c:	4603      	mov	r3, r0
 800481e:	460c      	mov	r4, r1
 8004820:	461a      	mov	r2, r3
 8004822:	4b8b      	ldr	r3, [pc, #556]	; (8004a50 <UART_SetConfig+0x384>)
 8004824:	fba3 1302 	umull	r1, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	3332      	adds	r3, #50	; 0x32
 8004836:	4a86      	ldr	r2, [pc, #536]	; (8004a50 <UART_SetConfig+0x384>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004844:	4498      	add	r8, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	461d      	mov	r5, r3
 800484a:	f04f 0600 	mov.w	r6, #0
 800484e:	46a9      	mov	r9, r5
 8004850:	46b2      	mov	sl, r6
 8004852:	eb19 0309 	adds.w	r3, r9, r9
 8004856:	eb4a 040a 	adc.w	r4, sl, sl
 800485a:	4699      	mov	r9, r3
 800485c:	46a2      	mov	sl, r4
 800485e:	eb19 0905 	adds.w	r9, r9, r5
 8004862:	eb4a 0a06 	adc.w	sl, sl, r6
 8004866:	f04f 0100 	mov.w	r1, #0
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004872:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004876:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800487a:	4689      	mov	r9, r1
 800487c:	4692      	mov	sl, r2
 800487e:	eb19 0005 	adds.w	r0, r9, r5
 8004882:	eb4a 0106 	adc.w	r1, sl, r6
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	461d      	mov	r5, r3
 800488c:	f04f 0600 	mov.w	r6, #0
 8004890:	196b      	adds	r3, r5, r5
 8004892:	eb46 0406 	adc.w	r4, r6, r6
 8004896:	461a      	mov	r2, r3
 8004898:	4623      	mov	r3, r4
 800489a:	f7fc f8e7 	bl	8000a6c <__aeabi_uldivmod>
 800489e:	4603      	mov	r3, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <UART_SetConfig+0x384>)
 80048a6:	fba3 1302 	umull	r1, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2164      	movs	r1, #100	; 0x64
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	3332      	adds	r3, #50	; 0x32
 80048b8:	4a65      	ldr	r2, [pc, #404]	; (8004a50 <UART_SetConfig+0x384>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	f003 0207 	and.w	r2, r3, #7
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4442      	add	r2, r8
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	e26f      	b.n	8004dae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ce:	f7fe fbc7 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80048d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	461d      	mov	r5, r3
 80048d8:	f04f 0600 	mov.w	r6, #0
 80048dc:	46a8      	mov	r8, r5
 80048de:	46b1      	mov	r9, r6
 80048e0:	eb18 0308 	adds.w	r3, r8, r8
 80048e4:	eb49 0409 	adc.w	r4, r9, r9
 80048e8:	4698      	mov	r8, r3
 80048ea:	46a1      	mov	r9, r4
 80048ec:	eb18 0805 	adds.w	r8, r8, r5
 80048f0:	eb49 0906 	adc.w	r9, r9, r6
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004900:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004904:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004908:	4688      	mov	r8, r1
 800490a:	4691      	mov	r9, r2
 800490c:	eb18 0005 	adds.w	r0, r8, r5
 8004910:	eb49 0106 	adc.w	r1, r9, r6
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	461d      	mov	r5, r3
 800491a:	f04f 0600 	mov.w	r6, #0
 800491e:	196b      	adds	r3, r5, r5
 8004920:	eb46 0406 	adc.w	r4, r6, r6
 8004924:	461a      	mov	r2, r3
 8004926:	4623      	mov	r3, r4
 8004928:	f7fc f8a0 	bl	8000a6c <__aeabi_uldivmod>
 800492c:	4603      	mov	r3, r0
 800492e:	460c      	mov	r4, r1
 8004930:	461a      	mov	r2, r3
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <UART_SetConfig+0x384>)
 8004934:	fba3 2302 	umull	r2, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	461d      	mov	r5, r3
 8004942:	f04f 0600 	mov.w	r6, #0
 8004946:	46a9      	mov	r9, r5
 8004948:	46b2      	mov	sl, r6
 800494a:	eb19 0309 	adds.w	r3, r9, r9
 800494e:	eb4a 040a 	adc.w	r4, sl, sl
 8004952:	4699      	mov	r9, r3
 8004954:	46a2      	mov	sl, r4
 8004956:	eb19 0905 	adds.w	r9, r9, r5
 800495a:	eb4a 0a06 	adc.w	sl, sl, r6
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800496e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004972:	4689      	mov	r9, r1
 8004974:	4692      	mov	sl, r2
 8004976:	eb19 0005 	adds.w	r0, r9, r5
 800497a:	eb4a 0106 	adc.w	r1, sl, r6
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	461d      	mov	r5, r3
 8004984:	f04f 0600 	mov.w	r6, #0
 8004988:	196b      	adds	r3, r5, r5
 800498a:	eb46 0406 	adc.w	r4, r6, r6
 800498e:	461a      	mov	r2, r3
 8004990:	4623      	mov	r3, r4
 8004992:	f7fc f86b 	bl	8000a6c <__aeabi_uldivmod>
 8004996:	4603      	mov	r3, r0
 8004998:	460c      	mov	r4, r1
 800499a:	461a      	mov	r2, r3
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <UART_SetConfig+0x384>)
 800499e:	fba3 1302 	umull	r1, r3, r3, r2
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2164      	movs	r1, #100	; 0x64
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	3332      	adds	r3, #50	; 0x32
 80049b0:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <UART_SetConfig+0x384>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049be:	4498      	add	r8, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	461d      	mov	r5, r3
 80049c4:	f04f 0600 	mov.w	r6, #0
 80049c8:	46a9      	mov	r9, r5
 80049ca:	46b2      	mov	sl, r6
 80049cc:	eb19 0309 	adds.w	r3, r9, r9
 80049d0:	eb4a 040a 	adc.w	r4, sl, sl
 80049d4:	4699      	mov	r9, r3
 80049d6:	46a2      	mov	sl, r4
 80049d8:	eb19 0905 	adds.w	r9, r9, r5
 80049dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049f4:	4689      	mov	r9, r1
 80049f6:	4692      	mov	sl, r2
 80049f8:	eb19 0005 	adds.w	r0, r9, r5
 80049fc:	eb4a 0106 	adc.w	r1, sl, r6
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	461d      	mov	r5, r3
 8004a06:	f04f 0600 	mov.w	r6, #0
 8004a0a:	196b      	adds	r3, r5, r5
 8004a0c:	eb46 0406 	adc.w	r4, r6, r6
 8004a10:	461a      	mov	r2, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	f7fc f82a 	bl	8000a6c <__aeabi_uldivmod>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <UART_SetConfig+0x384>)
 8004a20:	fba3 1302 	umull	r1, r3, r3, r2
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	2164      	movs	r1, #100	; 0x64
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	3332      	adds	r3, #50	; 0x32
 8004a32:	4a07      	ldr	r2, [pc, #28]	; (8004a50 <UART_SetConfig+0x384>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	f003 0207 	and.w	r2, r3, #7
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4442      	add	r2, r8
 8004a44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a46:	e1b2      	b.n	8004dae <UART_SetConfig+0x6e2>
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	40011400 	.word	0x40011400
 8004a50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4ad7      	ldr	r2, [pc, #860]	; (8004db8 <UART_SetConfig+0x6ec>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d005      	beq.n	8004a6a <UART_SetConfig+0x39e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4ad6      	ldr	r2, [pc, #856]	; (8004dbc <UART_SetConfig+0x6f0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	f040 80d1 	bne.w	8004c0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a6a:	f7fe fb0d 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8004a6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	469a      	mov	sl, r3
 8004a74:	f04f 0b00 	mov.w	fp, #0
 8004a78:	46d0      	mov	r8, sl
 8004a7a:	46d9      	mov	r9, fp
 8004a7c:	eb18 0308 	adds.w	r3, r8, r8
 8004a80:	eb49 0409 	adc.w	r4, r9, r9
 8004a84:	4698      	mov	r8, r3
 8004a86:	46a1      	mov	r9, r4
 8004a88:	eb18 080a 	adds.w	r8, r8, sl
 8004a8c:	eb49 090b 	adc.w	r9, r9, fp
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004aa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aa4:	4688      	mov	r8, r1
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	eb1a 0508 	adds.w	r5, sl, r8
 8004aac:	eb4b 0609 	adc.w	r6, fp, r9
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	f04f 0400 	mov.w	r4, #0
 8004ac2:	0094      	lsls	r4, r2, #2
 8004ac4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac8:	008b      	lsls	r3, r1, #2
 8004aca:	461a      	mov	r2, r3
 8004acc:	4623      	mov	r3, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	f7fb ffcb 	bl	8000a6c <__aeabi_uldivmod>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	461a      	mov	r2, r3
 8004adc:	4bb8      	ldr	r3, [pc, #736]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004ade:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	469b      	mov	fp, r3
 8004aec:	f04f 0c00 	mov.w	ip, #0
 8004af0:	46d9      	mov	r9, fp
 8004af2:	46e2      	mov	sl, ip
 8004af4:	eb19 0309 	adds.w	r3, r9, r9
 8004af8:	eb4a 040a 	adc.w	r4, sl, sl
 8004afc:	4699      	mov	r9, r3
 8004afe:	46a2      	mov	sl, r4
 8004b00:	eb19 090b 	adds.w	r9, r9, fp
 8004b04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b1c:	4689      	mov	r9, r1
 8004b1e:	4692      	mov	sl, r2
 8004b20:	eb1b 0509 	adds.w	r5, fp, r9
 8004b24:	eb4c 060a 	adc.w	r6, ip, sl
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	0094      	lsls	r4, r2, #2
 8004b3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b40:	008b      	lsls	r3, r1, #2
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	4628      	mov	r0, r5
 8004b48:	4631      	mov	r1, r6
 8004b4a:	f7fb ff8f 	bl	8000a6c <__aeabi_uldivmod>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	461a      	mov	r2, r3
 8004b54:	4b9a      	ldr	r3, [pc, #616]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004b56:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2164      	movs	r1, #100	; 0x64
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	3332      	adds	r3, #50	; 0x32
 8004b68:	4a95      	ldr	r2, [pc, #596]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b74:	4498      	add	r8, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	469b      	mov	fp, r3
 8004b7a:	f04f 0c00 	mov.w	ip, #0
 8004b7e:	46d9      	mov	r9, fp
 8004b80:	46e2      	mov	sl, ip
 8004b82:	eb19 0309 	adds.w	r3, r9, r9
 8004b86:	eb4a 040a 	adc.w	r4, sl, sl
 8004b8a:	4699      	mov	r9, r3
 8004b8c:	46a2      	mov	sl, r4
 8004b8e:	eb19 090b 	adds.w	r9, r9, fp
 8004b92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004baa:	4689      	mov	r9, r1
 8004bac:	4692      	mov	sl, r2
 8004bae:	eb1b 0509 	adds.w	r5, fp, r9
 8004bb2:	eb4c 060a 	adc.w	r6, ip, sl
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	f04f 0400 	mov.w	r4, #0
 8004bc8:	0094      	lsls	r4, r2, #2
 8004bca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bce:	008b      	lsls	r3, r1, #2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	f7fb ff48 	bl	8000a6c <__aeabi_uldivmod>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004be4:	fba3 1302 	umull	r1, r3, r3, r2
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	2164      	movs	r1, #100	; 0x64
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	3332      	adds	r3, #50	; 0x32
 8004bf6:	4a72      	ldr	r2, [pc, #456]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	f003 020f 	and.w	r2, r3, #15
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4442      	add	r2, r8
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	e0d0      	b.n	8004dae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fa28 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8004c10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	469a      	mov	sl, r3
 8004c16:	f04f 0b00 	mov.w	fp, #0
 8004c1a:	46d0      	mov	r8, sl
 8004c1c:	46d9      	mov	r9, fp
 8004c1e:	eb18 0308 	adds.w	r3, r8, r8
 8004c22:	eb49 0409 	adc.w	r4, r9, r9
 8004c26:	4698      	mov	r8, r3
 8004c28:	46a1      	mov	r9, r4
 8004c2a:	eb18 080a 	adds.w	r8, r8, sl
 8004c2e:	eb49 090b 	adc.w	r9, r9, fp
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c46:	4688      	mov	r8, r1
 8004c48:	4691      	mov	r9, r2
 8004c4a:	eb1a 0508 	adds.w	r5, sl, r8
 8004c4e:	eb4b 0609 	adc.w	r6, fp, r9
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	0094      	lsls	r4, r2, #2
 8004c66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	4631      	mov	r1, r6
 8004c74:	f7fb fefa 	bl	8000a6c <__aeabi_uldivmod>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004c80:	fba3 2302 	umull	r2, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	469b      	mov	fp, r3
 8004c8e:	f04f 0c00 	mov.w	ip, #0
 8004c92:	46d9      	mov	r9, fp
 8004c94:	46e2      	mov	sl, ip
 8004c96:	eb19 0309 	adds.w	r3, r9, r9
 8004c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9e:	4699      	mov	r9, r3
 8004ca0:	46a2      	mov	sl, r4
 8004ca2:	eb19 090b 	adds.w	r9, r9, fp
 8004ca6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cbe:	4689      	mov	r9, r1
 8004cc0:	4692      	mov	sl, r2
 8004cc2:	eb1b 0509 	adds.w	r5, fp, r9
 8004cc6:	eb4c 060a 	adc.w	r6, ip, sl
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	f04f 0400 	mov.w	r4, #0
 8004cdc:	0094      	lsls	r4, r2, #2
 8004cde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ce2:	008b      	lsls	r3, r1, #2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	4631      	mov	r1, r6
 8004cec:	f7fb febe 	bl	8000a6c <__aeabi_uldivmod>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b32      	ldr	r3, [pc, #200]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2164      	movs	r1, #100	; 0x64
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d16:	4498      	add	r8, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	469b      	mov	fp, r3
 8004d1c:	f04f 0c00 	mov.w	ip, #0
 8004d20:	46d9      	mov	r9, fp
 8004d22:	46e2      	mov	sl, ip
 8004d24:	eb19 0309 	adds.w	r3, r9, r9
 8004d28:	eb4a 040a 	adc.w	r4, sl, sl
 8004d2c:	4699      	mov	r9, r3
 8004d2e:	46a2      	mov	sl, r4
 8004d30:	eb19 090b 	adds.w	r9, r9, fp
 8004d34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d38:	f04f 0100 	mov.w	r1, #0
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d4c:	4689      	mov	r9, r1
 8004d4e:	4692      	mov	sl, r2
 8004d50:	eb1b 0509 	adds.w	r5, fp, r9
 8004d54:	eb4c 060a 	adc.w	r6, ip, sl
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	f04f 0400 	mov.w	r4, #0
 8004d6a:	0094      	lsls	r4, r2, #2
 8004d6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d70:	008b      	lsls	r3, r1, #2
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	4631      	mov	r1, r6
 8004d7a:	f7fb fe77 	bl	8000a6c <__aeabi_uldivmod>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004d86:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2164      	movs	r1, #100	; 0x64
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	3332      	adds	r3, #50	; 0x32
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <UART_SetConfig+0x6f4>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	f003 020f 	and.w	r2, r3, #15
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4442      	add	r2, r8
 8004daa:	609a      	str	r2, [r3, #8]
}
 8004dac:	e7ff      	b.n	8004dae <UART_SetConfig+0x6e2>
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db8:	40011000 	.word	0x40011000
 8004dbc:	40011400 	.word	0x40011400
 8004dc0:	51eb851f 	.word	0x51eb851f

08004dc4 <atoi>:
 8004dc4:	220a      	movs	r2, #10
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f000 b8ce 	b.w	8004f68 <strtol>

08004dcc <__errno>:
 8004dcc:	4b01      	ldr	r3, [pc, #4]	; (8004dd4 <__errno+0x8>)
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4e0d      	ldr	r6, [pc, #52]	; (8004e10 <__libc_init_array+0x38>)
 8004ddc:	4c0d      	ldr	r4, [pc, #52]	; (8004e14 <__libc_init_array+0x3c>)
 8004dde:	1ba4      	subs	r4, r4, r6
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	2500      	movs	r5, #0
 8004de4:	42a5      	cmp	r5, r4
 8004de6:	d109      	bne.n	8004dfc <__libc_init_array+0x24>
 8004de8:	4e0b      	ldr	r6, [pc, #44]	; (8004e18 <__libc_init_array+0x40>)
 8004dea:	4c0c      	ldr	r4, [pc, #48]	; (8004e1c <__libc_init_array+0x44>)
 8004dec:	f000 fcdc 	bl	80057a8 <_init>
 8004df0:	1ba4      	subs	r4, r4, r6
 8004df2:	10a4      	asrs	r4, r4, #2
 8004df4:	2500      	movs	r5, #0
 8004df6:	42a5      	cmp	r5, r4
 8004df8:	d105      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e00:	4798      	blx	r3
 8004e02:	3501      	adds	r5, #1
 8004e04:	e7ee      	b.n	8004de4 <__libc_init_array+0xc>
 8004e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e0a:	4798      	blx	r3
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	e7f2      	b.n	8004df6 <__libc_init_array+0x1e>
 8004e10:	0800593c 	.word	0x0800593c
 8004e14:	0800593c 	.word	0x0800593c
 8004e18:	0800593c 	.word	0x0800593c
 8004e1c:	08005940 	.word	0x08005940

08004e20 <memset>:
 8004e20:	4402      	add	r2, r0
 8004e22:	4603      	mov	r3, r0
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d100      	bne.n	8004e2a <memset+0xa>
 8004e28:	4770      	bx	lr
 8004e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2e:	e7f9      	b.n	8004e24 <memset+0x4>

08004e30 <siprintf>:
 8004e30:	b40e      	push	{r1, r2, r3}
 8004e32:	b500      	push	{lr}
 8004e34:	b09c      	sub	sp, #112	; 0x70
 8004e36:	ab1d      	add	r3, sp, #116	; 0x74
 8004e38:	9002      	str	r0, [sp, #8]
 8004e3a:	9006      	str	r0, [sp, #24]
 8004e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e40:	4809      	ldr	r0, [pc, #36]	; (8004e68 <siprintf+0x38>)
 8004e42:	9107      	str	r1, [sp, #28]
 8004e44:	9104      	str	r1, [sp, #16]
 8004e46:	4909      	ldr	r1, [pc, #36]	; (8004e6c <siprintf+0x3c>)
 8004e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e4c:	9105      	str	r1, [sp, #20]
 8004e4e:	6800      	ldr	r0, [r0, #0]
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	a902      	add	r1, sp, #8
 8004e54:	f000 f90e 	bl	8005074 <_svfiprintf_r>
 8004e58:	9b02      	ldr	r3, [sp, #8]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	b01c      	add	sp, #112	; 0x70
 8004e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e64:	b003      	add	sp, #12
 8004e66:	4770      	bx	lr
 8004e68:	2000000c 	.word	0x2000000c
 8004e6c:	ffff0208 	.word	0xffff0208

08004e70 <_strtol_l.isra.0>:
 8004e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	4680      	mov	r8, r0
 8004e76:	4689      	mov	r9, r1
 8004e78:	4692      	mov	sl, r2
 8004e7a:	461e      	mov	r6, r3
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	463d      	mov	r5, r7
 8004e80:	9808      	ldr	r0, [sp, #32]
 8004e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e86:	f000 f885 	bl	8004f94 <__locale_ctype_ptr_l>
 8004e8a:	4420      	add	r0, r4
 8004e8c:	7843      	ldrb	r3, [r0, #1]
 8004e8e:	f013 0308 	ands.w	r3, r3, #8
 8004e92:	d132      	bne.n	8004efa <_strtol_l.isra.0+0x8a>
 8004e94:	2c2d      	cmp	r4, #45	; 0x2d
 8004e96:	d132      	bne.n	8004efe <_strtol_l.isra.0+0x8e>
 8004e98:	787c      	ldrb	r4, [r7, #1]
 8004e9a:	1cbd      	adds	r5, r7, #2
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d05d      	beq.n	8004f5e <_strtol_l.isra.0+0xee>
 8004ea2:	2e10      	cmp	r6, #16
 8004ea4:	d109      	bne.n	8004eba <_strtol_l.isra.0+0x4a>
 8004ea6:	2c30      	cmp	r4, #48	; 0x30
 8004ea8:	d107      	bne.n	8004eba <_strtol_l.isra.0+0x4a>
 8004eaa:	782b      	ldrb	r3, [r5, #0]
 8004eac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004eb0:	2b58      	cmp	r3, #88	; 0x58
 8004eb2:	d14f      	bne.n	8004f54 <_strtol_l.isra.0+0xe4>
 8004eb4:	786c      	ldrb	r4, [r5, #1]
 8004eb6:	2610      	movs	r6, #16
 8004eb8:	3502      	adds	r5, #2
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004ec2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004ec6:	2700      	movs	r7, #0
 8004ec8:	fbb1 fcf6 	udiv	ip, r1, r6
 8004ecc:	4638      	mov	r0, r7
 8004ece:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004ed2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004ed6:	2b09      	cmp	r3, #9
 8004ed8:	d817      	bhi.n	8004f0a <_strtol_l.isra.0+0x9a>
 8004eda:	461c      	mov	r4, r3
 8004edc:	42a6      	cmp	r6, r4
 8004ede:	dd23      	ble.n	8004f28 <_strtol_l.isra.0+0xb8>
 8004ee0:	1c7b      	adds	r3, r7, #1
 8004ee2:	d007      	beq.n	8004ef4 <_strtol_l.isra.0+0x84>
 8004ee4:	4584      	cmp	ip, r0
 8004ee6:	d31c      	bcc.n	8004f22 <_strtol_l.isra.0+0xb2>
 8004ee8:	d101      	bne.n	8004eee <_strtol_l.isra.0+0x7e>
 8004eea:	45a6      	cmp	lr, r4
 8004eec:	db19      	blt.n	8004f22 <_strtol_l.isra.0+0xb2>
 8004eee:	fb00 4006 	mla	r0, r0, r6, r4
 8004ef2:	2701      	movs	r7, #1
 8004ef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ef8:	e7eb      	b.n	8004ed2 <_strtol_l.isra.0+0x62>
 8004efa:	462f      	mov	r7, r5
 8004efc:	e7bf      	b.n	8004e7e <_strtol_l.isra.0+0xe>
 8004efe:	2c2b      	cmp	r4, #43	; 0x2b
 8004f00:	bf04      	itt	eq
 8004f02:	1cbd      	addeq	r5, r7, #2
 8004f04:	787c      	ldrbeq	r4, [r7, #1]
 8004f06:	461a      	mov	r2, r3
 8004f08:	e7c9      	b.n	8004e9e <_strtol_l.isra.0+0x2e>
 8004f0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004f0e:	2b19      	cmp	r3, #25
 8004f10:	d801      	bhi.n	8004f16 <_strtol_l.isra.0+0xa6>
 8004f12:	3c37      	subs	r4, #55	; 0x37
 8004f14:	e7e2      	b.n	8004edc <_strtol_l.isra.0+0x6c>
 8004f16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004f1a:	2b19      	cmp	r3, #25
 8004f1c:	d804      	bhi.n	8004f28 <_strtol_l.isra.0+0xb8>
 8004f1e:	3c57      	subs	r4, #87	; 0x57
 8004f20:	e7dc      	b.n	8004edc <_strtol_l.isra.0+0x6c>
 8004f22:	f04f 37ff 	mov.w	r7, #4294967295
 8004f26:	e7e5      	b.n	8004ef4 <_strtol_l.isra.0+0x84>
 8004f28:	1c7b      	adds	r3, r7, #1
 8004f2a:	d108      	bne.n	8004f3e <_strtol_l.isra.0+0xce>
 8004f2c:	2322      	movs	r3, #34	; 0x22
 8004f2e:	f8c8 3000 	str.w	r3, [r8]
 8004f32:	4608      	mov	r0, r1
 8004f34:	f1ba 0f00 	cmp.w	sl, #0
 8004f38:	d107      	bne.n	8004f4a <_strtol_l.isra.0+0xda>
 8004f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3e:	b102      	cbz	r2, 8004f42 <_strtol_l.isra.0+0xd2>
 8004f40:	4240      	negs	r0, r0
 8004f42:	f1ba 0f00 	cmp.w	sl, #0
 8004f46:	d0f8      	beq.n	8004f3a <_strtol_l.isra.0+0xca>
 8004f48:	b10f      	cbz	r7, 8004f4e <_strtol_l.isra.0+0xde>
 8004f4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004f4e:	f8ca 9000 	str.w	r9, [sl]
 8004f52:	e7f2      	b.n	8004f3a <_strtol_l.isra.0+0xca>
 8004f54:	2430      	movs	r4, #48	; 0x30
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d1af      	bne.n	8004eba <_strtol_l.isra.0+0x4a>
 8004f5a:	2608      	movs	r6, #8
 8004f5c:	e7ad      	b.n	8004eba <_strtol_l.isra.0+0x4a>
 8004f5e:	2c30      	cmp	r4, #48	; 0x30
 8004f60:	d0a3      	beq.n	8004eaa <_strtol_l.isra.0+0x3a>
 8004f62:	260a      	movs	r6, #10
 8004f64:	e7a9      	b.n	8004eba <_strtol_l.isra.0+0x4a>
	...

08004f68 <strtol>:
 8004f68:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <strtol+0x24>)
 8004f6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f6c:	681c      	ldr	r4, [r3, #0]
 8004f6e:	4d08      	ldr	r5, [pc, #32]	; (8004f90 <strtol+0x28>)
 8004f70:	6a23      	ldr	r3, [r4, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf08      	it	eq
 8004f76:	462b      	moveq	r3, r5
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	460a      	mov	r2, r1
 8004f7e:	4601      	mov	r1, r0
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7ff ff75 	bl	8004e70 <_strtol_l.isra.0>
 8004f86:	b003      	add	sp, #12
 8004f88:	bd30      	pop	{r4, r5, pc}
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	20000070 	.word	0x20000070

08004f94 <__locale_ctype_ptr_l>:
 8004f94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004f98:	4770      	bx	lr

08004f9a <__ascii_mbtowc>:
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	b901      	cbnz	r1, 8004fa0 <__ascii_mbtowc+0x6>
 8004f9e:	a901      	add	r1, sp, #4
 8004fa0:	b142      	cbz	r2, 8004fb4 <__ascii_mbtowc+0x1a>
 8004fa2:	b14b      	cbz	r3, 8004fb8 <__ascii_mbtowc+0x1e>
 8004fa4:	7813      	ldrb	r3, [r2, #0]
 8004fa6:	600b      	str	r3, [r1, #0]
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	1c10      	adds	r0, r2, #0
 8004fac:	bf18      	it	ne
 8004fae:	2001      	movne	r0, #1
 8004fb0:	b002      	add	sp, #8
 8004fb2:	4770      	bx	lr
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	e7fb      	b.n	8004fb0 <__ascii_mbtowc+0x16>
 8004fb8:	f06f 0001 	mvn.w	r0, #1
 8004fbc:	e7f8      	b.n	8004fb0 <__ascii_mbtowc+0x16>

08004fbe <__ssputs_r>:
 8004fbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc2:	688e      	ldr	r6, [r1, #8]
 8004fc4:	429e      	cmp	r6, r3
 8004fc6:	4682      	mov	sl, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	d837      	bhi.n	8005040 <__ssputs_r+0x82>
 8004fd0:	898a      	ldrh	r2, [r1, #12]
 8004fd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fd6:	d031      	beq.n	800503c <__ssputs_r+0x7e>
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	6909      	ldr	r1, [r1, #16]
 8004fdc:	1a6f      	subs	r7, r5, r1
 8004fde:	6965      	ldr	r5, [r4, #20]
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fe6:	fb95 f5f3 	sdiv	r5, r5, r3
 8004fea:	f109 0301 	add.w	r3, r9, #1
 8004fee:	443b      	add	r3, r7
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	bf38      	it	cc
 8004ff4:	461d      	movcc	r5, r3
 8004ff6:	0553      	lsls	r3, r2, #21
 8004ff8:	d530      	bpl.n	800505c <__ssputs_r+0x9e>
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f000 fb3a 	bl	8005674 <_malloc_r>
 8005000:	4606      	mov	r6, r0
 8005002:	b950      	cbnz	r0, 800501a <__ssputs_r+0x5c>
 8005004:	230c      	movs	r3, #12
 8005006:	f8ca 3000 	str.w	r3, [sl]
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501a:	463a      	mov	r2, r7
 800501c:	6921      	ldr	r1, [r4, #16]
 800501e:	f000 fab6 	bl	800558e <memcpy>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	6126      	str	r6, [r4, #16]
 8005030:	6165      	str	r5, [r4, #20]
 8005032:	443e      	add	r6, r7
 8005034:	1bed      	subs	r5, r5, r7
 8005036:	6026      	str	r6, [r4, #0]
 8005038:	60a5      	str	r5, [r4, #8]
 800503a:	464e      	mov	r6, r9
 800503c:	454e      	cmp	r6, r9
 800503e:	d900      	bls.n	8005042 <__ssputs_r+0x84>
 8005040:	464e      	mov	r6, r9
 8005042:	4632      	mov	r2, r6
 8005044:	4641      	mov	r1, r8
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	f000 faac 	bl	80055a4 <memmove>
 800504c:	68a3      	ldr	r3, [r4, #8]
 800504e:	1b9b      	subs	r3, r3, r6
 8005050:	60a3      	str	r3, [r4, #8]
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	441e      	add	r6, r3
 8005056:	6026      	str	r6, [r4, #0]
 8005058:	2000      	movs	r0, #0
 800505a:	e7dc      	b.n	8005016 <__ssputs_r+0x58>
 800505c:	462a      	mov	r2, r5
 800505e:	f000 fb63 	bl	8005728 <_realloc_r>
 8005062:	4606      	mov	r6, r0
 8005064:	2800      	cmp	r0, #0
 8005066:	d1e2      	bne.n	800502e <__ssputs_r+0x70>
 8005068:	6921      	ldr	r1, [r4, #16]
 800506a:	4650      	mov	r0, sl
 800506c:	f000 fab4 	bl	80055d8 <_free_r>
 8005070:	e7c8      	b.n	8005004 <__ssputs_r+0x46>
	...

08005074 <_svfiprintf_r>:
 8005074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005078:	461d      	mov	r5, r3
 800507a:	898b      	ldrh	r3, [r1, #12]
 800507c:	061f      	lsls	r7, r3, #24
 800507e:	b09d      	sub	sp, #116	; 0x74
 8005080:	4680      	mov	r8, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4616      	mov	r6, r2
 8005086:	d50f      	bpl.n	80050a8 <_svfiprintf_r+0x34>
 8005088:	690b      	ldr	r3, [r1, #16]
 800508a:	b96b      	cbnz	r3, 80050a8 <_svfiprintf_r+0x34>
 800508c:	2140      	movs	r1, #64	; 0x40
 800508e:	f000 faf1 	bl	8005674 <_malloc_r>
 8005092:	6020      	str	r0, [r4, #0]
 8005094:	6120      	str	r0, [r4, #16]
 8005096:	b928      	cbnz	r0, 80050a4 <_svfiprintf_r+0x30>
 8005098:	230c      	movs	r3, #12
 800509a:	f8c8 3000 	str.w	r3, [r8]
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	e0c8      	b.n	8005236 <_svfiprintf_r+0x1c2>
 80050a4:	2340      	movs	r3, #64	; 0x40
 80050a6:	6163      	str	r3, [r4, #20]
 80050a8:	2300      	movs	r3, #0
 80050aa:	9309      	str	r3, [sp, #36]	; 0x24
 80050ac:	2320      	movs	r3, #32
 80050ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b2:	2330      	movs	r3, #48	; 0x30
 80050b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050b8:	9503      	str	r5, [sp, #12]
 80050ba:	f04f 0b01 	mov.w	fp, #1
 80050be:	4637      	mov	r7, r6
 80050c0:	463d      	mov	r5, r7
 80050c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050c6:	b10b      	cbz	r3, 80050cc <_svfiprintf_r+0x58>
 80050c8:	2b25      	cmp	r3, #37	; 0x25
 80050ca:	d13e      	bne.n	800514a <_svfiprintf_r+0xd6>
 80050cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80050d0:	d00b      	beq.n	80050ea <_svfiprintf_r+0x76>
 80050d2:	4653      	mov	r3, sl
 80050d4:	4632      	mov	r2, r6
 80050d6:	4621      	mov	r1, r4
 80050d8:	4640      	mov	r0, r8
 80050da:	f7ff ff70 	bl	8004fbe <__ssputs_r>
 80050de:	3001      	adds	r0, #1
 80050e0:	f000 80a4 	beq.w	800522c <_svfiprintf_r+0x1b8>
 80050e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e6:	4453      	add	r3, sl
 80050e8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ea:	783b      	ldrb	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 809d 	beq.w	800522c <_svfiprintf_r+0x1b8>
 80050f2:	2300      	movs	r3, #0
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	9307      	str	r3, [sp, #28]
 8005100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005104:	931a      	str	r3, [sp, #104]	; 0x68
 8005106:	462f      	mov	r7, r5
 8005108:	2205      	movs	r2, #5
 800510a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800510e:	4850      	ldr	r0, [pc, #320]	; (8005250 <_svfiprintf_r+0x1dc>)
 8005110:	f7fb f866 	bl	80001e0 <memchr>
 8005114:	9b04      	ldr	r3, [sp, #16]
 8005116:	b9d0      	cbnz	r0, 800514e <_svfiprintf_r+0xda>
 8005118:	06d9      	lsls	r1, r3, #27
 800511a:	bf44      	itt	mi
 800511c:	2220      	movmi	r2, #32
 800511e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005122:	071a      	lsls	r2, r3, #28
 8005124:	bf44      	itt	mi
 8005126:	222b      	movmi	r2, #43	; 0x2b
 8005128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800512c:	782a      	ldrb	r2, [r5, #0]
 800512e:	2a2a      	cmp	r2, #42	; 0x2a
 8005130:	d015      	beq.n	800515e <_svfiprintf_r+0xea>
 8005132:	9a07      	ldr	r2, [sp, #28]
 8005134:	462f      	mov	r7, r5
 8005136:	2000      	movs	r0, #0
 8005138:	250a      	movs	r5, #10
 800513a:	4639      	mov	r1, r7
 800513c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005140:	3b30      	subs	r3, #48	; 0x30
 8005142:	2b09      	cmp	r3, #9
 8005144:	d94d      	bls.n	80051e2 <_svfiprintf_r+0x16e>
 8005146:	b1b8      	cbz	r0, 8005178 <_svfiprintf_r+0x104>
 8005148:	e00f      	b.n	800516a <_svfiprintf_r+0xf6>
 800514a:	462f      	mov	r7, r5
 800514c:	e7b8      	b.n	80050c0 <_svfiprintf_r+0x4c>
 800514e:	4a40      	ldr	r2, [pc, #256]	; (8005250 <_svfiprintf_r+0x1dc>)
 8005150:	1a80      	subs	r0, r0, r2
 8005152:	fa0b f000 	lsl.w	r0, fp, r0
 8005156:	4318      	orrs	r0, r3
 8005158:	9004      	str	r0, [sp, #16]
 800515a:	463d      	mov	r5, r7
 800515c:	e7d3      	b.n	8005106 <_svfiprintf_r+0x92>
 800515e:	9a03      	ldr	r2, [sp, #12]
 8005160:	1d11      	adds	r1, r2, #4
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	9103      	str	r1, [sp, #12]
 8005166:	2a00      	cmp	r2, #0
 8005168:	db01      	blt.n	800516e <_svfiprintf_r+0xfa>
 800516a:	9207      	str	r2, [sp, #28]
 800516c:	e004      	b.n	8005178 <_svfiprintf_r+0x104>
 800516e:	4252      	negs	r2, r2
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	9207      	str	r2, [sp, #28]
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	783b      	ldrb	r3, [r7, #0]
 800517a:	2b2e      	cmp	r3, #46	; 0x2e
 800517c:	d10c      	bne.n	8005198 <_svfiprintf_r+0x124>
 800517e:	787b      	ldrb	r3, [r7, #1]
 8005180:	2b2a      	cmp	r3, #42	; 0x2a
 8005182:	d133      	bne.n	80051ec <_svfiprintf_r+0x178>
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	9203      	str	r2, [sp, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	bfb8      	it	lt
 8005190:	f04f 33ff 	movlt.w	r3, #4294967295
 8005194:	3702      	adds	r7, #2
 8005196:	9305      	str	r3, [sp, #20]
 8005198:	4d2e      	ldr	r5, [pc, #184]	; (8005254 <_svfiprintf_r+0x1e0>)
 800519a:	7839      	ldrb	r1, [r7, #0]
 800519c:	2203      	movs	r2, #3
 800519e:	4628      	mov	r0, r5
 80051a0:	f7fb f81e 	bl	80001e0 <memchr>
 80051a4:	b138      	cbz	r0, 80051b6 <_svfiprintf_r+0x142>
 80051a6:	2340      	movs	r3, #64	; 0x40
 80051a8:	1b40      	subs	r0, r0, r5
 80051aa:	fa03 f000 	lsl.w	r0, r3, r0
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	4303      	orrs	r3, r0
 80051b2:	3701      	adds	r7, #1
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	7839      	ldrb	r1, [r7, #0]
 80051b8:	4827      	ldr	r0, [pc, #156]	; (8005258 <_svfiprintf_r+0x1e4>)
 80051ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051be:	2206      	movs	r2, #6
 80051c0:	1c7e      	adds	r6, r7, #1
 80051c2:	f7fb f80d 	bl	80001e0 <memchr>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d038      	beq.n	800523c <_svfiprintf_r+0x1c8>
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <_svfiprintf_r+0x1e8>)
 80051cc:	bb13      	cbnz	r3, 8005214 <_svfiprintf_r+0x1a0>
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	3307      	adds	r3, #7
 80051d2:	f023 0307 	bic.w	r3, r3, #7
 80051d6:	3308      	adds	r3, #8
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051dc:	444b      	add	r3, r9
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	e76d      	b.n	80050be <_svfiprintf_r+0x4a>
 80051e2:	fb05 3202 	mla	r2, r5, r2, r3
 80051e6:	2001      	movs	r0, #1
 80051e8:	460f      	mov	r7, r1
 80051ea:	e7a6      	b.n	800513a <_svfiprintf_r+0xc6>
 80051ec:	2300      	movs	r3, #0
 80051ee:	3701      	adds	r7, #1
 80051f0:	9305      	str	r3, [sp, #20]
 80051f2:	4619      	mov	r1, r3
 80051f4:	250a      	movs	r5, #10
 80051f6:	4638      	mov	r0, r7
 80051f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051fc:	3a30      	subs	r2, #48	; 0x30
 80051fe:	2a09      	cmp	r2, #9
 8005200:	d903      	bls.n	800520a <_svfiprintf_r+0x196>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0c8      	beq.n	8005198 <_svfiprintf_r+0x124>
 8005206:	9105      	str	r1, [sp, #20]
 8005208:	e7c6      	b.n	8005198 <_svfiprintf_r+0x124>
 800520a:	fb05 2101 	mla	r1, r5, r1, r2
 800520e:	2301      	movs	r3, #1
 8005210:	4607      	mov	r7, r0
 8005212:	e7f0      	b.n	80051f6 <_svfiprintf_r+0x182>
 8005214:	ab03      	add	r3, sp, #12
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4622      	mov	r2, r4
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <_svfiprintf_r+0x1ec>)
 800521c:	a904      	add	r1, sp, #16
 800521e:	4640      	mov	r0, r8
 8005220:	f3af 8000 	nop.w
 8005224:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005228:	4681      	mov	r9, r0
 800522a:	d1d6      	bne.n	80051da <_svfiprintf_r+0x166>
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	065b      	lsls	r3, r3, #25
 8005230:	f53f af35 	bmi.w	800509e <_svfiprintf_r+0x2a>
 8005234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005236:	b01d      	add	sp, #116	; 0x74
 8005238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523c:	ab03      	add	r3, sp, #12
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4622      	mov	r2, r4
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <_svfiprintf_r+0x1ec>)
 8005244:	a904      	add	r1, sp, #16
 8005246:	4640      	mov	r0, r8
 8005248:	f000 f882 	bl	8005350 <_printf_i>
 800524c:	e7ea      	b.n	8005224 <_svfiprintf_r+0x1b0>
 800524e:	bf00      	nop
 8005250:	080057fe 	.word	0x080057fe
 8005254:	08005804 	.word	0x08005804
 8005258:	08005808 	.word	0x08005808
 800525c:	00000000 	.word	0x00000000
 8005260:	08004fbf 	.word	0x08004fbf

08005264 <_printf_common>:
 8005264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	4691      	mov	r9, r2
 800526a:	461f      	mov	r7, r3
 800526c:	688a      	ldr	r2, [r1, #8]
 800526e:	690b      	ldr	r3, [r1, #16]
 8005270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005274:	4293      	cmp	r3, r2
 8005276:	bfb8      	it	lt
 8005278:	4613      	movlt	r3, r2
 800527a:	f8c9 3000 	str.w	r3, [r9]
 800527e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005282:	4606      	mov	r6, r0
 8005284:	460c      	mov	r4, r1
 8005286:	b112      	cbz	r2, 800528e <_printf_common+0x2a>
 8005288:	3301      	adds	r3, #1
 800528a:	f8c9 3000 	str.w	r3, [r9]
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	0699      	lsls	r1, r3, #26
 8005292:	bf42      	ittt	mi
 8005294:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005298:	3302      	addmi	r3, #2
 800529a:	f8c9 3000 	strmi.w	r3, [r9]
 800529e:	6825      	ldr	r5, [r4, #0]
 80052a0:	f015 0506 	ands.w	r5, r5, #6
 80052a4:	d107      	bne.n	80052b6 <_printf_common+0x52>
 80052a6:	f104 0a19 	add.w	sl, r4, #25
 80052aa:	68e3      	ldr	r3, [r4, #12]
 80052ac:	f8d9 2000 	ldr.w	r2, [r9]
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	42ab      	cmp	r3, r5
 80052b4:	dc28      	bgt.n	8005308 <_printf_common+0xa4>
 80052b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	3300      	adds	r3, #0
 80052be:	bf18      	it	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	0692      	lsls	r2, r2, #26
 80052c4:	d42d      	bmi.n	8005322 <_printf_common+0xbe>
 80052c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ca:	4639      	mov	r1, r7
 80052cc:	4630      	mov	r0, r6
 80052ce:	47c0      	blx	r8
 80052d0:	3001      	adds	r0, #1
 80052d2:	d020      	beq.n	8005316 <_printf_common+0xb2>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	68e5      	ldr	r5, [r4, #12]
 80052d8:	f8d9 2000 	ldr.w	r2, [r9]
 80052dc:	f003 0306 	and.w	r3, r3, #6
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	bf08      	it	eq
 80052e4:	1aad      	subeq	r5, r5, r2
 80052e6:	68a3      	ldr	r3, [r4, #8]
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	bf0c      	ite	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	2500      	movne	r5, #0
 80052f2:	4293      	cmp	r3, r2
 80052f4:	bfc4      	itt	gt
 80052f6:	1a9b      	subgt	r3, r3, r2
 80052f8:	18ed      	addgt	r5, r5, r3
 80052fa:	f04f 0900 	mov.w	r9, #0
 80052fe:	341a      	adds	r4, #26
 8005300:	454d      	cmp	r5, r9
 8005302:	d11a      	bne.n	800533a <_printf_common+0xd6>
 8005304:	2000      	movs	r0, #0
 8005306:	e008      	b.n	800531a <_printf_common+0xb6>
 8005308:	2301      	movs	r3, #1
 800530a:	4652      	mov	r2, sl
 800530c:	4639      	mov	r1, r7
 800530e:	4630      	mov	r0, r6
 8005310:	47c0      	blx	r8
 8005312:	3001      	adds	r0, #1
 8005314:	d103      	bne.n	800531e <_printf_common+0xba>
 8005316:	f04f 30ff 	mov.w	r0, #4294967295
 800531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531e:	3501      	adds	r5, #1
 8005320:	e7c3      	b.n	80052aa <_printf_common+0x46>
 8005322:	18e1      	adds	r1, r4, r3
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	2030      	movs	r0, #48	; 0x30
 8005328:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800532c:	4422      	add	r2, r4
 800532e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005332:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005336:	3302      	adds	r3, #2
 8005338:	e7c5      	b.n	80052c6 <_printf_common+0x62>
 800533a:	2301      	movs	r3, #1
 800533c:	4622      	mov	r2, r4
 800533e:	4639      	mov	r1, r7
 8005340:	4630      	mov	r0, r6
 8005342:	47c0      	blx	r8
 8005344:	3001      	adds	r0, #1
 8005346:	d0e6      	beq.n	8005316 <_printf_common+0xb2>
 8005348:	f109 0901 	add.w	r9, r9, #1
 800534c:	e7d8      	b.n	8005300 <_printf_common+0x9c>
	...

08005350 <_printf_i>:
 8005350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005354:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005358:	460c      	mov	r4, r1
 800535a:	7e09      	ldrb	r1, [r1, #24]
 800535c:	b085      	sub	sp, #20
 800535e:	296e      	cmp	r1, #110	; 0x6e
 8005360:	4617      	mov	r7, r2
 8005362:	4606      	mov	r6, r0
 8005364:	4698      	mov	r8, r3
 8005366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005368:	f000 80b3 	beq.w	80054d2 <_printf_i+0x182>
 800536c:	d822      	bhi.n	80053b4 <_printf_i+0x64>
 800536e:	2963      	cmp	r1, #99	; 0x63
 8005370:	d036      	beq.n	80053e0 <_printf_i+0x90>
 8005372:	d80a      	bhi.n	800538a <_printf_i+0x3a>
 8005374:	2900      	cmp	r1, #0
 8005376:	f000 80b9 	beq.w	80054ec <_printf_i+0x19c>
 800537a:	2958      	cmp	r1, #88	; 0x58
 800537c:	f000 8083 	beq.w	8005486 <_printf_i+0x136>
 8005380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005384:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005388:	e032      	b.n	80053f0 <_printf_i+0xa0>
 800538a:	2964      	cmp	r1, #100	; 0x64
 800538c:	d001      	beq.n	8005392 <_printf_i+0x42>
 800538e:	2969      	cmp	r1, #105	; 0x69
 8005390:	d1f6      	bne.n	8005380 <_printf_i+0x30>
 8005392:	6820      	ldr	r0, [r4, #0]
 8005394:	6813      	ldr	r3, [r2, #0]
 8005396:	0605      	lsls	r5, r0, #24
 8005398:	f103 0104 	add.w	r1, r3, #4
 800539c:	d52a      	bpl.n	80053f4 <_printf_i+0xa4>
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da03      	bge.n	80053ae <_printf_i+0x5e>
 80053a6:	222d      	movs	r2, #45	; 0x2d
 80053a8:	425b      	negs	r3, r3
 80053aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053ae:	486f      	ldr	r0, [pc, #444]	; (800556c <_printf_i+0x21c>)
 80053b0:	220a      	movs	r2, #10
 80053b2:	e039      	b.n	8005428 <_printf_i+0xd8>
 80053b4:	2973      	cmp	r1, #115	; 0x73
 80053b6:	f000 809d 	beq.w	80054f4 <_printf_i+0x1a4>
 80053ba:	d808      	bhi.n	80053ce <_printf_i+0x7e>
 80053bc:	296f      	cmp	r1, #111	; 0x6f
 80053be:	d020      	beq.n	8005402 <_printf_i+0xb2>
 80053c0:	2970      	cmp	r1, #112	; 0x70
 80053c2:	d1dd      	bne.n	8005380 <_printf_i+0x30>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f043 0320 	orr.w	r3, r3, #32
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	e003      	b.n	80053d6 <_printf_i+0x86>
 80053ce:	2975      	cmp	r1, #117	; 0x75
 80053d0:	d017      	beq.n	8005402 <_printf_i+0xb2>
 80053d2:	2978      	cmp	r1, #120	; 0x78
 80053d4:	d1d4      	bne.n	8005380 <_printf_i+0x30>
 80053d6:	2378      	movs	r3, #120	; 0x78
 80053d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053dc:	4864      	ldr	r0, [pc, #400]	; (8005570 <_printf_i+0x220>)
 80053de:	e055      	b.n	800548c <_printf_i+0x13c>
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	1d19      	adds	r1, r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6011      	str	r1, [r2, #0]
 80053e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f0:	2301      	movs	r3, #1
 80053f2:	e08c      	b.n	800550e <_printf_i+0x1be>
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6011      	str	r1, [r2, #0]
 80053f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053fc:	bf18      	it	ne
 80053fe:	b21b      	sxthne	r3, r3
 8005400:	e7cf      	b.n	80053a2 <_printf_i+0x52>
 8005402:	6813      	ldr	r3, [r2, #0]
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1d18      	adds	r0, r3, #4
 8005408:	6010      	str	r0, [r2, #0]
 800540a:	0628      	lsls	r0, r5, #24
 800540c:	d501      	bpl.n	8005412 <_printf_i+0xc2>
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	e002      	b.n	8005418 <_printf_i+0xc8>
 8005412:	0668      	lsls	r0, r5, #25
 8005414:	d5fb      	bpl.n	800540e <_printf_i+0xbe>
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	4854      	ldr	r0, [pc, #336]	; (800556c <_printf_i+0x21c>)
 800541a:	296f      	cmp	r1, #111	; 0x6f
 800541c:	bf14      	ite	ne
 800541e:	220a      	movne	r2, #10
 8005420:	2208      	moveq	r2, #8
 8005422:	2100      	movs	r1, #0
 8005424:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005428:	6865      	ldr	r5, [r4, #4]
 800542a:	60a5      	str	r5, [r4, #8]
 800542c:	2d00      	cmp	r5, #0
 800542e:	f2c0 8095 	blt.w	800555c <_printf_i+0x20c>
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	f021 0104 	bic.w	r1, r1, #4
 8005438:	6021      	str	r1, [r4, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d13d      	bne.n	80054ba <_printf_i+0x16a>
 800543e:	2d00      	cmp	r5, #0
 8005440:	f040 808e 	bne.w	8005560 <_printf_i+0x210>
 8005444:	4665      	mov	r5, ip
 8005446:	2a08      	cmp	r2, #8
 8005448:	d10b      	bne.n	8005462 <_printf_i+0x112>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	07db      	lsls	r3, r3, #31
 800544e:	d508      	bpl.n	8005462 <_printf_i+0x112>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	bfde      	ittt	le
 8005458:	2330      	movle	r3, #48	; 0x30
 800545a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800545e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005462:	ebac 0305 	sub.w	r3, ip, r5
 8005466:	6123      	str	r3, [r4, #16]
 8005468:	f8cd 8000 	str.w	r8, [sp]
 800546c:	463b      	mov	r3, r7
 800546e:	aa03      	add	r2, sp, #12
 8005470:	4621      	mov	r1, r4
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff fef6 	bl	8005264 <_printf_common>
 8005478:	3001      	adds	r0, #1
 800547a:	d14d      	bne.n	8005518 <_printf_i+0x1c8>
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	b005      	add	sp, #20
 8005482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005486:	4839      	ldr	r0, [pc, #228]	; (800556c <_printf_i+0x21c>)
 8005488:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800548c:	6813      	ldr	r3, [r2, #0]
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	1d1d      	adds	r5, r3, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6015      	str	r5, [r2, #0]
 8005496:	060a      	lsls	r2, r1, #24
 8005498:	d50b      	bpl.n	80054b2 <_printf_i+0x162>
 800549a:	07ca      	lsls	r2, r1, #31
 800549c:	bf44      	itt	mi
 800549e:	f041 0120 	orrmi.w	r1, r1, #32
 80054a2:	6021      	strmi	r1, [r4, #0]
 80054a4:	b91b      	cbnz	r3, 80054ae <_printf_i+0x15e>
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	f022 0220 	bic.w	r2, r2, #32
 80054ac:	6022      	str	r2, [r4, #0]
 80054ae:	2210      	movs	r2, #16
 80054b0:	e7b7      	b.n	8005422 <_printf_i+0xd2>
 80054b2:	064d      	lsls	r5, r1, #25
 80054b4:	bf48      	it	mi
 80054b6:	b29b      	uxthmi	r3, r3
 80054b8:	e7ef      	b.n	800549a <_printf_i+0x14a>
 80054ba:	4665      	mov	r5, ip
 80054bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c0:	fb02 3311 	mls	r3, r2, r1, r3
 80054c4:	5cc3      	ldrb	r3, [r0, r3]
 80054c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054ca:	460b      	mov	r3, r1
 80054cc:	2900      	cmp	r1, #0
 80054ce:	d1f5      	bne.n	80054bc <_printf_i+0x16c>
 80054d0:	e7b9      	b.n	8005446 <_printf_i+0xf6>
 80054d2:	6813      	ldr	r3, [r2, #0]
 80054d4:	6825      	ldr	r5, [r4, #0]
 80054d6:	6961      	ldr	r1, [r4, #20]
 80054d8:	1d18      	adds	r0, r3, #4
 80054da:	6010      	str	r0, [r2, #0]
 80054dc:	0628      	lsls	r0, r5, #24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	d501      	bpl.n	80054e6 <_printf_i+0x196>
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	e002      	b.n	80054ec <_printf_i+0x19c>
 80054e6:	066a      	lsls	r2, r5, #25
 80054e8:	d5fb      	bpl.n	80054e2 <_printf_i+0x192>
 80054ea:	8019      	strh	r1, [r3, #0]
 80054ec:	2300      	movs	r3, #0
 80054ee:	6123      	str	r3, [r4, #16]
 80054f0:	4665      	mov	r5, ip
 80054f2:	e7b9      	b.n	8005468 <_printf_i+0x118>
 80054f4:	6813      	ldr	r3, [r2, #0]
 80054f6:	1d19      	adds	r1, r3, #4
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	681d      	ldr	r5, [r3, #0]
 80054fc:	6862      	ldr	r2, [r4, #4]
 80054fe:	2100      	movs	r1, #0
 8005500:	4628      	mov	r0, r5
 8005502:	f7fa fe6d 	bl	80001e0 <memchr>
 8005506:	b108      	cbz	r0, 800550c <_printf_i+0x1bc>
 8005508:	1b40      	subs	r0, r0, r5
 800550a:	6060      	str	r0, [r4, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	2300      	movs	r3, #0
 8005512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005516:	e7a7      	b.n	8005468 <_printf_i+0x118>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	462a      	mov	r2, r5
 800551c:	4639      	mov	r1, r7
 800551e:	4630      	mov	r0, r6
 8005520:	47c0      	blx	r8
 8005522:	3001      	adds	r0, #1
 8005524:	d0aa      	beq.n	800547c <_printf_i+0x12c>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	079b      	lsls	r3, r3, #30
 800552a:	d413      	bmi.n	8005554 <_printf_i+0x204>
 800552c:	68e0      	ldr	r0, [r4, #12]
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	4298      	cmp	r0, r3
 8005532:	bfb8      	it	lt
 8005534:	4618      	movlt	r0, r3
 8005536:	e7a3      	b.n	8005480 <_printf_i+0x130>
 8005538:	2301      	movs	r3, #1
 800553a:	464a      	mov	r2, r9
 800553c:	4639      	mov	r1, r7
 800553e:	4630      	mov	r0, r6
 8005540:	47c0      	blx	r8
 8005542:	3001      	adds	r0, #1
 8005544:	d09a      	beq.n	800547c <_printf_i+0x12c>
 8005546:	3501      	adds	r5, #1
 8005548:	68e3      	ldr	r3, [r4, #12]
 800554a:	9a03      	ldr	r2, [sp, #12]
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	42ab      	cmp	r3, r5
 8005550:	dcf2      	bgt.n	8005538 <_printf_i+0x1e8>
 8005552:	e7eb      	b.n	800552c <_printf_i+0x1dc>
 8005554:	2500      	movs	r5, #0
 8005556:	f104 0919 	add.w	r9, r4, #25
 800555a:	e7f5      	b.n	8005548 <_printf_i+0x1f8>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ac      	bne.n	80054ba <_printf_i+0x16a>
 8005560:	7803      	ldrb	r3, [r0, #0]
 8005562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005566:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800556a:	e76c      	b.n	8005446 <_printf_i+0xf6>
 800556c:	0800580f 	.word	0x0800580f
 8005570:	08005820 	.word	0x08005820

08005574 <__ascii_wctomb>:
 8005574:	b149      	cbz	r1, 800558a <__ascii_wctomb+0x16>
 8005576:	2aff      	cmp	r2, #255	; 0xff
 8005578:	bf85      	ittet	hi
 800557a:	238a      	movhi	r3, #138	; 0x8a
 800557c:	6003      	strhi	r3, [r0, #0]
 800557e:	700a      	strbls	r2, [r1, #0]
 8005580:	f04f 30ff 	movhi.w	r0, #4294967295
 8005584:	bf98      	it	ls
 8005586:	2001      	movls	r0, #1
 8005588:	4770      	bx	lr
 800558a:	4608      	mov	r0, r1
 800558c:	4770      	bx	lr

0800558e <memcpy>:
 800558e:	b510      	push	{r4, lr}
 8005590:	1e43      	subs	r3, r0, #1
 8005592:	440a      	add	r2, r1
 8005594:	4291      	cmp	r1, r2
 8005596:	d100      	bne.n	800559a <memcpy+0xc>
 8005598:	bd10      	pop	{r4, pc}
 800559a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a2:	e7f7      	b.n	8005594 <memcpy+0x6>

080055a4 <memmove>:
 80055a4:	4288      	cmp	r0, r1
 80055a6:	b510      	push	{r4, lr}
 80055a8:	eb01 0302 	add.w	r3, r1, r2
 80055ac:	d807      	bhi.n	80055be <memmove+0x1a>
 80055ae:	1e42      	subs	r2, r0, #1
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d00a      	beq.n	80055ca <memmove+0x26>
 80055b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80055bc:	e7f8      	b.n	80055b0 <memmove+0xc>
 80055be:	4283      	cmp	r3, r0
 80055c0:	d9f5      	bls.n	80055ae <memmove+0xa>
 80055c2:	1881      	adds	r1, r0, r2
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	42d3      	cmn	r3, r2
 80055c8:	d100      	bne.n	80055cc <memmove+0x28>
 80055ca:	bd10      	pop	{r4, pc}
 80055cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80055d4:	e7f7      	b.n	80055c6 <memmove+0x22>
	...

080055d8 <_free_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4605      	mov	r5, r0
 80055dc:	2900      	cmp	r1, #0
 80055de:	d045      	beq.n	800566c <_free_r+0x94>
 80055e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e4:	1f0c      	subs	r4, r1, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bfb8      	it	lt
 80055ea:	18e4      	addlt	r4, r4, r3
 80055ec:	f000 f8d2 	bl	8005794 <__malloc_lock>
 80055f0:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <_free_r+0x98>)
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	4610      	mov	r0, r2
 80055f6:	b933      	cbnz	r3, 8005606 <_free_r+0x2e>
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	6014      	str	r4, [r2, #0]
 80055fc:	4628      	mov	r0, r5
 80055fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005602:	f000 b8c8 	b.w	8005796 <__malloc_unlock>
 8005606:	42a3      	cmp	r3, r4
 8005608:	d90c      	bls.n	8005624 <_free_r+0x4c>
 800560a:	6821      	ldr	r1, [r4, #0]
 800560c:	1862      	adds	r2, r4, r1
 800560e:	4293      	cmp	r3, r2
 8005610:	bf04      	itt	eq
 8005612:	681a      	ldreq	r2, [r3, #0]
 8005614:	685b      	ldreq	r3, [r3, #4]
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	bf04      	itt	eq
 800561a:	1852      	addeq	r2, r2, r1
 800561c:	6022      	streq	r2, [r4, #0]
 800561e:	6004      	str	r4, [r0, #0]
 8005620:	e7ec      	b.n	80055fc <_free_r+0x24>
 8005622:	4613      	mov	r3, r2
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	b10a      	cbz	r2, 800562c <_free_r+0x54>
 8005628:	42a2      	cmp	r2, r4
 800562a:	d9fa      	bls.n	8005622 <_free_r+0x4a>
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	1858      	adds	r0, r3, r1
 8005630:	42a0      	cmp	r0, r4
 8005632:	d10b      	bne.n	800564c <_free_r+0x74>
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	4401      	add	r1, r0
 8005638:	1858      	adds	r0, r3, r1
 800563a:	4282      	cmp	r2, r0
 800563c:	6019      	str	r1, [r3, #0]
 800563e:	d1dd      	bne.n	80055fc <_free_r+0x24>
 8005640:	6810      	ldr	r0, [r2, #0]
 8005642:	6852      	ldr	r2, [r2, #4]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	4401      	add	r1, r0
 8005648:	6019      	str	r1, [r3, #0]
 800564a:	e7d7      	b.n	80055fc <_free_r+0x24>
 800564c:	d902      	bls.n	8005654 <_free_r+0x7c>
 800564e:	230c      	movs	r3, #12
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	e7d3      	b.n	80055fc <_free_r+0x24>
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	1821      	adds	r1, r4, r0
 8005658:	428a      	cmp	r2, r1
 800565a:	bf04      	itt	eq
 800565c:	6811      	ldreq	r1, [r2, #0]
 800565e:	6852      	ldreq	r2, [r2, #4]
 8005660:	6062      	str	r2, [r4, #4]
 8005662:	bf04      	itt	eq
 8005664:	1809      	addeq	r1, r1, r0
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	605c      	str	r4, [r3, #4]
 800566a:	e7c7      	b.n	80055fc <_free_r+0x24>
 800566c:	bd38      	pop	{r3, r4, r5, pc}
 800566e:	bf00      	nop
 8005670:	20000208 	.word	0x20000208

08005674 <_malloc_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	1ccd      	adds	r5, r1, #3
 8005678:	f025 0503 	bic.w	r5, r5, #3
 800567c:	3508      	adds	r5, #8
 800567e:	2d0c      	cmp	r5, #12
 8005680:	bf38      	it	cc
 8005682:	250c      	movcc	r5, #12
 8005684:	2d00      	cmp	r5, #0
 8005686:	4606      	mov	r6, r0
 8005688:	db01      	blt.n	800568e <_malloc_r+0x1a>
 800568a:	42a9      	cmp	r1, r5
 800568c:	d903      	bls.n	8005696 <_malloc_r+0x22>
 800568e:	230c      	movs	r3, #12
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	2000      	movs	r0, #0
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	f000 f87d 	bl	8005794 <__malloc_lock>
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <_malloc_r+0xac>)
 800569c:	6814      	ldr	r4, [r2, #0]
 800569e:	4621      	mov	r1, r4
 80056a0:	b991      	cbnz	r1, 80056c8 <_malloc_r+0x54>
 80056a2:	4c20      	ldr	r4, [pc, #128]	; (8005724 <_malloc_r+0xb0>)
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	b91b      	cbnz	r3, 80056b0 <_malloc_r+0x3c>
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 f863 	bl	8005774 <_sbrk_r>
 80056ae:	6020      	str	r0, [r4, #0]
 80056b0:	4629      	mov	r1, r5
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 f85e 	bl	8005774 <_sbrk_r>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d124      	bne.n	8005706 <_malloc_r+0x92>
 80056bc:	230c      	movs	r3, #12
 80056be:	6033      	str	r3, [r6, #0]
 80056c0:	4630      	mov	r0, r6
 80056c2:	f000 f868 	bl	8005796 <__malloc_unlock>
 80056c6:	e7e4      	b.n	8005692 <_malloc_r+0x1e>
 80056c8:	680b      	ldr	r3, [r1, #0]
 80056ca:	1b5b      	subs	r3, r3, r5
 80056cc:	d418      	bmi.n	8005700 <_malloc_r+0x8c>
 80056ce:	2b0b      	cmp	r3, #11
 80056d0:	d90f      	bls.n	80056f2 <_malloc_r+0x7e>
 80056d2:	600b      	str	r3, [r1, #0]
 80056d4:	50cd      	str	r5, [r1, r3]
 80056d6:	18cc      	adds	r4, r1, r3
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f85c 	bl	8005796 <__malloc_unlock>
 80056de:	f104 000b 	add.w	r0, r4, #11
 80056e2:	1d23      	adds	r3, r4, #4
 80056e4:	f020 0007 	bic.w	r0, r0, #7
 80056e8:	1ac3      	subs	r3, r0, r3
 80056ea:	d0d3      	beq.n	8005694 <_malloc_r+0x20>
 80056ec:	425a      	negs	r2, r3
 80056ee:	50e2      	str	r2, [r4, r3]
 80056f0:	e7d0      	b.n	8005694 <_malloc_r+0x20>
 80056f2:	428c      	cmp	r4, r1
 80056f4:	684b      	ldr	r3, [r1, #4]
 80056f6:	bf16      	itet	ne
 80056f8:	6063      	strne	r3, [r4, #4]
 80056fa:	6013      	streq	r3, [r2, #0]
 80056fc:	460c      	movne	r4, r1
 80056fe:	e7eb      	b.n	80056d8 <_malloc_r+0x64>
 8005700:	460c      	mov	r4, r1
 8005702:	6849      	ldr	r1, [r1, #4]
 8005704:	e7cc      	b.n	80056a0 <_malloc_r+0x2c>
 8005706:	1cc4      	adds	r4, r0, #3
 8005708:	f024 0403 	bic.w	r4, r4, #3
 800570c:	42a0      	cmp	r0, r4
 800570e:	d005      	beq.n	800571c <_malloc_r+0xa8>
 8005710:	1a21      	subs	r1, r4, r0
 8005712:	4630      	mov	r0, r6
 8005714:	f000 f82e 	bl	8005774 <_sbrk_r>
 8005718:	3001      	adds	r0, #1
 800571a:	d0cf      	beq.n	80056bc <_malloc_r+0x48>
 800571c:	6025      	str	r5, [r4, #0]
 800571e:	e7db      	b.n	80056d8 <_malloc_r+0x64>
 8005720:	20000208 	.word	0x20000208
 8005724:	2000020c 	.word	0x2000020c

08005728 <_realloc_r>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	4607      	mov	r7, r0
 800572c:	4614      	mov	r4, r2
 800572e:	460e      	mov	r6, r1
 8005730:	b921      	cbnz	r1, 800573c <_realloc_r+0x14>
 8005732:	4611      	mov	r1, r2
 8005734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005738:	f7ff bf9c 	b.w	8005674 <_malloc_r>
 800573c:	b922      	cbnz	r2, 8005748 <_realloc_r+0x20>
 800573e:	f7ff ff4b 	bl	80055d8 <_free_r>
 8005742:	4625      	mov	r5, r4
 8005744:	4628      	mov	r0, r5
 8005746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005748:	f000 f826 	bl	8005798 <_malloc_usable_size_r>
 800574c:	42a0      	cmp	r0, r4
 800574e:	d20f      	bcs.n	8005770 <_realloc_r+0x48>
 8005750:	4621      	mov	r1, r4
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ff8e 	bl	8005674 <_malloc_r>
 8005758:	4605      	mov	r5, r0
 800575a:	2800      	cmp	r0, #0
 800575c:	d0f2      	beq.n	8005744 <_realloc_r+0x1c>
 800575e:	4631      	mov	r1, r6
 8005760:	4622      	mov	r2, r4
 8005762:	f7ff ff14 	bl	800558e <memcpy>
 8005766:	4631      	mov	r1, r6
 8005768:	4638      	mov	r0, r7
 800576a:	f7ff ff35 	bl	80055d8 <_free_r>
 800576e:	e7e9      	b.n	8005744 <_realloc_r+0x1c>
 8005770:	4635      	mov	r5, r6
 8005772:	e7e7      	b.n	8005744 <_realloc_r+0x1c>

08005774 <_sbrk_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4c06      	ldr	r4, [pc, #24]	; (8005790 <_sbrk_r+0x1c>)
 8005778:	2300      	movs	r3, #0
 800577a:	4605      	mov	r5, r0
 800577c:	4608      	mov	r0, r1
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	f7fc fc86 	bl	8002090 <_sbrk>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_sbrk_r+0x1a>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	b103      	cbz	r3, 800578e <_sbrk_r+0x1a>
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200003fc 	.word	0x200003fc

08005794 <__malloc_lock>:
 8005794:	4770      	bx	lr

08005796 <__malloc_unlock>:
 8005796:	4770      	bx	lr

08005798 <_malloc_usable_size_r>:
 8005798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800579c:	1f18      	subs	r0, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfbc      	itt	lt
 80057a2:	580b      	ldrlt	r3, [r1, r0]
 80057a4:	18c0      	addlt	r0, r0, r3
 80057a6:	4770      	bx	lr

080057a8 <_init>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr

080057b4 <_fini>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr
